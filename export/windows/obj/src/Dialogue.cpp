// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Dialogue
#include <Dialogue.h>
#endif
#ifndef INCLUDED_LoseState
#include <LoseState.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_text_FlxTypeText
#include <flixel/addons/text/FlxTypeText.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_36c4128520ee5cbf_13_new,"Dialogue","new",0xc21a862a,"Dialogue.new","Dialogue.hx",13,0xffb8ec86)
HX_LOCAL_STACK_FRAME(_hx_pos_36c4128520ee5cbf_60_update,"Dialogue","update",0xce230a7f,"Dialogue.update","Dialogue.hx",60,0xffb8ec86)
HX_LOCAL_STACK_FRAME(_hx_pos_36c4128520ee5cbf_82_update,"Dialogue","update",0xce230a7f,"Dialogue.update","Dialogue.hx",82,0xffb8ec86)
HX_LOCAL_STACK_FRAME(_hx_pos_36c4128520ee5cbf_100_doText,"Dialogue","doText",0x641af64e,"Dialogue.doText","Dialogue.hx",100,0xffb8ec86)
HX_LOCAL_STACK_FRAME(_hx_pos_36c4128520ee5cbf_25_boot,"Dialogue","boot",0x0d33df28,"Dialogue.boot","Dialogue.hx",25,0xffb8ec86)

void Dialogue_obj::__construct(::String anim, ::Dynamic audio,::Array< ::String > text,::String whichOne){
            	HX_GC_STACKFRAME(&_hx_pos_36c4128520ee5cbf_13_new)
HXLINE(  23)		this->dcount = 0;
HXLINE(  18)		this->presskey =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,15,15,null(),null(),null(),null());
HXLINE(  17)		this->dialogueBox =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(  16)		this->dtext =  ::flixel::addons::text::FlxTypeText_obj::__alloc( HX_CTX ,( (Float)(-250) ),( (Float)(350) ),1070,HX_("",00,00,00,00),null(),null());
HXLINE(  29)		super::__construct(null(),null(),null());
HXLINE(  30)		this->txtArray = text;
HXLINE(  31)		this->globalAnim = anim;
HXLINE(  32)		this->globalAudio = ( (bool)(audio) );
HXLINE(  33)		this->endShit = whichOne;
HXLINE(  34)		this->set_antialiasing(false);
HXLINE(  35)		::flixel::FlxG_obj::sound->pause();
HXLINE(  36)		this->tex = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(HX_("assets/images/inGame/dialogue.png",60,8f,09,64),HX_("assets/images/inGame/dialogue.xml",8e,a0,0f,64));
HXLINE(  37)		this->dialogueBox->set_frames(this->tex);
HXLINE(  38)		this->dialogueBox->animation->addByPrefix(HX_("happy",20,65,1f,22),HX_("happy",20,65,1f,22),24,false,null(),null());
HXLINE(  39)		this->dialogueBox->animation->addByPrefix(HX_("sad",16,98,57,00),HX_("sad",16,98,57,00),24,false,null(),null());
HXLINE(  40)		this->dialogueBox->animation->addByPrefix(HX_("regular",5c,52,88,82),HX_("regular",5c,52,88,82),24,false,null(),null());
HXLINE(  41)		 ::flixel::FlxSprite _hx_tmp = this->dialogueBox;
HXDLIN(  41)		int _hx_tmp1 = (::Std_obj::_hx_int(this->dialogueBox->get_width()) * 2);
HXDLIN(  41)		_hx_tmp->setGraphicSize(_hx_tmp1,(::Std_obj::_hx_int(this->dialogueBox->get_height()) * 2));
HXLINE(  42)		this->dialogueBox->setPosition(-100,-30);
HXLINE(  43)		this->dialogueBox->updateHitbox();
HXLINE(  44)		this->dtext->setFormat(HX_("assets/fonts/vcr.ttf",46,38,26,7e),64,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE(  45)		 ::flixel::_hx_system::FlxSound _hx_tmp2 = ::flixel::FlxG_obj::sound->load((HX_("assets/sounds/bap",12,95,04,ce) + ::Main_obj::soundExt),null(),null(),null(),null(),null(),null(),null());
HXDLIN(  45)		this->dtext->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp2);
HXLINE(  46)		this->dtext->set_visible(true);
HXLINE(  47)		this->dtext->setPosition(80,495);
HXLINE(  48)		this->presskey->setFormat(HX_("assets/fonts/vcr.ttf",46,38,26,7e),32,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE(  49)		this->presskey->set_text(HX_("Press ANY key to continue.",d4,25,23,c0));
HXLINE(  50)		this->add(this->dialogueBox);
HXLINE(  51)		this->add(this->dtext);
HXLINE(  52)		this->add(this->presskey);
HXLINE(  53)		if ((this->globalAudio == true)) {
HXLINE(  55)			::flixel::FlxG_obj::sound->playMusic((HX_("assets/music/dialogue",4e,fe,75,6a) + ::Main_obj::soundExt),1,true,null());
            		}
            	}

Dynamic Dialogue_obj::__CreateEmpty() { return new Dialogue_obj; }

void *Dialogue_obj::_hx_vtable = 0;

Dynamic Dialogue_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Dialogue_obj > _hx_result = new Dialogue_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Dialogue_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x33b8c15c) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x288ce903) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x288ce903;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x33b8c15c;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Dialogue_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_36c4128520ee5cbf_60_update)
HXLINE(  61)		if (( ( ::flixel::input::FlxBaseKeyList)(::flixel::FlxG_obj::keys->justPressed) )->get_ANY()) {
HXLINE(  63)			if ((this->dcount < this->txtArray->length)) {
HXLINE(  65)				this->doText();
            			}
            			else {
HXLINE(  69)				this->dialogueBox->set_visible(false);
HXLINE(  70)				this->dtext->set_visible(false);
HXLINE(  71)				if ((this->endShit == HX_("start",62,74,0b,84))) {
HXLINE(  73)					::PlayState_obj::startGam = true;
            				}
            				else {
HXLINE(  75)					if ((this->endShit == HX_("lose",d5,a9,b7,47))) {
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer fuckingtimer){
            							HX_GC_STACKFRAME(&_hx_pos_36c4128520ee5cbf_82_update)
HXLINE(  83)							::PlayState_obj::losewin = HX_("lose",d5,a9,b7,47);
HXLINE(  84)							{
HXLINE(  84)								 ::flixel::FlxState nextState =  ::LoseState_obj::__alloc( HX_CTX ,null());
HXDLIN(  84)								if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  84)									::flixel::FlxG_obj::game->_requestedState = nextState;
            								}
            							}
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(  77)						::flixel::FlxG_obj::sound->pause();
HXLINE(  78)						this->dtext->set_visible(false);
HXLINE(  79)						this->presskey->set_visible(false);
HXLINE(  80)						this->dialogueBox->set_visible(false);
HXLINE(  81)						 ::Dynamic lolDoShit =  ::Dynamic(new _hx_Closure_0());
HXDLIN(  81)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(3,lolDoShit,1);
HXLINE(  86)						::PlayState_obj::player->doThing(HX_("sleep",17,bd,c4,7e));
            					}
            					else {
HXLINE(  88)						if ((this->endShit == HX_("win",1c,a8,5a,00))) {
HXLINE(  90)							::PlayState_obj::losewin = HX_("win",1c,a8,5a,00);
HXLINE(  91)							{
HXLINE(  91)								 ::flixel::FlxState nextState =  ::LoseState_obj::__alloc( HX_CTX ,null());
HXDLIN(  91)								if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  91)									::flixel::FlxG_obj::game->_requestedState = nextState;
            								}
            							}
            						}
            					}
            				}
HXLINE(  93)				this->kill();
            			}
            		}
HXLINE(  96)		this->super::update(elapsed);
            	}


void Dialogue_obj::doText(){
            	HX_STACKFRAME(&_hx_pos_36c4128520ee5cbf_100_doText)
HXLINE( 101)		this->dialogueBox->animation->play(this->globalAnim,true,false,null());
HXLINE( 102)		this->dtext->resetText(this->txtArray->__get(this->dcount));
HXLINE( 103)		this->dtext->start(((Float)0.06),true,null(),null(),null());
HXLINE( 104)		 ::Dialogue _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 104)		_hx_tmp->dcount = (_hx_tmp->dcount + 1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Dialogue_obj,doText,(void))

bool Dialogue_obj::saddial;


::hx::ObjectPtr< Dialogue_obj > Dialogue_obj::__new(::String anim, ::Dynamic audio,::Array< ::String > text,::String whichOne) {
	::hx::ObjectPtr< Dialogue_obj > __this = new Dialogue_obj();
	__this->__construct(anim,audio,text,whichOne);
	return __this;
}

::hx::ObjectPtr< Dialogue_obj > Dialogue_obj::__alloc(::hx::Ctx *_hx_ctx,::String anim, ::Dynamic audio,::Array< ::String > text,::String whichOne) {
	Dialogue_obj *__this = (Dialogue_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Dialogue_obj), true, "Dialogue"));
	*(void **)__this = Dialogue_obj::_hx_vtable;
	__this->__construct(anim,audio,text,whichOne);
	return __this;
}

Dialogue_obj::Dialogue_obj()
{
}

void Dialogue_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Dialogue);
	HX_MARK_MEMBER_NAME(tex,"tex");
	HX_MARK_MEMBER_NAME(dtext,"dtext");
	HX_MARK_MEMBER_NAME(dialogueBox,"dialogueBox");
	HX_MARK_MEMBER_NAME(presskey,"presskey");
	HX_MARK_MEMBER_NAME(txtArray,"txtArray");
	HX_MARK_MEMBER_NAME(globalAnim,"globalAnim");
	HX_MARK_MEMBER_NAME(globalAudio,"globalAudio");
	HX_MARK_MEMBER_NAME(endShit,"endShit");
	HX_MARK_MEMBER_NAME(dcount,"dcount");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Dialogue_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tex,"tex");
	HX_VISIT_MEMBER_NAME(dtext,"dtext");
	HX_VISIT_MEMBER_NAME(dialogueBox,"dialogueBox");
	HX_VISIT_MEMBER_NAME(presskey,"presskey");
	HX_VISIT_MEMBER_NAME(txtArray,"txtArray");
	HX_VISIT_MEMBER_NAME(globalAnim,"globalAnim");
	HX_VISIT_MEMBER_NAME(globalAudio,"globalAudio");
	HX_VISIT_MEMBER_NAME(endShit,"endShit");
	HX_VISIT_MEMBER_NAME(dcount,"dcount");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Dialogue_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"tex") ) { return ::hx::Val( tex ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dtext") ) { return ::hx::Val( dtext ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"dcount") ) { return ::hx::Val( dcount ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"doText") ) { return ::hx::Val( doText_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"endShit") ) { return ::hx::Val( endShit ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"presskey") ) { return ::hx::Val( presskey ); }
		if (HX_FIELD_EQ(inName,"txtArray") ) { return ::hx::Val( txtArray ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"globalAnim") ) { return ::hx::Val( globalAnim ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"dialogueBox") ) { return ::hx::Val( dialogueBox ); }
		if (HX_FIELD_EQ(inName,"globalAudio") ) { return ::hx::Val( globalAudio ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Dialogue_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"saddial") ) { outValue = ( saddial ); return true; }
	}
	return false;
}

::hx::Val Dialogue_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"tex") ) { tex=inValue.Cast<  ::flixel::graphics::frames::FlxAtlasFrames >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dtext") ) { dtext=inValue.Cast<  ::flixel::addons::text::FlxTypeText >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"dcount") ) { dcount=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"endShit") ) { endShit=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"presskey") ) { presskey=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"txtArray") ) { txtArray=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"globalAnim") ) { globalAnim=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"dialogueBox") ) { dialogueBox=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"globalAudio") ) { globalAudio=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Dialogue_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"saddial") ) { saddial=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void Dialogue_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("tex",e7,5d,58,00));
	outFields->push(HX_("dtext",11,cf,0b,e1));
	outFields->push(HX_("dialogueBox",d3,87,95,1b));
	outFields->push(HX_("presskey",fc,09,16,70));
	outFields->push(HX_("txtArray",09,19,0e,83));
	outFields->push(HX_("globalAnim",14,d1,14,37));
	outFields->push(HX_("globalAudio",73,d0,be,ff));
	outFields->push(HX_("endShit",3b,89,77,2e));
	outFields->push(HX_("dcount",eb,59,13,46));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Dialogue_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::graphics::frames::FlxAtlasFrames */ ,(int)offsetof(Dialogue_obj,tex),HX_("tex",e7,5d,58,00)},
	{::hx::fsObject /*  ::flixel::addons::text::FlxTypeText */ ,(int)offsetof(Dialogue_obj,dtext),HX_("dtext",11,cf,0b,e1)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Dialogue_obj,dialogueBox),HX_("dialogueBox",d3,87,95,1b)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Dialogue_obj,presskey),HX_("presskey",fc,09,16,70)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Dialogue_obj,txtArray),HX_("txtArray",09,19,0e,83)},
	{::hx::fsString,(int)offsetof(Dialogue_obj,globalAnim),HX_("globalAnim",14,d1,14,37)},
	{::hx::fsBool,(int)offsetof(Dialogue_obj,globalAudio),HX_("globalAudio",73,d0,be,ff)},
	{::hx::fsString,(int)offsetof(Dialogue_obj,endShit),HX_("endShit",3b,89,77,2e)},
	{::hx::fsInt,(int)offsetof(Dialogue_obj,dcount),HX_("dcount",eb,59,13,46)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Dialogue_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &Dialogue_obj::saddial,HX_("saddial",c6,b2,3d,4d)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Dialogue_obj_sMemberFields[] = {
	HX_("tex",e7,5d,58,00),
	HX_("dtext",11,cf,0b,e1),
	HX_("dialogueBox",d3,87,95,1b),
	HX_("presskey",fc,09,16,70),
	HX_("txtArray",09,19,0e,83),
	HX_("globalAnim",14,d1,14,37),
	HX_("globalAudio",73,d0,be,ff),
	HX_("endShit",3b,89,77,2e),
	HX_("dcount",eb,59,13,46),
	HX_("update",09,86,05,87),
	HX_("doText",d8,71,fd,1c),
	::String(null()) };

static void Dialogue_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Dialogue_obj::saddial,"saddial");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Dialogue_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Dialogue_obj::saddial,"saddial");
};

#endif

::hx::Class Dialogue_obj::__mClass;

static ::String Dialogue_obj_sStaticFields[] = {
	HX_("saddial",c6,b2,3d,4d),
	::String(null())
};

void Dialogue_obj::__register()
{
	Dialogue_obj _hx_dummy;
	Dialogue_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Dialogue",38,e9,45,81);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Dialogue_obj::__GetStatic;
	__mClass->mSetStaticField = &Dialogue_obj::__SetStatic;
	__mClass->mMarkFunc = Dialogue_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Dialogue_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Dialogue_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Dialogue_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Dialogue_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Dialogue_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Dialogue_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Dialogue_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_36c4128520ee5cbf_25_boot)
HXDLIN(  25)		saddial = false;
            	}
}

