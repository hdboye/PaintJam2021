// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_LoseState
#include <LoseState.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseEventManager
#include <flixel/input/mouse/FlxMouseEventManager.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_78c1564f42c685fa_9_new,"LoseState","new",0xb0ce16ce,"LoseState.new","LoseState.hx",9,0x390b3c62)
HX_LOCAL_STACK_FRAME(_hx_pos_78c1564f42c685fa_24_create,"LoseState","create",0x617a594e,"LoseState.create","LoseState.hx",24,0x390b3c62)
HX_LOCAL_STACK_FRAME(_hx_pos_78c1564f42c685fa_15_create,"LoseState","create",0x617a594e,"LoseState.create","LoseState.hx",15,0x390b3c62)
static const int _hx_array_data_93f357dc_3[] = {
	(int)-1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_78c1564f42c685fa_30_update,"LoseState","update",0x6c70785b,"LoseState.update","LoseState.hx",30,0x390b3c62)
HX_LOCAL_STACK_FRAME(_hx_pos_78c1564f42c685fa_57_lose,"LoseState","lose",0x023b03a7,"LoseState.lose","LoseState.hx",57,0x390b3c62)
HX_LOCAL_STACK_FRAME(_hx_pos_78c1564f42c685fa_63_win,"LoseState","win",0xb0d4ee8a,"LoseState.win","LoseState.hx",63,0x390b3c62)

void LoseState_obj::__construct( ::Dynamic MaxSize){
            	HX_GC_STACKFRAME(&_hx_pos_78c1564f42c685fa_9_new)
HXLINE(  12)		this->replay =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,770,415,null());
HXLINE(  11)		this->winImg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(   9)		super::__construct(MaxSize);
            	}

Dynamic LoseState_obj::__CreateEmpty() { return new LoseState_obj; }

void *LoseState_obj::_hx_vtable = 0;

Dynamic LoseState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LoseState_obj > _hx_result = new LoseState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool LoseState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5736cd1c) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x5736cd1c;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void LoseState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite ugh){
            			HX_GC_STACKFRAME(&_hx_pos_78c1564f42c685fa_24_create)
HXLINE(  24)			 ::flixel::FlxState nextState =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN(  24)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  24)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_78c1564f42c685fa_15_create)
HXLINE(  16)		if ((::PlayState_obj::losewin == HX_("win",1c,a8,5a,00))) {
HXLINE(  17)			this->win();
            		}
            		else {
HXLINE(  19)			this->lose();
            		}
HXLINE(  20)		this->add(this->winImg);
HXLINE(  21)		this->add(this->replay);
HXLINE(  22)		 ::Dynamic playshit =  ::Dynamic(new _hx_Closure_0());
HXDLIN(  22)		::flixel::input::mouse::FlxMouseEventManager_obj::add(this->replay,playshit,null(),null(),null(),false,true,false,::Array_obj< int >::fromData( _hx_array_data_93f357dc_3,1));
HXLINE(  26)		this->super::create();
            	}


void LoseState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_78c1564f42c685fa_30_update)
HXLINE(  31)		if (::flixel::FlxG_obj::mouse->overlaps(this->replay,null())) {
HXLINE(  33)			if ((::PlayState_obj::losewin == HX_("win",1c,a8,5a,00))) {
HXLINE(  35)				this->replay->loadGraphic(HX_("assets/images/inGame/happyreplaytouch.png",60,89,e4,59),null(),null(),null(),null(),null());
            			}
            			else {
HXLINE(  39)				this->replay->loadGraphic(HX_("assets/images/inGame/replaytouch.png",86,a9,0d,9c),null(),null(),null(),null(),null());
            			}
            		}
            		else {
HXLINE(  44)			if ((::PlayState_obj::losewin == HX_("win",1c,a8,5a,00))) {
HXLINE(  46)				this->replay->loadGraphic(HX_("assets/images/inGame/happyreplay.png",15,de,37,fd),null(),null(),null(),null(),null());
            			}
            			else {
HXLINE(  50)				this->replay->loadGraphic(HX_("assets/images/inGame/replay.png",af,af,ae,98),null(),null(),null(),null(),null());
            			}
            		}
HXLINE(  53)		this->super::update(elapsed);
            	}


void LoseState_obj::lose(){
            	HX_STACKFRAME(&_hx_pos_78c1564f42c685fa_57_lose)
HXLINE(  58)		this->winImg->loadGraphic(HX_("assets/images/lose.png",3b,50,82,28),null(),null(),null(),null(),null());
HXLINE(  59)		::flixel::FlxG_obj::sound->playMusic((HX_("assets/music/lose",0b,28,5f,96) + ::Main_obj::soundExt),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(LoseState_obj,lose,(void))

void LoseState_obj::win(){
            	HX_STACKFRAME(&_hx_pos_78c1564f42c685fa_63_win)
HXLINE(  64)		this->winImg->loadGraphic(HX_("assets/images/win.png",0c,e7,b1,b6),null(),null(),null(),null(),null());
HXLINE(  65)		::flixel::FlxG_obj::sound->playMusic((HX_("assets/music/win",a6,62,f6,19) + ::Main_obj::soundExt),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(LoseState_obj,win,(void))


::hx::ObjectPtr< LoseState_obj > LoseState_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< LoseState_obj > __this = new LoseState_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< LoseState_obj > LoseState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	LoseState_obj *__this = (LoseState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LoseState_obj), true, "LoseState"));
	*(void **)__this = LoseState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

LoseState_obj::LoseState_obj()
{
}

void LoseState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LoseState);
	HX_MARK_MEMBER_NAME(winImg,"winImg");
	HX_MARK_MEMBER_NAME(replay,"replay");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void LoseState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(winImg,"winImg");
	HX_VISIT_MEMBER_NAME(replay,"replay");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val LoseState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"win") ) { return ::hx::Val( win_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"lose") ) { return ::hx::Val( lose_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"winImg") ) { return ::hx::Val( winImg ); }
		if (HX_FIELD_EQ(inName,"replay") ) { return ::hx::Val( replay ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LoseState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"winImg") ) { winImg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"replay") ) { replay=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LoseState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("winImg",47,15,78,52));
	outFields->push(HX_("replay",27,e7,81,06));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LoseState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(LoseState_obj,winImg),HX_("winImg",47,15,78,52)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(LoseState_obj,replay),HX_("replay",27,e7,81,06)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LoseState_obj_sStaticStorageInfo = 0;
#endif

static ::String LoseState_obj_sMemberFields[] = {
	HX_("winImg",47,15,78,52),
	HX_("replay",27,e7,81,06),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("lose",d5,a9,b7,47),
	HX_("win",1c,a8,5a,00),
	::String(null()) };

::hx::Class LoseState_obj::__mClass;

void LoseState_obj::__register()
{
	LoseState_obj _hx_dummy;
	LoseState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("LoseState",dc,57,f3,93);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LoseState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LoseState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LoseState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LoseState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

