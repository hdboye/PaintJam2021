// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseEventManager
#include <flixel/input/mouse/FlxMouseEventManager.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_PluginFrontEnd
#include <flixel/system/frontEnds/PluginFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1f119275e66a7b90_11_new,"MenuState","new",0xe563b1c4,"MenuState.new","MenuState.hx",11,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_18_create,"MenuState","create",0xe57b7c18,"MenuState.create","MenuState.hx",18,0xdfbcb22c)
static const int _hx_array_data_c0b6bfd2_2[] = {
	(int)-1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_33_update,"MenuState","update",0xf0719b25,"MenuState.update","MenuState.hx",33,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_46_startGame,"MenuState","startGame",0x336371d8,"MenuState.startGame","MenuState.hx",46,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_42_startGame,"MenuState","startGame",0x336371d8,"MenuState.startGame","MenuState.hx",42,0xdfbcb22c)

void MenuState_obj::__construct( ::Dynamic MaxSize){
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_11_new)
HXLINE(  15)		this->cursorSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  14)		this->playBtn =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,270,500,null());
HXLINE(  13)		this->menuBg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(  11)		super::__construct(MaxSize);
            	}

Dynamic MenuState_obj::__CreateEmpty() { return new MenuState_obj; }

void *MenuState_obj::_hx_vtable = 0;

Dynamic MenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MenuState_obj > _hx_result = new MenuState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x32c1072e) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x32c1072e;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void MenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_18_create)
HXLINE(  19)		if (::hx::IsNull( ::flixel::FlxG_obj::plugins->get(::hx::ClassOf< ::flixel::input::mouse::FlxMouseEventManager >()) )) {
HXLINE(  19)			 ::flixel::_hx_system::frontEnds::PluginFrontEnd _hx_tmp = ::flixel::FlxG_obj::plugins;
HXDLIN(  19)			_hx_tmp->add_flixel_input_mouse_FlxMouseEventManager( ::flixel::input::mouse::FlxMouseEventManager_obj::__alloc( HX_CTX ));
            		}
HXLINE(  20)		this->cursorSprite->loadGraphic(HX_("assets/images/cursor.png",7c,8a,a0,3f),null(),null(),null(),null(),null());
HXLINE(  21)		 ::flixel::input::mouse::FlxMouse _hx_tmp = ::flixel::FlxG_obj::mouse;
HXDLIN(  21)		_hx_tmp->load(this->cursorSprite->get_pixels(),null(),null(),null());
HXLINE(  22)		this->menuBg->loadGraphic(HX_("assets/images/bg.png",6b,23,cd,e0),null(),null(),null(),null(),null());
HXLINE(  23)		this->playBtn->loadGraphic(HX_("assets/images/playtouch.png",7b,0d,fe,2a),null(),null(),null(),null(),null());
HXLINE(  24)		this->playBtn->loadGraphic(HX_("assets/images/playbtn.png",58,d8,d2,e8),null(),null(),null(),null(),null());
HXLINE(  25)		this->add(this->menuBg);
HXLINE(  26)		this->add(this->playBtn);
HXLINE(  27)		::flixel::input::mouse::FlxMouseEventManager_obj::add(this->playBtn,this->startGame_dyn(),null(),null(),null(),false,true,false,::Array_obj< int >::fromData( _hx_array_data_c0b6bfd2_2,1));
HXLINE(  28)		::flixel::FlxG_obj::sound->playMusic((HX_("assets/music/menu",d5,c3,00,97) + ::Main_obj::soundExt),null(),null(),null());
HXLINE(  29)		this->super::create();
            	}


void MenuState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_33_update)
HXLINE(  34)		if (::flixel::FlxG_obj::mouse->overlaps(this->playBtn,null())) {
HXLINE(  35)			this->playBtn->loadGraphic(HX_("assets/images/playtouch.png",7b,0d,fe,2a),null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(  37)			this->playBtn->loadGraphic(HX_("assets/images/playbtn.png",58,d8,d2,e8),null(),null(),null(),null(),null());
            		}
HXLINE(  38)		this->super::update(elapsed);
            	}


void MenuState_obj::startGame( ::flixel::FlxSprite spriteShit){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_46_startGame)
HXLINE(  46)			 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null());
HXDLIN(  46)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  46)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_42_startGame)
HXLINE(  43)		::flixel::FlxG_obj::sound->play((HX_("assets/sounds/clicky",90,1e,9b,0c) + ::Main_obj::soundExt),1,false,null(),null(),null());
HXLINE(  44)		 ::Dynamic dirtBag =  ::Dynamic(new _hx_Closure_0());
HXDLIN(  44)		::flixel::FlxG_obj::camera->fade(-16777216,1,false,dirtBag,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuState_obj,startGame,(void))


::hx::ObjectPtr< MenuState_obj > MenuState_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< MenuState_obj > __this = new MenuState_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< MenuState_obj > MenuState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	MenuState_obj *__this = (MenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MenuState_obj), true, "MenuState"));
	*(void **)__this = MenuState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

MenuState_obj::MenuState_obj()
{
}

void MenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuState);
	HX_MARK_MEMBER_NAME(menuBg,"menuBg");
	HX_MARK_MEMBER_NAME(playBtn,"playBtn");
	HX_MARK_MEMBER_NAME(cursorSprite,"cursorSprite");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(menuBg,"menuBg");
	HX_VISIT_MEMBER_NAME(playBtn,"playBtn");
	HX_VISIT_MEMBER_NAME(cursorSprite,"cursorSprite");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"menuBg") ) { return ::hx::Val( menuBg ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"playBtn") ) { return ::hx::Val( playBtn ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"startGame") ) { return ::hx::Val( startGame_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cursorSprite") ) { return ::hx::Val( cursorSprite ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"menuBg") ) { menuBg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"playBtn") ) { playBtn=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cursorSprite") ) { cursorSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("menuBg",44,65,6d,05));
	outFields->push(HX_("playBtn",c8,7c,fa,89));
	outFields->push(HX_("cursorSprite",7b,a3,e2,ff));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuState_obj,menuBg),HX_("menuBg",44,65,6d,05)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuState_obj,playBtn),HX_("playBtn",c8,7c,fa,89)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuState_obj,cursorSprite),HX_("cursorSprite",7b,a3,e2,ff)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MenuState_obj_sStaticStorageInfo = 0;
#endif

static ::String MenuState_obj_sMemberFields[] = {
	HX_("menuBg",44,65,6d,05),
	HX_("playBtn",c8,7c,fa,89),
	HX_("cursorSprite",7b,a3,e2,ff),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("startGame",74,6d,52,fd),
	::String(null()) };

::hx::Class MenuState_obj::__mClass;

void MenuState_obj::__register()
{
	MenuState_obj _hx_dummy;
	MenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MenuState",d2,bf,b6,c0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MenuState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

