// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Dialogue
#include <Dialogue.h>
#endif
#ifndef INCLUDED_LoseState
#include <LoseState.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseEventManager
#include <flixel/input/mouse/FlxMouseEventManager.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_13_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",13,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_46_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",46,0xb30d7781)
static const ::String _hx_array_data_46c2835d_2[] = {
	HX_("yada yee lololol",21,49,5e,d6),HX_("oh f",9f,b5,ad,49),HX_("my art assignment1!!",f3,81,d0,57),HX_("i forgot to do it1!1!",41,67,dd,25),HX_("its due in 30 seconds....",f3,3c,83,af),HX_("uhhhh.. ok lets just",9b,39,f8,65),HX_("i like soup lets draw soup real quick",09,53,24,87),
};
static const ::String _hx_array_data_46c2835d_3[] = {
	HX_("ugh..",96,eb,45,a2),HX_("feeling so sleepy..",62,9b,35,b4),HX_("no energy...",87,ab,f6,91),
};
static const ::String _hx_array_data_46c2835d_4[] = {
	HX_("ayo less goooo",29,0b,51,75),HX_("i finished my painting!",60,72,60,e9),HX_("im gonna get an A+ on this lol!!",98,2a,9d,54),HX_("im gonna become a professional artist",4b,ad,11,4b),HX_("pog",88,5d,55,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_81_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",81,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_101_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",101,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_111_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",111,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_155_startGame,"PlayState","startGame",0x39a53123,"PlayState.startGame","PlayState.hx",155,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_126_startGame,"PlayState","startGame",0x39a53123,"PlayState.startGame","PlayState.hx",126,0xb30d7781)
static const int _hx_array_data_46c2835d_10[] = {
	(int)-1,
};
static const int _hx_array_data_46c2835d_11[] = {
	(int)-1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_158_startGame,"PlayState","startGame",0x39a53123,"PlayState.startGame","PlayState.hx",158,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_165_buySoup,"PlayState","buySoup",0xdfe75e4c,"PlayState.buySoup","PlayState.hx",165,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_179_buySoup,"PlayState","buySoup",0xdfe75e4c,"PlayState.buySoup","PlayState.hx",179,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_190_paintShit,"PlayState","paintShit",0x3d449e2d,"PlayState.paintShit","PlayState.hx",190,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_207_ending,"PlayState","ending",0x009b4cd8,"PlayState.ending","PlayState.hx",207,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_213_counterShit,"PlayState","counterShit",0x503d264b,"PlayState.counterShit","PlayState.hx",213,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_244_drinkSoup,"PlayState","drinkSoup",0xf7b767de,"PlayState.drinkSoup","PlayState.hx",244,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_256_barShit,"PlayState","barShit",0xd8f0bd22,"PlayState.barShit","PlayState.hx",256,0xb30d7781)
static const int _hx_array_data_46c2835d_20[] = {
	(int)0,
};
static const int _hx_array_data_46c2835d_21[] = {
	(int)1,
};
static const int _hx_array_data_46c2835d_22[] = {
	(int)2,
};
static const int _hx_array_data_46c2835d_23[] = {
	(int)3,
};
static const int _hx_array_data_46c2835d_24[] = {
	(int)-1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_268_barLoop,"PlayState","barLoop",0xd45593c6,"PlayState.barLoop","PlayState.hx",268,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_272_paintingSetup,"PlayState","paintingSetup",0xc1f56b08,"PlayState.paintingSetup","PlayState.hx",272,0xb30d7781)
static const int _hx_array_data_46c2835d_27[] = {
	(int)0,
};
static const int _hx_array_data_46c2835d_28[] = {
	(int)1,
};
static const int _hx_array_data_46c2835d_29[] = {
	(int)2,
};
static const int _hx_array_data_46c2835d_30[] = {
	(int)3,
};
static const int _hx_array_data_46c2835d_31[] = {
	(int)4,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_36_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",36,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_37_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",37,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_38_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",38,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_39_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",39,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_40_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",40,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_41_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",41,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_42_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",42,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_43_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",43,0xb30d7781)

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_13_new)
HXLINE(  33)		this->energyicon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  32)		this->energyTotal =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,120,570,null(),null(),null(),null());
HXLINE(  31)		this->moneyicon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  30)		this->moneyTotal =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  29)		this->timericon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  28)		this->timerTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  26)		this->moneyTimer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXLINE(  25)		this->curPaint = 0;
HXLINE(  24)		this->soupBtn =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,1020,130,null());
HXLINE(  23)		this->bar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,960,0,null());
HXLINE(  22)		this->gameEnd = false;
HXLINE(  21)		this->painting =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,730,110,null());
HXLINE(  20)		this->inGame = false;
HXLINE(  19)		this->curPlace = HX_("idle",14,a7,b3,45);
HXLINE(  15)		this->bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(  13)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x0a05f89d) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_46_create)
HXLINE(  47)		::PlayState_obj::money = 0;
HXLINE(  48)		::PlayState_obj::energy = ( (Float)(70) );
HXLINE(  49)		::PlayState_obj::soups = 3;
HXLINE(  50)		::PlayState_obj::doingSum = false;
HXLINE(  51)		::PlayState_obj::doingPc = false;
HXLINE(  52)		::PlayState_obj::startGam = false;
HXLINE(  53)		::PlayState_obj::timer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXLINE(  54)		this->curPaint = 0;
HXLINE(  55)		this->dialogue =  ::Dialogue_obj::__alloc( HX_CTX ,HX_("regular",5c,52,88,82),true,::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_2,7),HX_("start",62,74,0b,84));
HXLINE(  64)		this->saddialogue =  ::Dialogue_obj::__alloc( HX_CTX ,HX_("sad",16,98,57,00),false,::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_3,3),HX_("lose",d5,a9,b7,47));
HXLINE(  65)		this->happydialogue =  ::Dialogue_obj::__alloc( HX_CTX ,HX_("happy",20,65,1f,22),true,::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_4,5),HX_("win",1c,a8,5a,00));
HXLINE(  72)		this->bg->loadGraphic(HX_("assets/images/inGame/background.png",76,36,4c,c8),null(),null(),null(),null(),null());
HXLINE(  73)		this->add(this->bg);
HXLINE(  74)		::flixel::FlxG_obj::camera->fade(-16777216,1,true,null(),null());
HXLINE(  75)		this->add(this->dialogue);
HXLINE(  76)		this->dialogue->doText();
HXLINE(  77)		this->super::create();
            	}


void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_81_update)
HXLINE(  80)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  82)		if ((::PlayState_obj::startGam == true)) {
HXLINE(  84)			::PlayState_obj::startGam = false;
HXLINE(  85)			::haxe::Log_obj::trace(HX_("start thing",b0,fd,46,1e),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),85,HX_("PlayState",5d,83,c2,46),HX_("update",09,86,05,87)));
HXLINE(  86)			this->startGame();
            		}
HXLINE(  88)		bool _hx_tmp;
HXDLIN(  88)		if (this->inGame) {
HXLINE(  88)			_hx_tmp = (this->gameEnd == false);
            		}
            		else {
HXLINE(  88)			_hx_tmp = false;
            		}
HXDLIN(  88)		if (_hx_tmp) {
HXLINE(  90)			 ::flixel::text::FlxText _hx_tmp = this->moneyTotal;
HXDLIN(  90)			_hx_tmp->set_text(::Std_obj::string(::Std_obj::_hx_int(( (Float)(::PlayState_obj::money) ))));
HXLINE(  91)			 ::flixel::text::FlxText _hx_tmp1 = this->energyTotal;
HXDLIN(  91)			_hx_tmp1->set_text(::Std_obj::string(::Std_obj::_hx_int(::PlayState_obj::energy)));
HXLINE(  92)			 ::flixel::text::FlxText _hx_tmp2 = this->timerTxt;
HXDLIN(  92)			 ::flixel::util::FlxTimer _this = ::PlayState_obj::timer;
HXDLIN(  92)			_hx_tmp2->set_text(::Std_obj::string(::Std_obj::_hx_int((_this->time - _this->_timeCounter))));
HXLINE(  93)			 ::flixel::animation::FlxAnimationController _hx_tmp3 = this->painting->animation;
HXDLIN(  93)			_hx_tmp3->play(::Std_obj::string(this->curPaint),true,null(),null());
HXLINE(  94)			 ::Dynamic _hx_tmp4 = ::hx::ClassOf< ::PlayState >();
HXDLIN(  94)			::PlayState_obj::energy = (::PlayState_obj::energy - ((Float)0.03));
HXLINE(  95)			this->barLoop();
HXLINE(  96)			bool _hx_tmp5;
HXDLIN(  96)			if (!(::PlayState_obj::timer->finished)) {
HXLINE(  96)				_hx_tmp5 = (::PlayState_obj::energy < ((Float)0.5));
            			}
            			else {
HXLINE(  96)				_hx_tmp5 = true;
            			}
HXDLIN(  96)			if (_hx_tmp5) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer shit){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_101_update)
HXLINE( 102)					_gthis->add(_gthis->saddialogue).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 103)					_gthis->saddialogue->doText();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(  98)				this->gameEnd = true;
HXLINE(  99)				::flixel::FlxG_obj::sound->pause();
HXLINE( 100)				 ::Dynamic lolol =  ::Dynamic(new _hx_Closure_0(_gthis));
HXDLIN( 100)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2,lolol,1);
            			}
HXLINE( 106)			if ((this->curPaint == 4)) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer shit){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_111_update)
HXLINE( 112)					_gthis->add(_gthis->happydialogue).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 113)					_gthis->happydialogue->doText();
HXLINE( 114)					::PlayState_obj::player->doThing(HX_("idle",14,a7,b3,45));
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 108)				this->gameEnd = true;
HXLINE( 109)				::flixel::FlxG_obj::sound->pause();
HXLINE( 110)				 ::Dynamic lolol =  ::Dynamic(new _hx_Closure_1(_gthis));
HXDLIN( 110)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2,lolol,1);
            			}
            		}
HXLINE( 118)		if ((this->gameEnd == true)) {
HXLINE( 120)			::PlayState_obj::timer->cancel();
            		}
HXLINE( 122)		this->super::update(elapsed);
            	}


void PlayState_obj::startGame(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer shit){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_155_startGame)
HXLINE( 155)			 ::Dynamic addCash = ::hx::ClassOf< ::PlayState >();
HXDLIN( 155)			::PlayState_obj::money = (::PlayState_obj::money + 1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_126_startGame)
HXLINE( 127)		::PlayState_obj::player =  ::Player_obj::__alloc( HX_CTX ,450,400);
HXLINE( 128)		this->barShit();
HXLINE( 129)		::PlayState_obj::timer->start(30,null(),1);
HXLINE( 130)		 ::flixel::FlxSprite go =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE( 131)		go->loadGraphic(HX_("assets/images/inGame/go.png",b0,0c,72,ea),null(),null(),null(),null(),null());
HXLINE( 132)		go->screenCenter(null());
HXLINE( 135)		 ::flixel::FlxSprite hitboxes_0 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 135)		 ::flixel::FlxSprite hitboxes_1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE( 136)		hitboxes_0->loadGraphic(HX_("assets/images/inGame/hitboxes/pcHitbox.png",e2,0a,20,6d),null(),null(),null(),null(),null());
HXLINE( 137)		hitboxes_1->loadGraphic(HX_("assets/images/inGame/hitboxes/paintHitbox.png",55,71,3f,c4),null(),null(),null(),null(),null());
HXLINE( 138)		hitboxes_0->setPosition(166,61);
HXLINE( 139)		hitboxes_1->setPosition(650,95);
HXLINE( 140)		{
HXLINE( 141)			{
HXLINE( 142)				hitboxes_0->set_alpha(( (Float)(0) ));
HXLINE( 143)				this->add(hitboxes_0);
            			}
HXLINE( 141)			{
HXLINE( 142)				hitboxes_1->set_alpha(( (Float)(0) ));
HXLINE( 143)				this->add(hitboxes_1);
            			}
            		}
HXLINE( 145)		::flixel::input::mouse::FlxMouseEventManager_obj::add(hitboxes_0,this->buySoup_dyn(),null(),null(),null(),false,true,false,::Array_obj< int >::fromData( _hx_array_data_46c2835d_10,1));
HXLINE( 146)		::flixel::input::mouse::FlxMouseEventManager_obj::add(hitboxes_1,this->paintShit_dyn(),null(),null(),null(),false,true,false,::Array_obj< int >::fromData( _hx_array_data_46c2835d_11,1));
HXLINE( 147)		::flixel::FlxG_obj::sound->pause();
HXLINE( 148)		this->add(go);
HXLINE( 149)		this->add(::PlayState_obj::player);
HXLINE( 150)		::PlayState_obj::player->doThing(HX_("idle",14,a7,b3,45));
HXLINE( 151)		this->counterShit();
HXLINE( 152)		this->paintingSetup();
HXLINE( 153)		 ::Dynamic addCash =  ::Dynamic(new _hx_Closure_0());
HXDLIN( 153)		this->moneyTimer->start(1,addCash,0);
HXLINE( 157)		::flixel::FlxG_obj::sound->play((HX_("assets/sounds/go",07,5a,86,c7) + ::Main_obj::soundExt),1,false,null(),null(),null());
HXLINE( 158)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,sprite) HXARGC(1)
            			void _hx_run(Float f){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_158_startGame)
HXLINE( 158)				::flixel::util::FlxSpriteUtil_obj::alphaTween(sprite,f);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 158)			 ::Dynamic OnComplete = null();
HXDLIN( 158)			 ::flixel::FlxSprite sprite = go;
HXDLIN( 158)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_1(sprite));
HXDLIN( 158)			::flixel::tweens::FlxTween_obj::num(go->alpha,( (Float)(0) ),1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("onComplete",f8,d4,7e,5d),OnComplete)),_hx_tmp);
            		}
HXLINE( 159)		this->inGame = true;
HXLINE( 160)		::flixel::FlxG_obj::sound->playMusic((HX_("assets/music/ingame",0d,9e,17,7c) + ::Main_obj::soundExt),1,true,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startGame,(void))

void PlayState_obj::buySoup( ::flixel::FlxSprite spriteShit){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_165_buySoup)
HXDLIN( 165)		if ((this->gameEnd == false)) {
HXLINE( 167)			::haxe::Log_obj::trace(::PlayState_obj::energy,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),167,HX_("PlayState",5d,83,c2,46),HX_("buySoup",5d,34,a6,95)));
HXLINE( 168)			bool _hx_tmp;
HXDLIN( 168)			bool _hx_tmp1;
HXDLIN( 168)			bool _hx_tmp2;
HXDLIN( 168)			if ((::PlayState_obj::soups < 3)) {
HXLINE( 168)				_hx_tmp2 = (::PlayState_obj::money < 3);
            			}
            			else {
HXLINE( 168)				_hx_tmp2 = true;
            			}
HXDLIN( 168)			if (!(_hx_tmp2)) {
HXLINE( 168)				_hx_tmp1 = (::PlayState_obj::energy < 10);
            			}
            			else {
HXLINE( 168)				_hx_tmp1 = true;
            			}
HXDLIN( 168)			if (!(_hx_tmp1)) {
HXLINE( 168)				_hx_tmp = (::PlayState_obj::doingPc == true);
            			}
            			else {
HXLINE( 168)				_hx_tmp = true;
            			}
HXDLIN( 168)			if (_hx_tmp) {
HXLINE( 170)				::flixel::FlxG_obj::sound->play((HX_("assets/sounds/nope",15,0a,f7,7d) + ::Main_obj::soundExt),null(),null(),null(),null(),null());
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer shit){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_179_buySoup)
HXLINE( 180)					::haxe::Log_obj::trace(::PlayState_obj::soups,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),180,HX_("PlayState",5d,83,c2,46),HX_("buySoup",5d,34,a6,95)));
HXLINE( 181)					 ::Dynamic addSoup = ::hx::ClassOf< ::PlayState >();
HXDLIN( 181)					::PlayState_obj::soups = (::PlayState_obj::soups + 1);
HXLINE( 182)					::PlayState_obj::doingPc = false;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 174)				::PlayState_obj::player->doThing(HX_("pc",f3,61,00,00));
HXLINE( 175)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayState >();
HXDLIN( 175)				::PlayState_obj::money = (::PlayState_obj::money - 3);
HXLINE( 176)				 ::Dynamic _hx_tmp1 = ::hx::ClassOf< ::PlayState >();
HXDLIN( 176)				::PlayState_obj::energy = (::PlayState_obj::energy - ( (Float)(15) ));
HXLINE( 177)				::PlayState_obj::doingPc = true;
HXLINE( 178)				 ::Dynamic addSoup =  ::Dynamic(new _hx_Closure_0());
HXDLIN( 178)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(5,addSoup,1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,buySoup,(void))

void PlayState_obj::paintShit( ::flixel::FlxSprite spriteShit){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_190_paintShit)
HXDLIN( 190)		if ((this->gameEnd == false)) {
HXLINE( 192)			::haxe::Log_obj::trace(::PlayState_obj::energy,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),192,HX_("PlayState",5d,83,c2,46),HX_("paintShit",7e,da,f1,00)));
HXLINE( 193)			if ((::PlayState_obj::energy < 70)) {
HXLINE( 195)				::flixel::FlxG_obj::sound->play((HX_("assets/sounds/nope",15,0a,f7,7d) + ::Main_obj::soundExt),null(),null(),null(),null(),null());
            			}
            			else {
HXLINE( 199)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayState >();
HXDLIN( 199)				::PlayState_obj::energy = (::PlayState_obj::energy - ( (Float)(50) ));
HXLINE( 200)				::PlayState_obj::player->doThing(HX_("paint",9e,b7,4e,bd));
HXLINE( 201)				 ::PlayState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 201)				_hx_tmp1->curPaint = (_hx_tmp1->curPaint + 1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,paintShit,(void))

void PlayState_obj::ending(::String end){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_207_ending)
HXLINE( 208)		::PlayState_obj::losewin = end;
HXLINE( 209)		{
HXLINE( 209)			 ::flixel::FlxState nextState =  ::LoseState_obj::__alloc( HX_CTX ,null());
HXDLIN( 209)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 209)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,ending,(void))

void PlayState_obj::counterShit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_213_counterShit)
HXLINE( 214)		this->timerTxt->setFormat(HX_("assets/fonts/vcr.ttf",46,38,26,7e),128,-65536,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 215)		this->timerTxt->screenCenter(null());
HXLINE( 217)		this->timerTxt->set_y(( (Float)(560) ));
HXLINE( 218)		this->timerTxt->set_x(( (Float)(555) ));
HXLINE( 219)		this->timericon->loadGraphic(HX_("assets/images/inGame/timer.png",53,70,e4,68),null(),null(),null(),null(),null());
HXLINE( 220)		this->timericon->screenCenter(null());
HXLINE( 221)		this->timericon->set_y(this->energyTotal->y);
HXLINE( 222)		this->moneyTotal->setPosition(1050,this->energyTotal->y);
HXLINE( 223)		this->moneyicon->loadGraphic(HX_("assets/images/inGame/dollar.png",84,63,72,65),null(),null(),null(),null(),null());
HXLINE( 224)		 ::flixel::FlxSprite _hx_tmp = this->moneyicon;
HXDLIN( 224)		Float _hx_tmp1 = this->moneyTotal->x;
HXDLIN( 224)		Float _hx_tmp2 = ((_hx_tmp1 + this->moneyicon->get_width()) + 10);
HXDLIN( 224)		_hx_tmp->setPosition(_hx_tmp2,(this->moneyTotal->y - ( (Float)(20) )));
HXLINE( 225)		 ::flixel::FlxSprite _hx_tmp3 = this->moneyicon;
HXDLIN( 225)		int _hx_tmp4 = ::Std_obj::_hx_int((this->moneyicon->get_width() / ( (Float)(2) )));
HXDLIN( 225)		_hx_tmp3->setGraphicSize(_hx_tmp4,::Std_obj::_hx_int((this->moneyicon->get_height() / ( (Float)(2) ))));
HXLINE( 226)		 ::flixel::text::FlxText _hx_tmp5 = this->moneyTotal;
HXDLIN( 226)		int Alpha = 255;
HXDLIN( 226)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 226)		{
HXLINE( 226)			color = (color & -16711681);
HXDLIN( 226)			color = (color | 16187392);
            		}
HXDLIN( 226)		{
HXLINE( 226)			color = (color & -65281);
HXDLIN( 226)			color = (color | 57856);
            		}
HXDLIN( 226)		{
HXLINE( 226)			color = (color & -256);
HXDLIN( 226)			color = (color | 156);
            		}
HXDLIN( 226)		{
HXLINE( 226)			color = (color & 16777215);
HXDLIN( 226)			int color1;
HXDLIN( 226)			if ((Alpha > 255)) {
HXLINE( 226)				color1 = 255;
            			}
            			else {
HXLINE( 226)				if ((Alpha < 0)) {
HXLINE( 226)					color1 = 0;
            				}
            				else {
HXLINE( 226)					color1 = Alpha;
            				}
            			}
HXDLIN( 226)			color = (color | (color1 << 24));
            		}
HXDLIN( 226)		_hx_tmp5->setFormat(HX_("assets/fonts/vcr.ttf",46,38,26,7e),64,color,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 227)		{
HXLINE( 227)			 ::flixel::text::FlxText _g = this->moneyTotal;
HXDLIN( 227)			_g->set_y((_g->y + 50));
            		}
HXLINE( 228)		{
HXLINE( 228)			 ::flixel::text::FlxText _g1 = this->moneyTotal;
HXDLIN( 228)			_g1->set_x((_g1->x + 20));
            		}
HXLINE( 229)		this->energyicon->loadGraphic(HX_("assets/images/inGame/energy.png",d0,55,dd,29),null(),null(),null(),null(),null());
HXLINE( 230)		 ::flixel::FlxSprite _hx_tmp6 = this->energyicon;
HXDLIN( 230)		Float _hx_tmp7 = this->energyTotal->x;
HXDLIN( 230)		Float _hx_tmp8 = ((_hx_tmp7 - this->energyicon->get_width()) + 10);
HXDLIN( 230)		_hx_tmp6->setPosition(_hx_tmp8,this->energyTotal->y);
HXLINE( 231)		 ::flixel::FlxSprite _hx_tmp9 = this->energyicon;
HXDLIN( 231)		int _hx_tmp10 = ::Std_obj::_hx_int((this->energyicon->get_width() / ( (Float)(2) )));
HXDLIN( 231)		_hx_tmp9->setGraphicSize(_hx_tmp10,::Std_obj::_hx_int((this->energyicon->get_height() / ( (Float)(2) ))));
HXLINE( 232)		 ::flixel::text::FlxText _hx_tmp11 = this->energyTotal;
HXDLIN( 232)		int Alpha1 = 255;
HXDLIN( 232)		int color2 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 232)		{
HXLINE( 232)			color2 = (color2 & -16711681);
HXDLIN( 232)			color2 = (color2 | 16187392);
            		}
HXDLIN( 232)		{
HXLINE( 232)			color2 = (color2 & -65281);
HXDLIN( 232)			color2 = (color2 | 57856);
            		}
HXDLIN( 232)		{
HXLINE( 232)			color2 = (color2 & -256);
HXDLIN( 232)			color2 = (color2 | 156);
            		}
HXDLIN( 232)		{
HXLINE( 232)			color2 = (color2 & 16777215);
HXDLIN( 232)			int color3;
HXDLIN( 232)			if ((Alpha1 > 255)) {
HXLINE( 232)				color3 = 255;
            			}
            			else {
HXLINE( 232)				if ((Alpha1 < 0)) {
HXLINE( 232)					color3 = 0;
            				}
            				else {
HXLINE( 232)					color3 = Alpha1;
            				}
            			}
HXDLIN( 232)			color2 = (color2 | (color3 << 24));
            		}
HXDLIN( 232)		_hx_tmp11->setFormat(HX_("assets/fonts/vcr.ttf",46,38,26,7e),64,color2,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 233)		this->energyTotal->set_y(this->moneyTotal->y);
HXLINE( 234)		this->add(this->timericon);
HXLINE( 235)		this->add(this->timerTxt);
HXLINE( 236)		this->add(this->moneyTotal);
HXLINE( 237)		this->add(this->energyTotal);
HXLINE( 238)		this->add(this->moneyicon);
HXLINE( 239)		this->add(this->energyicon);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,counterShit,(void))

void PlayState_obj::drinkSoup( ::flixel::FlxSprite lol){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_244_drinkSoup)
HXDLIN( 244)		if ((::PlayState_obj::soups <= 0)) {
HXLINE( 246)			::flixel::FlxG_obj::sound->play((HX_("assets/sounds/nope",15,0a,f7,7d) + ::Main_obj::soundExt),null(),null(),null(),null(),null());
            		}
            		else {
HXLINE( 250)			 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayState >();
HXDLIN( 250)			::PlayState_obj::soups = (::PlayState_obj::soups - 1);
HXLINE( 251)			 ::Dynamic _hx_tmp1 = ::hx::ClassOf< ::PlayState >();
HXDLIN( 251)			::PlayState_obj::energy = (::PlayState_obj::energy + 40);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,drinkSoup,(void))

void PlayState_obj::barShit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_256_barShit)
HXLINE( 257)		this->bar->loadGraphic(HX_("assets/images/inGame/barshit.png",61,f1,2c,07),true,307,118,null(),null());
HXLINE( 258)		{
HXLINE( 259)			this->bar->animation->add(HX_("0",30,00,00,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_20,1),null(),null(),null(),null());
HXDLIN( 259)			this->bar->animation->add(HX_("1",31,00,00,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_21,1),null(),null(),null(),null());
HXDLIN( 259)			this->bar->animation->add(HX_("2",32,00,00,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_22,1),null(),null(),null(),null());
HXDLIN( 259)			this->bar->animation->add(HX_("3",33,00,00,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_23,1),null(),null(),null(),null());
            		}
HXLINE( 260)		this->soupBtn->loadGraphic(HX_("assets/images/inGame/soupbtn.png",13,38,46,df),null(),null(),null(),null(),null());
HXLINE( 261)		::flixel::input::mouse::FlxMouseEventManager_obj::add(this->soupBtn,this->drinkSoup_dyn(),null(),null(),null(),false,true,false,::Array_obj< int >::fromData( _hx_array_data_46c2835d_24,1));
HXLINE( 262)		this->add(this->soupBtn);
HXLINE( 263)		this->add(this->bar);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,barShit,(void))

void PlayState_obj::barLoop(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_268_barLoop)
HXDLIN( 268)		 ::flixel::animation::FlxAnimationController _hx_tmp = this->bar->animation;
HXDLIN( 268)		_hx_tmp->play(::Std_obj::string(::PlayState_obj::soups),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,barLoop,(void))

void PlayState_obj::paintingSetup(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_272_paintingSetup)
HXLINE( 273)		this->painting->loadGraphic(HX_("assets/images/inGame/painting.png",4c,b4,ba,e5),true,68,93,null(),null());
HXLINE( 274)		{
HXLINE( 275)			this->painting->animation->add(HX_("0",30,00,00,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_27,1),null(),null(),null(),null());
HXDLIN( 275)			this->painting->animation->add(HX_("1",31,00,00,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_28,1),null(),null(),null(),null());
HXDLIN( 275)			this->painting->animation->add(HX_("2",32,00,00,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_29,1),null(),null(),null(),null());
HXDLIN( 275)			this->painting->animation->add(HX_("3",33,00,00,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_30,1),null(),null(),null(),null());
HXDLIN( 275)			this->painting->animation->add(HX_("4",34,00,00,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_31,1),null(),null(),null(),null());
            		}
HXLINE( 276)		this->painting->animation->play(HX_("0",30,00,00,00),true,null(),null());
HXLINE( 277)		this->add(this->painting);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,paintingSetup,(void))

 ::Player PlayState_obj::player;

bool PlayState_obj::startGam;

 ::flixel::util::FlxTimer PlayState_obj::timer;

int PlayState_obj::money;

Float PlayState_obj::energy;

int PlayState_obj::soups;

::String PlayState_obj::losewin;

bool PlayState_obj::doingSum;

bool PlayState_obj::doingPc;


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(dialogue,"dialogue");
	HX_MARK_MEMBER_NAME(saddialogue,"saddialogue");
	HX_MARK_MEMBER_NAME(happydialogue,"happydialogue");
	HX_MARK_MEMBER_NAME(curPlace,"curPlace");
	HX_MARK_MEMBER_NAME(inGame,"inGame");
	HX_MARK_MEMBER_NAME(painting,"painting");
	HX_MARK_MEMBER_NAME(gameEnd,"gameEnd");
	HX_MARK_MEMBER_NAME(bar,"bar");
	HX_MARK_MEMBER_NAME(soupBtn,"soupBtn");
	HX_MARK_MEMBER_NAME(curPaint,"curPaint");
	HX_MARK_MEMBER_NAME(moneyTimer,"moneyTimer");
	HX_MARK_MEMBER_NAME(timerTxt,"timerTxt");
	HX_MARK_MEMBER_NAME(timericon,"timericon");
	HX_MARK_MEMBER_NAME(moneyTotal,"moneyTotal");
	HX_MARK_MEMBER_NAME(moneyicon,"moneyicon");
	HX_MARK_MEMBER_NAME(energyTotal,"energyTotal");
	HX_MARK_MEMBER_NAME(energyicon,"energyicon");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(dialogue,"dialogue");
	HX_VISIT_MEMBER_NAME(saddialogue,"saddialogue");
	HX_VISIT_MEMBER_NAME(happydialogue,"happydialogue");
	HX_VISIT_MEMBER_NAME(curPlace,"curPlace");
	HX_VISIT_MEMBER_NAME(inGame,"inGame");
	HX_VISIT_MEMBER_NAME(painting,"painting");
	HX_VISIT_MEMBER_NAME(gameEnd,"gameEnd");
	HX_VISIT_MEMBER_NAME(bar,"bar");
	HX_VISIT_MEMBER_NAME(soupBtn,"soupBtn");
	HX_VISIT_MEMBER_NAME(curPaint,"curPaint");
	HX_VISIT_MEMBER_NAME(moneyTimer,"moneyTimer");
	HX_VISIT_MEMBER_NAME(timerTxt,"timerTxt");
	HX_VISIT_MEMBER_NAME(timericon,"timericon");
	HX_VISIT_MEMBER_NAME(moneyTotal,"moneyTotal");
	HX_VISIT_MEMBER_NAME(moneyicon,"moneyicon");
	HX_VISIT_MEMBER_NAME(energyTotal,"energyTotal");
	HX_VISIT_MEMBER_NAME(energyicon,"energyicon");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bar") ) { return ::hx::Val( bar ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"inGame") ) { return ::hx::Val( inGame ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"ending") ) { return ::hx::Val( ending_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gameEnd") ) { return ::hx::Val( gameEnd ); }
		if (HX_FIELD_EQ(inName,"soupBtn") ) { return ::hx::Val( soupBtn ); }
		if (HX_FIELD_EQ(inName,"buySoup") ) { return ::hx::Val( buySoup_dyn() ); }
		if (HX_FIELD_EQ(inName,"barShit") ) { return ::hx::Val( barShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"barLoop") ) { return ::hx::Val( barLoop_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dialogue") ) { return ::hx::Val( dialogue ); }
		if (HX_FIELD_EQ(inName,"curPlace") ) { return ::hx::Val( curPlace ); }
		if (HX_FIELD_EQ(inName,"painting") ) { return ::hx::Val( painting ); }
		if (HX_FIELD_EQ(inName,"curPaint") ) { return ::hx::Val( curPaint ); }
		if (HX_FIELD_EQ(inName,"timerTxt") ) { return ::hx::Val( timerTxt ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timericon") ) { return ::hx::Val( timericon ); }
		if (HX_FIELD_EQ(inName,"moneyicon") ) { return ::hx::Val( moneyicon ); }
		if (HX_FIELD_EQ(inName,"startGame") ) { return ::hx::Val( startGame_dyn() ); }
		if (HX_FIELD_EQ(inName,"paintShit") ) { return ::hx::Val( paintShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"drinkSoup") ) { return ::hx::Val( drinkSoup_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"moneyTimer") ) { return ::hx::Val( moneyTimer ); }
		if (HX_FIELD_EQ(inName,"moneyTotal") ) { return ::hx::Val( moneyTotal ); }
		if (HX_FIELD_EQ(inName,"energyicon") ) { return ::hx::Val( energyicon ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"saddialogue") ) { return ::hx::Val( saddialogue ); }
		if (HX_FIELD_EQ(inName,"energyTotal") ) { return ::hx::Val( energyTotal ); }
		if (HX_FIELD_EQ(inName,"counterShit") ) { return ::hx::Val( counterShit_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"happydialogue") ) { return ::hx::Val( happydialogue ); }
		if (HX_FIELD_EQ(inName,"paintingSetup") ) { return ::hx::Val( paintingSetup_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { outValue = ( timer ); return true; }
		if (HX_FIELD_EQ(inName,"money") ) { outValue = ( money ); return true; }
		if (HX_FIELD_EQ(inName,"soups") ) { outValue = ( soups ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { outValue = ( player ); return true; }
		if (HX_FIELD_EQ(inName,"energy") ) { outValue = ( energy ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"losewin") ) { outValue = ( losewin ); return true; }
		if (HX_FIELD_EQ(inName,"doingPc") ) { outValue = ( doingPc ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"startGam") ) { outValue = ( startGam ); return true; }
		if (HX_FIELD_EQ(inName,"doingSum") ) { outValue = ( doingSum ); return true; }
	}
	return false;
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bar") ) { bar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"inGame") ) { inGame=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gameEnd") ) { gameEnd=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"soupBtn") ) { soupBtn=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dialogue") ) { dialogue=inValue.Cast<  ::Dialogue >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curPlace") ) { curPlace=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"painting") ) { painting=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curPaint") ) { curPaint=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timerTxt") ) { timerTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timericon") ) { timericon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"moneyicon") ) { moneyicon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"moneyTimer") ) { moneyTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"moneyTotal") ) { moneyTotal=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"energyicon") ) { energyicon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"saddialogue") ) { saddialogue=inValue.Cast<  ::Dialogue >(); return inValue; }
		if (HX_FIELD_EQ(inName,"energyTotal") ) { energyTotal=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"happydialogue") ) { happydialogue=inValue.Cast<  ::Dialogue >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { timer=ioValue.Cast<  ::flixel::util::FlxTimer >(); return true; }
		if (HX_FIELD_EQ(inName,"money") ) { money=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"soups") ) { soups=ioValue.Cast< int >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=ioValue.Cast<  ::Player >(); return true; }
		if (HX_FIELD_EQ(inName,"energy") ) { energy=ioValue.Cast< Float >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"losewin") ) { losewin=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"doingPc") ) { doingPc=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"startGam") ) { startGam=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"doingSum") ) { doingSum=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("dialogue",18,2d,94,a7));
	outFields->push(HX_("saddialogue",2e,cb,02,ce));
	outFields->push(HX_("happydialogue",38,b2,4d,1d));
	outFields->push(HX_("curPlace",27,ef,3b,0c));
	outFields->push(HX_("inGame",77,d2,c4,80));
	outFields->push(HX_("painting",04,6c,3d,66));
	outFields->push(HX_("gameEnd",09,4b,65,89));
	outFields->push(HX_("bar",d3,b1,4a,00));
	outFields->push(HX_("soupBtn",a5,a4,dd,b7));
	outFields->push(HX_("curPaint",fe,b1,fc,04));
	outFields->push(HX_("moneyTimer",65,4d,98,56));
	outFields->push(HX_("timerTxt",ab,cf,22,01));
	outFields->push(HX_("timericon",be,6d,24,0b));
	outFields->push(HX_("moneyTotal",64,e1,94,5a));
	outFields->push(HX_("moneyicon",b9,c1,1c,cf));
	outFields->push(HX_("energyTotal",dc,45,26,ed));
	outFields->push(HX_("energyicon",41,94,83,b6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::Dialogue */ ,(int)offsetof(PlayState_obj,dialogue),HX_("dialogue",18,2d,94,a7)},
	{::hx::fsObject /*  ::Dialogue */ ,(int)offsetof(PlayState_obj,saddialogue),HX_("saddialogue",2e,cb,02,ce)},
	{::hx::fsObject /*  ::Dialogue */ ,(int)offsetof(PlayState_obj,happydialogue),HX_("happydialogue",38,b2,4d,1d)},
	{::hx::fsString,(int)offsetof(PlayState_obj,curPlace),HX_("curPlace",27,ef,3b,0c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,inGame),HX_("inGame",77,d2,c4,80)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,painting),HX_("painting",04,6c,3d,66)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,gameEnd),HX_("gameEnd",09,4b,65,89)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,bar),HX_("bar",d3,b1,4a,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,soupBtn),HX_("soupBtn",a5,a4,dd,b7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curPaint),HX_("curPaint",fe,b1,fc,04)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,moneyTimer),HX_("moneyTimer",65,4d,98,56)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,timerTxt),HX_("timerTxt",ab,cf,22,01)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,timericon),HX_("timericon",be,6d,24,0b)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,moneyTotal),HX_("moneyTotal",64,e1,94,5a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,moneyicon),HX_("moneyicon",b9,c1,1c,cf)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,energyTotal),HX_("energyTotal",dc,45,26,ed)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,energyicon),HX_("energyicon",41,94,83,b6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Player */ ,(void *) &PlayState_obj::player,HX_("player",61,eb,b8,37)},
	{::hx::fsBool,(void *) &PlayState_obj::startGam,HX_("startGam",d1,29,92,42)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(void *) &PlayState_obj::timer,HX_("timer",c5,bf,35,10)},
	{::hx::fsInt,(void *) &PlayState_obj::money,HX_("money",40,ba,5f,0c)},
	{::hx::fsFloat,(void *) &PlayState_obj::energy,HX_("energy",c8,a8,38,fb)},
	{::hx::fsInt,(void *) &PlayState_obj::soups,HX_("soups",9c,8e,cc,80)},
	{::hx::fsString,(void *) &PlayState_obj::losewin,HX_("losewin",67,11,dd,66)},
	{::hx::fsBool,(void *) &PlayState_obj::doingSum,HX_("doingSum",94,1f,64,f5)},
	{::hx::fsBool,(void *) &PlayState_obj::doingPc,HX_("doingPc",0a,40,16,5e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("bg",c5,55,00,00),
	HX_("dialogue",18,2d,94,a7),
	HX_("saddialogue",2e,cb,02,ce),
	HX_("happydialogue",38,b2,4d,1d),
	HX_("curPlace",27,ef,3b,0c),
	HX_("inGame",77,d2,c4,80),
	HX_("painting",04,6c,3d,66),
	HX_("gameEnd",09,4b,65,89),
	HX_("bar",d3,b1,4a,00),
	HX_("soupBtn",a5,a4,dd,b7),
	HX_("curPaint",fe,b1,fc,04),
	HX_("moneyTimer",65,4d,98,56),
	HX_("timerTxt",ab,cf,22,01),
	HX_("timericon",be,6d,24,0b),
	HX_("moneyTotal",64,e1,94,5a),
	HX_("moneyicon",b9,c1,1c,cf),
	HX_("energyTotal",dc,45,26,ed),
	HX_("energyicon",41,94,83,b6),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("startGame",74,6d,52,fd),
	HX_("buySoup",5d,34,a6,95),
	HX_("paintShit",7e,da,f1,00),
	HX_("ending",e7,a3,88,fa),
	HX_("counterShit",dc,d8,ee,46),
	HX_("drinkSoup",2f,a4,64,bb),
	HX_("barShit",33,93,af,8e),
	HX_("barLoop",d7,69,14,8a),
	HX_("paintingSetup",d9,a3,65,0e),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::player,"player");
	HX_MARK_MEMBER_NAME(PlayState_obj::startGam,"startGam");
	HX_MARK_MEMBER_NAME(PlayState_obj::timer,"timer");
	HX_MARK_MEMBER_NAME(PlayState_obj::money,"money");
	HX_MARK_MEMBER_NAME(PlayState_obj::energy,"energy");
	HX_MARK_MEMBER_NAME(PlayState_obj::soups,"soups");
	HX_MARK_MEMBER_NAME(PlayState_obj::losewin,"losewin");
	HX_MARK_MEMBER_NAME(PlayState_obj::doingSum,"doingSum");
	HX_MARK_MEMBER_NAME(PlayState_obj::doingPc,"doingPc");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::player,"player");
	HX_VISIT_MEMBER_NAME(PlayState_obj::startGam,"startGam");
	HX_VISIT_MEMBER_NAME(PlayState_obj::timer,"timer");
	HX_VISIT_MEMBER_NAME(PlayState_obj::money,"money");
	HX_VISIT_MEMBER_NAME(PlayState_obj::energy,"energy");
	HX_VISIT_MEMBER_NAME(PlayState_obj::soups,"soups");
	HX_VISIT_MEMBER_NAME(PlayState_obj::losewin,"losewin");
	HX_VISIT_MEMBER_NAME(PlayState_obj::doingSum,"doingSum");
	HX_VISIT_MEMBER_NAME(PlayState_obj::doingPc,"doingPc");
};

#endif

::hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_("player",61,eb,b8,37),
	HX_("startGam",d1,29,92,42),
	HX_("timer",c5,bf,35,10),
	HX_("money",40,ba,5f,0c),
	HX_("energy",c8,a8,38,fb),
	HX_("soups",9c,8e,cc,80),
	HX_("losewin",67,11,dd,66),
	HX_("doingSum",94,1f,64,f5),
	HX_("doingPc",0a,40,16,5e),
	::String(null())
};

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_36_boot)
HXDLIN(  36)		startGam = false;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_37_boot)
HXDLIN(  37)		timer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_38_boot)
HXDLIN(  38)		money = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_39_boot)
HXDLIN(  39)		energy = ((Float)100);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_40_boot)
HXDLIN(  40)		soups = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_41_boot)
HXDLIN(  41)		losewin = HX_("lose",d5,a9,b7,47);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_42_boot)
HXDLIN(  42)		doingSum = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_43_boot)
HXDLIN(  43)		doingPc = false;
            	}
}

