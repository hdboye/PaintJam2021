// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_11_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",11,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_22_update,"Player","update",0xf1f8df56,"Player.update","Player.hx",22,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_26_doThing,"Player","doThing",0x6cb13276,"Player.doThing","Player.hx",26,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_41_doThing,"Player","doThing",0x6cb13276,"Player.doThing","Player.hx",41,0xa27fc9dd)

void Player_obj::__construct(int x,int y){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_11_new)
HXLINE(  12)		super::__construct(x,y,null());
HXLINE(  13)		this->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(HX_("assets/images/inGame/campyShit.png",46,8b,f0,40),HX_("assets/images/inGame/campyShit.xml",74,9c,f6,40)));
HXLINE(  14)		this->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("campyIdle",0c,d7,1d,98),24,true,null(),null());
HXLINE(  15)		this->animation->addByPrefix(HX_("pc",f3,61,00,00),HX_("campyPC",cb,23,7c,ea),24,true,null(),null());
HXLINE(  16)		this->animation->addByPrefix(HX_("paint",9e,b7,4e,bd),HX_("campyPaint",a6,80,ce,87),24,true,null(),null());
HXLINE(  17)		this->animation->addByPrefix(HX_("sleep",17,bd,c4,7e),HX_("campySleep",1f,86,44,49),24,false,null(),null());
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x33e526a5) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x33e526a5;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Player_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_22_update)
HXDLIN(  22)		this->super::update(elapsed);
            	}


void Player_obj::doThing(::String thing){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_26_doThing)
HXLINE(  25)		 ::Player _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  27)		if ((thing == HX_("pc",f3,61,00,00))) {
HXLINE(  28)			this->setPosition(200,250);
            		}
            		else {
HXLINE(  29)			if ((thing == HX_("paint",9e,b7,4e,bd))) {
HXLINE(  30)				this->setPosition(520,200);
            			}
            			else {
HXLINE(  32)				this->setPosition(450,400);
            			}
            		}
HXLINE(  33)		if ((thing != HX_("sleep",17,bd,c4,7e))) {
HXLINE(  35)			::PlayState_obj::doingSum = true;
            		}
HXLINE(  37)		this->animation->play(thing,true,null(),null());
HXLINE(  38)		if ((thing != HX_("sleep",17,bd,c4,7e))) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Player,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer ugh){
            				HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_41_doThing)
HXLINE(  42)				_gthis->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(  43)				_gthis->setPosition(450,400);
HXLINE(  44)				::PlayState_obj::doingSum = false;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  40)			 ::Dynamic fartshitlol =  ::Dynamic(new _hx_Closure_0(_gthis));
HXDLIN(  40)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1,fartshitlol,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,doThing,(void))


::hx::ObjectPtr< Player_obj > Player_obj::__new(int x,int y) {
	::hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct(x,y);
	return __this;
}

::hx::ObjectPtr< Player_obj > Player_obj::__alloc(::hx::Ctx *_hx_ctx,int x,int y) {
	Player_obj *__this = (Player_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct(x,y);
	return __this;
}

Player_obj::Player_obj()
{
}

::hx::Val Player_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"doThing") ) { return ::hx::Val( doThing_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Player_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_("update",09,86,05,87),
	HX_("doThing",63,68,b6,42),
	::String(null()) };

::hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	Player_obj _hx_dummy;
	Player_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Player",81,5f,4d,6c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Player_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

