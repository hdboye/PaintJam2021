// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseEventManager
#include <flixel/input/mouse/FlxMouseEventManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse__FlxMouseEventManager_ObjectMouseData
#include <flixel/input/mouse/_FlxMouseEventManager/ObjectMouseData.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_PluginFrontEnd
#include <flixel/system/frontEnds/PluginFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_ds_ArraySort
#include <haxe/ds/ArraySort.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_450_new,"flixel.input.mouse.FlxMouseEventManager","new",0xae332b17,"flixel.input.mouse.FlxMouseEventManager.new","flixel/input/mouse/FlxMouseEventManager.hx",450,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_466_destroy,"flixel.input.mouse.FlxMouseEventManager","destroy",0x1c6eaf31,"flixel.input.mouse.FlxMouseEventManager.destroy","flixel/input/mouse/FlxMouseEventManager.hx",466,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_474_update,"flixel.input.mouse.FlxMouseEventManager","update",0x84b077b2,"flixel.input.mouse.FlxMouseEventManager.update","flixel/input/mouse/FlxMouseEventManager.hx",474,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_653_clearRegistry,"flixel.input.mouse.FlxMouseEventManager","clearRegistry",0xaf4f39e1,"flixel.input.mouse.FlxMouseEventManager.clearRegistry","flixel/input/mouse/FlxMouseEventManager.hx",653,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_661_checkOverlap,"flixel.input.mouse.FlxMouseEventManager","checkOverlap",0x58381208,"flixel.input.mouse.FlxMouseEventManager.checkOverlap","flixel/input/mouse/FlxMouseEventManager.hx",661,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_699_checkOverlapWithPoint,"flixel.input.mouse.FlxMouseEventManager","checkOverlapWithPoint",0x0bd96542,"flixel.input.mouse.FlxMouseEventManager.checkOverlapWithPoint","flixel/input/mouse/FlxMouseEventManager.hx",699,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_710_checkPixelPerfectOverlap,"flixel.input.mouse.FlxMouseEventManager","checkPixelPerfectOverlap",0xb8bf1721,"flixel.input.mouse.FlxMouseEventManager.checkPixelPerfectOverlap","flixel/input/mouse/FlxMouseEventManager.hx",710,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_66_init,"flixel.input.mouse.FlxMouseEventManager","init",0xbb4b4079,"flixel.input.mouse.FlxMouseEventManager.init","flixel/input/mouse/FlxMouseEventManager.hx",66,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_88_add,"flixel.input.mouse.FlxMouseEventManager","add",0xae294cd8,"flixel.input.mouse.FlxMouseEventManager.add","flixel/input/mouse/FlxMouseEventManager.hx",88,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_120_remove,"flixel.input.mouse.FlxMouseEventManager","remove",0x02338ded,"flixel.input.mouse.FlxMouseEventManager.remove","flixel/input/mouse/FlxMouseEventManager.hx",120,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_136_removeAll,"flixel.input.mouse.FlxMouseEventManager","removeAll",0xef9bd534,"flixel.input.mouse.FlxMouseEventManager.removeAll","flixel/input/mouse/FlxMouseEventManager.hx",136,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_159_reorder,"flixel.input.mouse.FlxMouseEventManager","reorder",0x13a3c632,"flixel.input.mouse.FlxMouseEventManager.reorder","flixel/input/mouse/FlxMouseEventManager.hx",159,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_177_setMouseDownCallback,"flixel.input.mouse.FlxMouseEventManager","setMouseDownCallback",0xe8b31b73,"flixel.input.mouse.FlxMouseEventManager.setMouseDownCallback","flixel/input/mouse/FlxMouseEventManager.hx",177,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_193_setMouseUpCallback,"flixel.input.mouse.FlxMouseEventManager","setMouseUpCallback",0x3b6a476c,"flixel.input.mouse.FlxMouseEventManager.setMouseUpCallback","flixel/input/mouse/FlxMouseEventManager.hx",193,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_210_setMouseClickCallback,"flixel.input.mouse.FlxMouseEventManager","setMouseClickCallback",0x94b58581,"flixel.input.mouse.FlxMouseEventManager.setMouseClickCallback","flixel/input/mouse/FlxMouseEventManager.hx",210,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_227_setMouseDoubleClickCallback,"flixel.input.mouse.FlxMouseEventManager","setMouseDoubleClickCallback",0x553b8ab0,"flixel.input.mouse.FlxMouseEventManager.setMouseDoubleClickCallback","flixel/input/mouse/FlxMouseEventManager.hx",227,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_243_setMouseOverCallback,"flixel.input.mouse.FlxMouseEventManager","setMouseOverCallback",0x088af665,"flixel.input.mouse.FlxMouseEventManager.setMouseOverCallback","flixel/input/mouse/FlxMouseEventManager.hx",243,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_259_setMouseOutCallback,"flixel.input.mouse.FlxMouseEventManager","setMouseOutCallback",0x235b22c7,"flixel.input.mouse.FlxMouseEventManager.setMouseOutCallback","flixel/input/mouse/FlxMouseEventManager.hx",259,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_276_setMouseMoveCallback,"flixel.input.mouse.FlxMouseEventManager","setMouseMoveCallback",0x0da6cd22,"flixel.input.mouse.FlxMouseEventManager.setMouseMoveCallback","flixel/input/mouse/FlxMouseEventManager.hx",276,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_293_setMouseWheelCallback,"flixel.input.mouse.FlxMouseEventManager","setMouseWheelCallback",0x50ce48d4,"flixel.input.mouse.FlxMouseEventManager.setMouseWheelCallback","flixel/input/mouse/FlxMouseEventManager.hx",293,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_308_setObjectMouseEnabled,"flixel.input.mouse.FlxMouseEventManager","setObjectMouseEnabled",0xe24566f4,"flixel.input.mouse.FlxMouseEventManager.setObjectMouseEnabled","flixel/input/mouse/FlxMouseEventManager.hx",308,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_321_isObjectMouseEnabled,"flixel.input.mouse.FlxMouseEventManager","isObjectMouseEnabled",0x6e5fac2e,"flixel.input.mouse.FlxMouseEventManager.isObjectMouseEnabled","flixel/input/mouse/FlxMouseEventManager.hx",321,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_340_setObjectMouseChildren,"flixel.input.mouse.FlxMouseEventManager","setObjectMouseChildren",0x9e2bdb6c,"flixel.input.mouse.FlxMouseEventManager.setObjectMouseChildren","flixel/input/mouse/FlxMouseEventManager.hx",340,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_368_isObjectMouseChildren,"flixel.input.mouse.FlxMouseEventManager","isObjectMouseChildren",0xa90e28f2,"flixel.input.mouse.FlxMouseEventManager.isObjectMouseChildren","flixel/input/mouse/FlxMouseEventManager.hx",368,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_385_setObjectMouseButtons,"flixel.input.mouse.FlxMouseEventManager","setObjectMouseButtons",0x2e89b4b4,"flixel.input.mouse.FlxMouseEventManager.setObjectMouseButtons","flixel/input/mouse/FlxMouseEventManager.hx",385,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_397_traverseFlxGroup,"flixel.input.mouse.FlxMouseEventManager","traverseFlxGroup",0xb5503c28,"flixel.input.mouse.FlxMouseEventManager.traverseFlxGroup","flixel/input/mouse/FlxMouseEventManager.hx",397,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_417_getRegister,"flixel.input.mouse.FlxMouseEventManager","getRegister",0xc4eed2d0,"flixel.input.mouse.FlxMouseEventManager.getRegister","flixel/input/mouse/FlxMouseEventManager.hx",417,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_435_sortByMouseChildren,"flixel.input.mouse.FlxMouseEventManager","sortByMouseChildren",0x74c04b26,"flixel.input.mouse.FlxMouseEventManager.sortByMouseChildren","flixel/input/mouse/FlxMouseEventManager.hx",435,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_46_boot,"flixel.input.mouse.FlxMouseEventManager","boot",0xb6ab899b,"flixel.input.mouse.FlxMouseEventManager.boot","flixel/input/mouse/FlxMouseEventManager.hx",46,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_47_boot,"flixel.input.mouse.FlxMouseEventManager","boot",0xb6ab899b,"flixel.input.mouse.FlxMouseEventManager.boot","flixel/input/mouse/FlxMouseEventManager.hx",47,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_48_boot,"flixel.input.mouse.FlxMouseEventManager","boot",0xb6ab899b,"flixel.input.mouse.FlxMouseEventManager.boot","flixel/input/mouse/FlxMouseEventManager.hx",48,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_49_boot,"flixel.input.mouse.FlxMouseEventManager","boot",0xb6ab899b,"flixel.input.mouse.FlxMouseEventManager.boot","flixel/input/mouse/FlxMouseEventManager.hx",49,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_51_boot,"flixel.input.mouse.FlxMouseEventManager","boot",0xb6ab899b,"flixel.input.mouse.FlxMouseEventManager.boot","flixel/input/mouse/FlxMouseEventManager.hx",51,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_53_boot,"flixel.input.mouse.FlxMouseEventManager","boot",0xb6ab899b,"flixel.input.mouse.FlxMouseEventManager.boot","flixel/input/mouse/FlxMouseEventManager.hx",53,0x750c3856)
HX_LOCAL_STACK_FRAME(_hx_pos_7737cad62ef16250_59_boot,"flixel.input.mouse.FlxMouseEventManager","boot",0xb6ab899b,"flixel.input.mouse.FlxMouseEventManager.boot","flixel/input/mouse/FlxMouseEventManager.hx",59,0x750c3856)
namespace flixel{
namespace input{
namespace mouse{

void FlxMouseEventManager_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_450_new)
HXLINE( 451)		super::__construct();
HXLINE( 453)		if (::hx::IsNotNull( ::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects )) {
HXLINE( 455)			this->clearRegistry();
            		}
HXLINE( 457)		::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects = ::Array_obj< ::Dynamic>::__new();
HXLINE( 458)		::flixel::input::mouse::FlxMouseEventManager_obj::_mouseOverObjects = ::Array_obj< ::Dynamic>::__new();
HXLINE( 459)		::flixel::input::mouse::FlxMouseEventManager_obj::_mouseDownObjects = ::Array_obj< ::Dynamic>::__new();
HXLINE( 460)		::flixel::input::mouse::FlxMouseEventManager_obj::_mouseClickedObjects = ::Array_obj< ::Dynamic>::__new();
HXLINE( 462)		::flixel::FlxG_obj::signals->preStateSwitch->add(::flixel::input::mouse::FlxMouseEventManager_obj::removeAll_dyn());
            	}

Dynamic FlxMouseEventManager_obj::__CreateEmpty() { return new FlxMouseEventManager_obj; }

void *FlxMouseEventManager_obj::_hx_vtable = 0;

Dynamic FlxMouseEventManager_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxMouseEventManager_obj > _hx_result = new FlxMouseEventManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxMouseEventManager_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f3827fd) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x3f3827fd;
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

void FlxMouseEventManager_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_466_destroy)
HXLINE( 467)		this->clearRegistry();
HXLINE( 468)		::flixel::input::mouse::FlxMouseEventManager_obj::_point = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(::flixel::input::mouse::FlxMouseEventManager_obj::_point)) );
HXLINE( 469)		::flixel::FlxG_obj::signals->preStateSwitch->remove(::flixel::input::mouse::FlxMouseEventManager_obj::removeAll_dyn());
HXLINE( 470)		this->super::destroy();
            	}


void FlxMouseEventManager_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_474_update)
HXLINE( 475)		this->super::update(elapsed);
HXLINE( 477)		::Array< ::Dynamic> currentOverObjects = ::Array_obj< ::Dynamic>::__new();
HXLINE( 479)		{
HXLINE( 479)			int _g = 0;
HXDLIN( 479)			::Array< ::Dynamic> _g1 = ::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects;
HXDLIN( 479)			while((_g < _g1->length)){
HXLINE( 479)				 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg = _g1->__get(_g).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 479)				_g = (_g + 1);
HXLINE( 481)				bool _hx_tmp;
HXDLIN( 481)				bool _hx_tmp1;
HXDLIN( 481)				bool _hx_tmp2;
HXDLIN( 481)				if (reg->object->alive) {
HXLINE( 481)					_hx_tmp2 = !(reg->object->exists);
            				}
            				else {
HXLINE( 481)					_hx_tmp2 = true;
            				}
HXDLIN( 481)				if (!(_hx_tmp2)) {
HXLINE( 481)					_hx_tmp1 = !(reg->object->visible);
            				}
            				else {
HXLINE( 481)					_hx_tmp1 = true;
            				}
HXDLIN( 481)				if (!(_hx_tmp1)) {
HXLINE( 481)					_hx_tmp = !(reg->mouseEnabled);
            				}
            				else {
HXLINE( 481)					_hx_tmp = true;
            				}
HXDLIN( 481)				if (_hx_tmp) {
HXLINE( 483)					continue;
            				}
HXLINE( 486)				if (this->checkOverlap(reg)) {
HXLINE( 488)					currentOverObjects->push(reg);
HXLINE( 490)					if (!(reg->mouseChildren)) {
HXLINE( 492)						goto _hx_goto_2;
            					}
            				}
            			}
            			_hx_goto_2:;
            		}
HXLINE( 498)		{
HXLINE( 498)			int _g2 = 0;
HXDLIN( 498)			::Array< ::Dynamic> _g3 = ::flixel::input::mouse::FlxMouseEventManager_obj::_mouseOverObjects;
HXDLIN( 498)			while((_g2 < _g3->length)){
HXLINE( 498)				 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData over = _g3->__get(_g2).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 498)				_g2 = (_g2 + 1);
HXLINE( 500)				if (::hx::IsNotNull( over->onMouseOut )) {
HXLINE( 504)					bool _hx_tmp;
HXDLIN( 504)					bool _hx_tmp1;
HXDLIN( 504)					if (over->object->exists) {
HXLINE( 504)						_hx_tmp1 = !(over->object->visible);
            					}
            					else {
HXLINE( 504)						_hx_tmp1 = true;
            					}
HXDLIN( 504)					if (!(_hx_tmp1)) {
HXLINE( 504)						_hx_tmp = ::hx::IsNull( ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(over->object,currentOverObjects) );
            					}
            					else {
HXLINE( 504)						_hx_tmp = true;
            					}
HXDLIN( 504)					if (_hx_tmp) {
HXLINE( 506)						over->onMouseOut(over->object);
            					}
            				}
            			}
            		}
HXLINE( 512)		{
HXLINE( 512)			int _g4 = 0;
HXDLIN( 512)			while((_g4 < currentOverObjects->length)){
HXLINE( 512)				 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData current = currentOverObjects->__get(_g4).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 512)				_g4 = (_g4 + 1);
HXLINE( 514)				if (::hx::IsNotNull( current->onMouseOver )) {
HXLINE( 516)					bool _hx_tmp;
HXDLIN( 516)					bool _hx_tmp1;
HXDLIN( 516)					if (current->object->exists) {
HXLINE( 516)						_hx_tmp1 = current->object->visible;
            					}
            					else {
HXLINE( 516)						_hx_tmp1 = false;
            					}
HXDLIN( 516)					if (_hx_tmp1) {
HXLINE( 516)						_hx_tmp = ::hx::IsNull( ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(current->object,::flixel::input::mouse::FlxMouseEventManager_obj::_mouseOverObjects) );
            					}
            					else {
HXLINE( 516)						_hx_tmp = false;
            					}
HXDLIN( 516)					if (_hx_tmp) {
HXLINE( 518)						current->onMouseOver(current->object);
            					}
            				}
            			}
            		}
HXLINE( 526)		if (!(::flixel::FlxG_obj::mouse->enabled)) {
HXLINE( 527)			return;
            		}
HXLINE( 530)		 ::flixel::input::mouse::FlxMouse _this = ::flixel::FlxG_obj::mouse;
HXDLIN( 530)		bool _hx_tmp;
HXDLIN( 530)		if ((_this->_prevX == _this->x)) {
HXLINE( 530)			_hx_tmp = (_this->_prevY != _this->y);
            		}
            		else {
HXLINE( 530)			_hx_tmp = true;
            		}
HXDLIN( 530)		if (_hx_tmp) {
HXLINE( 532)			int _g = 0;
HXDLIN( 532)			while((_g < currentOverObjects->length)){
HXLINE( 532)				 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData current = currentOverObjects->__get(_g).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 532)				_g = (_g + 1);
HXLINE( 534)				bool _hx_tmp;
HXDLIN( 534)				bool _hx_tmp1;
HXDLIN( 534)				if (::hx::IsNotNull( current->onMouseMove )) {
HXLINE( 534)					_hx_tmp1 = current->object->exists;
            				}
            				else {
HXLINE( 534)					_hx_tmp1 = false;
            				}
HXDLIN( 534)				if (_hx_tmp1) {
HXLINE( 534)					_hx_tmp = current->object->visible;
            				}
            				else {
HXLINE( 534)					_hx_tmp = false;
            				}
HXDLIN( 534)				if (_hx_tmp) {
HXLINE( 536)					current->onMouseMove(current->object);
            				}
            			}
            		}
HXLINE( 542)		{
HXLINE( 542)			int _g5 = 0;
HXDLIN( 542)			while((_g5 < currentOverObjects->length)){
HXLINE( 542)				 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData current = currentOverObjects->__get(_g5).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 542)				_g5 = (_g5 + 1);
HXLINE( 544)				bool _hx_tmp;
HXDLIN( 544)				bool _hx_tmp1;
HXDLIN( 544)				if (::hx::IsNotNull( current->onMouseDown )) {
HXLINE( 544)					_hx_tmp1 = current->object->exists;
            				}
            				else {
HXLINE( 544)					_hx_tmp1 = false;
            				}
HXDLIN( 544)				if (_hx_tmp1) {
HXLINE( 544)					_hx_tmp = current->object->visible;
            				}
            				else {
HXLINE( 544)					_hx_tmp = false;
            				}
HXDLIN( 544)				if (_hx_tmp) {
HXLINE( 546)					int _g = 0;
HXDLIN( 546)					::Array< int > _g1 = current->mouseButtons;
HXDLIN( 546)					while((_g < _g1->length)){
HXLINE( 546)						int buttonID = _g1->__get(_g);
HXDLIN( 546)						_g = (_g + 1);
HXLINE( 548)						if ((::flixel::input::mouse::FlxMouseButton_obj::getByID(buttonID)->current == 2)) {
HXLINE( 550)							current->onMouseDown(current->object);
            						}
            					}
            				}
            			}
            		}
HXLINE( 557)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE( 559)			int _g = 0;
HXDLIN( 559)			while((_g < currentOverObjects->length)){
HXLINE( 559)				 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData current = currentOverObjects->__get(_g).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 559)				_g = (_g + 1);
HXLINE( 561)				bool _hx_tmp;
HXDLIN( 561)				bool _hx_tmp1;
HXDLIN( 561)				bool _hx_tmp2;
HXDLIN( 561)				if (::hx::IsNull( current->onMouseClick )) {
HXLINE( 561)					_hx_tmp2 = ::hx::IsNotNull( current->onMouseDoubleClick );
            				}
            				else {
HXLINE( 561)					_hx_tmp2 = true;
            				}
HXDLIN( 561)				if (_hx_tmp2) {
HXLINE( 561)					_hx_tmp1 = current->object->exists;
            				}
            				else {
HXLINE( 561)					_hx_tmp1 = false;
            				}
HXDLIN( 561)				if (_hx_tmp1) {
HXLINE( 561)					_hx_tmp = current->object->visible;
            				}
            				else {
HXLINE( 561)					_hx_tmp = false;
            				}
HXDLIN( 561)				if (_hx_tmp) {
HXLINE( 565)					::flixel::input::mouse::FlxMouseEventManager_obj::_mouseDownObjects->push(current);
            				}
            			}
            		}
HXLINE( 571)		{
HXLINE( 571)			int _g6 = 0;
HXDLIN( 571)			while((_g6 < currentOverObjects->length)){
HXLINE( 571)				 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData current = currentOverObjects->__get(_g6).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 571)				_g6 = (_g6 + 1);
HXLINE( 573)				bool _hx_tmp;
HXDLIN( 573)				bool _hx_tmp1;
HXDLIN( 573)				if (::hx::IsNotNull( current->onMouseUp )) {
HXLINE( 573)					_hx_tmp1 = current->object->exists;
            				}
            				else {
HXLINE( 573)					_hx_tmp1 = false;
            				}
HXDLIN( 573)				if (_hx_tmp1) {
HXLINE( 573)					_hx_tmp = current->object->visible;
            				}
            				else {
HXLINE( 573)					_hx_tmp = false;
            				}
HXDLIN( 573)				if (_hx_tmp) {
HXLINE( 575)					int _g = 0;
HXDLIN( 575)					::Array< int > _g1 = current->mouseButtons;
HXDLIN( 575)					while((_g < _g1->length)){
HXLINE( 575)						int buttonID = _g1->__get(_g);
HXDLIN( 575)						_g = (_g + 1);
HXLINE( 577)						if ((::flixel::input::mouse::FlxMouseButton_obj::getByID(buttonID)->current == -1)) {
HXLINE( 579)							current->onMouseUp(current->object);
            						}
            					}
            				}
            			}
            		}
HXLINE( 587)		bool _hx_tmp1;
HXDLIN( 587)		if ((::flixel::input::mouse::FlxMouseEventManager_obj::_mouseClickedObjects->length > 0)) {
HXLINE( 587)			_hx_tmp1 = ((::flixel::FlxG_obj::game->ticks - ::flixel::input::mouse::FlxMouseEventManager_obj::_mouseClickedTime) > ::flixel::input::mouse::FlxMouseEventManager_obj::maxDoubleClickDelay);
            		}
            		else {
HXLINE( 587)			_hx_tmp1 = false;
            		}
HXDLIN( 587)		if (_hx_tmp1) {
HXLINE( 589)			::flixel::input::mouse::FlxMouseEventManager_obj::_mouseClickedObjects = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 592)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == -1)) {
HXLINE( 594)			::flixel::input::mouse::FlxMouseEventManager_obj::_mouseClickedTime = ::flixel::FlxG_obj::game->ticks;
HXLINE( 596)			::Array< ::Dynamic> previousClickedObjects = ::flixel::input::mouse::FlxMouseEventManager_obj::_mouseClickedObjects;
HXLINE( 598)			if ((::flixel::input::mouse::FlxMouseEventManager_obj::_mouseClickedObjects->length > 0)) {
HXLINE( 600)				::flixel::input::mouse::FlxMouseEventManager_obj::_mouseClickedObjects = ::Array_obj< ::Dynamic>::__new(0);
            			}
HXLINE( 603)			{
HXLINE( 603)				int _g = 0;
HXDLIN( 603)				::Array< ::Dynamic> _g1 = ::flixel::input::mouse::FlxMouseEventManager_obj::_mouseDownObjects;
HXDLIN( 603)				while((_g < _g1->length)){
HXLINE( 603)					 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData down = _g1->__get(_g).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 603)					_g = (_g + 1);
HXLINE( 605)					bool _hx_tmp;
HXDLIN( 605)					bool _hx_tmp1;
HXDLIN( 605)					bool _hx_tmp2;
HXDLIN( 605)					if (::hx::IsNotNull( down->object )) {
HXLINE( 605)						_hx_tmp2 = down->object->exists;
            					}
            					else {
HXLINE( 605)						_hx_tmp2 = false;
            					}
HXDLIN( 605)					if (_hx_tmp2) {
HXLINE( 605)						_hx_tmp1 = down->object->visible;
            					}
            					else {
HXLINE( 605)						_hx_tmp1 = false;
            					}
HXDLIN( 605)					if (_hx_tmp1) {
HXLINE( 605)						_hx_tmp = ::hx::IsNotNull( ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(down->object,currentOverObjects) );
            					}
            					else {
HXLINE( 605)						_hx_tmp = false;
            					}
HXDLIN( 605)					if (_hx_tmp) {
HXLINE( 610)						if (::hx::IsNotNull( down->onMouseClick )) {
HXLINE( 612)							down->onMouseClick(down->object);
            						}
HXLINE( 615)						if (::hx::IsNotNull( down->onMouseDoubleClick )) {
HXLINE( 617)							if (::hx::IsNotNull( ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(down->object,previousClickedObjects) )) {
HXLINE( 619)								down->onMouseDoubleClick(down->object);
            							}
            							else {
HXLINE( 623)								::flixel::input::mouse::FlxMouseEventManager_obj::_mouseClickedObjects->push(down);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 630)		bool _hx_tmp2;
HXDLIN( 630)		if ((::flixel::input::mouse::FlxMouseEventManager_obj::_mouseDownObjects->length > 0)) {
HXLINE( 630)			 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN( 630)			bool _hx_tmp;
HXDLIN( 630)			if ((_this->current != 1)) {
HXLINE( 630)				_hx_tmp = (_this->current == 2);
            			}
            			else {
HXLINE( 630)				_hx_tmp = true;
            			}
HXDLIN( 630)			_hx_tmp2 = !(_hx_tmp);
            		}
            		else {
HXLINE( 630)			_hx_tmp2 = false;
            		}
HXDLIN( 630)		if (_hx_tmp2) {
HXLINE( 633)			::flixel::input::mouse::FlxMouseEventManager_obj::_mouseDownObjects = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 637)		if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE( 639)			int _g = 0;
HXDLIN( 639)			while((_g < currentOverObjects->length)){
HXLINE( 639)				 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData current = currentOverObjects->__get(_g).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 639)				_g = (_g + 1);
HXLINE( 641)				bool _hx_tmp;
HXDLIN( 641)				bool _hx_tmp1;
HXDLIN( 641)				if (::hx::IsNotNull( current->onMouseWheel )) {
HXLINE( 641)					_hx_tmp1 = current->object->exists;
            				}
            				else {
HXLINE( 641)					_hx_tmp1 = false;
            				}
HXDLIN( 641)				if (_hx_tmp1) {
HXLINE( 641)					_hx_tmp = current->object->visible;
            				}
            				else {
HXLINE( 641)					_hx_tmp = false;
            				}
HXDLIN( 641)				if (_hx_tmp) {
HXLINE( 643)					current->onMouseWheel(current->object);
            				}
            			}
            		}
HXLINE( 649)		::flixel::input::mouse::FlxMouseEventManager_obj::_mouseOverObjects = currentOverObjects;
            	}


void FlxMouseEventManager_obj::clearRegistry(){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_653_clearRegistry)
HXLINE( 654)		::flixel::input::mouse::FlxMouseEventManager_obj::_mouseOverObjects = null();
HXLINE( 655)		::flixel::input::mouse::FlxMouseEventManager_obj::_mouseDownObjects = null();
HXLINE( 656)		::flixel::input::mouse::FlxMouseEventManager_obj::_mouseClickedObjects = null();
HXLINE( 657)		::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects = ::flixel::util::FlxDestroyUtil_obj::destroyArray(::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouseEventManager_obj,clearRegistry,(void))

bool FlxMouseEventManager_obj::checkOverlap( ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData Register){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_661_checkOverlap)
HXLINE( 662)		{
HXLINE( 662)			int _g = 0;
HXDLIN( 662)			::Array< ::Dynamic> _g1 = Register->object->get_cameras();
HXDLIN( 662)			while((_g < _g1->length)){
HXLINE( 662)				 ::flixel::FlxCamera camera = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 662)				_g = (_g + 1);
HXLINE( 665)				::flixel::input::mouse::FlxMouseEventManager_obj::_point = ::flixel::FlxG_obj::mouse->getPositionInCameraView(camera,::flixel::input::mouse::FlxMouseEventManager_obj::_point);
HXLINE( 666)				 ::flixel::math::FlxPoint point = ::flixel::input::mouse::FlxMouseEventManager_obj::_point;
HXDLIN( 666)				bool _hx_tmp;
HXDLIN( 666)				bool _hx_tmp1;
HXDLIN( 666)				bool _hx_tmp2;
HXDLIN( 666)				if (((point->x + ( (Float)(0) )) > camera->viewOffsetX)) {
HXLINE( 666)					_hx_tmp2 = (point->x < camera->viewOffsetWidth);
            				}
            				else {
HXLINE( 666)					_hx_tmp2 = false;
            				}
HXDLIN( 666)				if (_hx_tmp2) {
HXLINE( 666)					_hx_tmp1 = ((point->y + ( (Float)(0) )) > camera->viewOffsetY);
            				}
            				else {
HXLINE( 666)					_hx_tmp1 = false;
            				}
HXDLIN( 666)				if (_hx_tmp1) {
HXLINE( 666)					_hx_tmp = (point->y < camera->viewOffsetHeight);
            				}
            				else {
HXLINE( 666)					_hx_tmp = false;
            				}
HXDLIN( 666)				if (_hx_tmp) {
HXLINE( 668)					::flixel::input::mouse::FlxMouseEventManager_obj::_point = ::flixel::FlxG_obj::mouse->getWorldPosition(camera,::flixel::input::mouse::FlxMouseEventManager_obj::_point);
HXLINE( 670)					 ::flixel::math::FlxPoint Point = ::flixel::input::mouse::FlxMouseEventManager_obj::_point;
HXDLIN( 670)					bool _hx_tmp;
HXDLIN( 670)					bool _hx_tmp1;
HXDLIN( 670)					if (Register->pixelPerfect) {
HXLINE( 670)						_hx_tmp1 = ::hx::IsNotNull( Register->sprite );
            					}
            					else {
HXLINE( 670)						_hx_tmp1 = false;
            					}
HXDLIN( 670)					if (_hx_tmp1) {
HXLINE( 670)						 ::flixel::FlxSprite Sprite = Register->sprite;
HXDLIN( 670)						if ((Sprite->angle != 0)) {
HXLINE( 670)							Float X = ((Sprite->x + Sprite->origin->x) - Sprite->offset->x);
HXDLIN( 670)							Float Y = ((Sprite->y + Sprite->origin->y) - Sprite->offset->y);
HXDLIN( 670)							 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 670)							point->_inPool = false;
HXDLIN( 670)							 ::flixel::math::FlxPoint point1 = point;
HXDLIN( 670)							point1->_weak = true;
HXDLIN( 670)							 ::flixel::math::FlxPoint pivot = point1;
HXDLIN( 670)							Point->rotate(pivot,-(Sprite->angle));
            						}
HXDLIN( 670)						_hx_tmp = Sprite->pixelsOverlapPoint(Point,1,camera);
            					}
            					else {
HXLINE( 670)						_hx_tmp = Register->object->overlapsPoint(Point,true,camera);
            					}
HXDLIN( 670)					if (_hx_tmp) {
HXLINE( 672)						return true;
            					}
            				}
            			}
            		}
HXLINE( 694)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxMouseEventManager_obj,checkOverlap,return )

bool FlxMouseEventManager_obj::checkOverlapWithPoint( ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData Register, ::flixel::math::FlxPoint Point, ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_699_checkOverlapWithPoint)
HXDLIN( 699)		bool _hx_tmp;
HXDLIN( 699)		if (Register->pixelPerfect) {
HXDLIN( 699)			_hx_tmp = ::hx::IsNotNull( Register->sprite );
            		}
            		else {
HXDLIN( 699)			_hx_tmp = false;
            		}
HXDLIN( 699)		if (_hx_tmp) {
HXLINE( 701)			 ::flixel::FlxSprite Sprite = Register->sprite;
HXDLIN( 701)			if ((Sprite->angle != 0)) {
HXLINE( 701)				Float X = ((Sprite->x + Sprite->origin->x) - Sprite->offset->x);
HXDLIN( 701)				Float Y = ((Sprite->y + Sprite->origin->y) - Sprite->offset->y);
HXDLIN( 701)				 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 701)				point->_inPool = false;
HXDLIN( 701)				 ::flixel::math::FlxPoint point1 = point;
HXDLIN( 701)				point1->_weak = true;
HXDLIN( 701)				 ::flixel::math::FlxPoint pivot = point1;
HXDLIN( 701)				Point->rotate(pivot,-(Sprite->angle));
            			}
HXDLIN( 701)			return Sprite->pixelsOverlapPoint(Point,1,Camera);
            		}
            		else {
HXLINE( 705)			return Register->object->overlapsPoint(Point,true,Camera);
            		}
HXLINE( 699)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxMouseEventManager_obj,checkOverlapWithPoint,return )

bool FlxMouseEventManager_obj::checkPixelPerfectOverlap( ::flixel::math::FlxPoint Point, ::flixel::FlxSprite Sprite, ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_710_checkPixelPerfectOverlap)
HXLINE( 711)		if ((Sprite->angle != 0)) {
HXLINE( 713)			Float X = ((Sprite->x + Sprite->origin->x) - Sprite->offset->x);
HXDLIN( 713)			Float Y = ((Sprite->y + Sprite->origin->y) - Sprite->offset->y);
HXDLIN( 713)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 713)			point->_inPool = false;
HXDLIN( 713)			 ::flixel::math::FlxPoint point1 = point;
HXDLIN( 713)			point1->_weak = true;
HXDLIN( 713)			 ::flixel::math::FlxPoint pivot = point1;
HXLINE( 714)			Point->rotate(pivot,-(Sprite->angle));
            		}
HXLINE( 716)		return Sprite->pixelsOverlapPoint(Point,1,Camera);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxMouseEventManager_obj,checkPixelPerfectOverlap,return )

::Array< ::Dynamic> FlxMouseEventManager_obj::_registeredObjects;

::Array< ::Dynamic> FlxMouseEventManager_obj::_mouseOverObjects;

::Array< ::Dynamic> FlxMouseEventManager_obj::_mouseDownObjects;

::Array< ::Dynamic> FlxMouseEventManager_obj::_mouseClickedObjects;

int FlxMouseEventManager_obj::_mouseClickedTime;

 ::flixel::math::FlxPoint FlxMouseEventManager_obj::_point;

int FlxMouseEventManager_obj::maxDoubleClickDelay;

void FlxMouseEventManager_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_7737cad62ef16250_66_init)
HXDLIN(  66)		if (::hx::IsNull( ::flixel::FlxG_obj::plugins->get(::hx::ClassOf< ::flixel::input::mouse::FlxMouseEventManager >()) )) {
HXLINE(  67)			 ::flixel::_hx_system::frontEnds::PluginFrontEnd _hx_tmp = ::flixel::FlxG_obj::plugins;
HXDLIN(  67)			_hx_tmp->add_flixel_input_mouse_FlxMouseEventManager( ::flixel::input::mouse::FlxMouseEventManager_obj::__alloc( HX_CTX ));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxMouseEventManager_obj,init,(void))

 ::Dynamic FlxMouseEventManager_obj::add( ::Dynamic Object, ::Dynamic OnMouseDown, ::Dynamic OnMouseUp, ::Dynamic OnMouseOver, ::Dynamic OnMouseOut,::hx::Null< bool >  __o_MouseChildren,::hx::Null< bool >  __o_MouseEnabled,::hx::Null< bool >  __o_PixelPerfect,::Array< int > MouseButtons){
            		bool MouseChildren = __o_MouseChildren.Default(false);
            		bool MouseEnabled = __o_MouseEnabled.Default(true);
            		bool PixelPerfect = __o_PixelPerfect.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_7737cad62ef16250_88_add)
HXLINE(  89)		if (::hx::IsNull( ::flixel::FlxG_obj::plugins->get(::hx::ClassOf< ::flixel::input::mouse::FlxMouseEventManager >()) )) {
HXLINE(  89)			 ::flixel::_hx_system::frontEnds::PluginFrontEnd _hx_tmp = ::flixel::FlxG_obj::plugins;
HXDLIN(  89)			_hx_tmp->add_flixel_input_mouse_FlxMouseEventManager( ::flixel::input::mouse::FlxMouseEventManager_obj::__alloc( HX_CTX ));
            		}
HXLINE(  91)		 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData newReg =  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData_obj::__alloc( HX_CTX ,Object,OnMouseDown,OnMouseUp,OnMouseOver,OnMouseOut,MouseChildren,MouseEnabled,PixelPerfect,MouseButtons);
HXLINE(  93)		if (::Std_obj::isOfType(Object,::hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE(  95)			newReg->sprite = ( ( ::flixel::FlxSprite)(Object) );
            		}
HXLINE(  98)		if (!(MouseChildren)) {
HXLINE( 100)			::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects->unshift(newReg);
            		}
            		else {
HXLINE( 105)			int index = 0;
HXLINE( 107)			while(true){
HXLINE( 107)				bool _hx_tmp;
HXDLIN( 107)				if ((index < ::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects->length)) {
HXLINE( 107)					_hx_tmp = !(::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects->__get(index).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >()->mouseChildren);
            				}
            				else {
HXLINE( 107)					_hx_tmp = false;
            				}
HXDLIN( 107)				if (!(_hx_tmp)) {
HXLINE( 107)					goto _hx_goto_20;
            				}
HXLINE( 108)				index = (index + 1);
            			}
            			_hx_goto_20:;
HXLINE( 110)			::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects->insert(index,newReg);
            		}
HXLINE( 113)		return Object;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(FlxMouseEventManager_obj,add,return )

 ::Dynamic FlxMouseEventManager_obj::remove( ::Dynamic Object){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_120_remove)
HXLINE( 121)		{
HXLINE( 121)			int _g = 0;
HXDLIN( 121)			::Array< ::Dynamic> _g1 = ::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects;
HXDLIN( 121)			while((_g < _g1->length)){
HXLINE( 121)				 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg = _g1->__get(_g).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 121)				_g = (_g + 1);
HXLINE( 123)				if (::hx::IsEq( reg->object,Object )) {
HXLINE( 125)					reg->destroy();
HXLINE( 126)					::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects->remove(reg);
            				}
            			}
            		}
HXLINE( 129)		return Object;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxMouseEventManager_obj,remove,return )

void FlxMouseEventManager_obj::removeAll(){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_136_removeAll)
HXLINE( 137)		if (::hx::IsNotNull( ::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects )) {
HXLINE( 139)			int _g = 0;
HXDLIN( 139)			::Array< ::Dynamic> _g1 = ::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects;
HXDLIN( 139)			while((_g < _g1->length)){
HXLINE( 139)				 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg = _g1->__get(_g).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 139)				_g = (_g + 1);
HXLINE( 141)				reg->destroy();
            			}
            		}
HXLINE( 145)		::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects->removeRange(0,::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects->length);
HXLINE( 146)		::flixel::input::mouse::FlxMouseEventManager_obj::_mouseOverObjects = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 147)		::flixel::input::mouse::FlxMouseEventManager_obj::_mouseDownObjects = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 148)		::flixel::input::mouse::FlxMouseEventManager_obj::_mouseClickedObjects = ::Array_obj< ::Dynamic>::__new(0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxMouseEventManager_obj,removeAll,(void))

void FlxMouseEventManager_obj::reorder(){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_159_reorder)
HXLINE( 160)		::Array< ::Dynamic> orderedObjects = ::Array_obj< ::Dynamic>::__new();
HXLINE( 162)		::flixel::input::mouse::FlxMouseEventManager_obj::traverseFlxGroup(::flixel::FlxG_obj::game->_state,orderedObjects);
HXLINE( 164)		orderedObjects->reverse();
HXLINE( 165)		::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects = orderedObjects;
HXLINE( 167)		::haxe::ds::ArraySort_obj::sort(::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects,::flixel::input::mouse::FlxMouseEventManager_obj::sortByMouseChildren_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxMouseEventManager_obj,reorder,(void))

void FlxMouseEventManager_obj::setMouseDownCallback( ::Dynamic Object, ::Dynamic OnMouseDown){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_177_setMouseDownCallback)
HXLINE( 178)		 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 180)		if (::hx::IsNotNull( reg )) {
HXLINE( 182)			reg->onMouseDown = OnMouseDown;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,setMouseDownCallback,(void))

void FlxMouseEventManager_obj::setMouseUpCallback( ::Dynamic Object, ::Dynamic OnMouseUp){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_193_setMouseUpCallback)
HXLINE( 194)		 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 196)		if (::hx::IsNotNull( reg )) {
HXLINE( 198)			reg->onMouseUp = OnMouseUp;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,setMouseUpCallback,(void))

void FlxMouseEventManager_obj::setMouseClickCallback( ::Dynamic Object, ::Dynamic OnMouseClick){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_210_setMouseClickCallback)
HXLINE( 211)		 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 213)		if (::hx::IsNotNull( reg )) {
HXLINE( 215)			reg->onMouseClick = OnMouseClick;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,setMouseClickCallback,(void))

void FlxMouseEventManager_obj::setMouseDoubleClickCallback( ::Dynamic Object, ::Dynamic OnMouseDoubleClick){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_227_setMouseDoubleClickCallback)
HXLINE( 228)		 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 230)		if (::hx::IsNotNull( reg )) {
HXLINE( 232)			reg->onMouseDoubleClick = OnMouseDoubleClick;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,setMouseDoubleClickCallback,(void))

void FlxMouseEventManager_obj::setMouseOverCallback( ::Dynamic Object, ::Dynamic OnMouseOver){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_243_setMouseOverCallback)
HXLINE( 244)		 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 246)		if (::hx::IsNotNull( reg )) {
HXLINE( 248)			reg->onMouseOver = OnMouseOver;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,setMouseOverCallback,(void))

void FlxMouseEventManager_obj::setMouseOutCallback( ::Dynamic Object, ::Dynamic OnMouseOut){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_259_setMouseOutCallback)
HXLINE( 260)		 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 262)		if (::hx::IsNotNull( reg )) {
HXLINE( 264)			reg->onMouseOut = OnMouseOut;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,setMouseOutCallback,(void))

void FlxMouseEventManager_obj::setMouseMoveCallback( ::Dynamic Object, ::Dynamic OnMouseMove){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_276_setMouseMoveCallback)
HXLINE( 277)		 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 279)		if (::hx::IsNotNull( reg )) {
HXLINE( 281)			reg->onMouseMove = OnMouseMove;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,setMouseMoveCallback,(void))

void FlxMouseEventManager_obj::setMouseWheelCallback( ::Dynamic Object, ::Dynamic OnMouseWheel){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_293_setMouseWheelCallback)
HXLINE( 294)		 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 296)		if (::hx::IsNotNull( reg )) {
HXLINE( 298)			reg->onMouseWheel = OnMouseWheel;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,setMouseWheelCallback,(void))

void FlxMouseEventManager_obj::setObjectMouseEnabled( ::Dynamic Object,bool MouseEnabled){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_308_setObjectMouseEnabled)
HXLINE( 309)		 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 311)		if (::hx::IsNotNull( reg )) {
HXLINE( 313)			reg->mouseEnabled = MouseEnabled;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,setObjectMouseEnabled,(void))

bool FlxMouseEventManager_obj::isObjectMouseEnabled( ::Dynamic Object){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_321_isObjectMouseEnabled)
HXLINE( 322)		 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 324)		if (::hx::IsNotNull( reg )) {
HXLINE( 326)			return reg->mouseEnabled;
            		}
            		else {
HXLINE( 330)			return false;
            		}
HXLINE( 324)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxMouseEventManager_obj,isObjectMouseEnabled,return )

void FlxMouseEventManager_obj::setObjectMouseChildren( ::Dynamic Object,bool MouseChildren){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_340_setObjectMouseChildren)
HXLINE( 341)		 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 343)		if (::hx::IsNotNull( reg )) {
HXLINE( 345)			reg->mouseChildren = MouseChildren;
HXLINE( 346)			::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects->remove(reg);
HXLINE( 348)			if (!(MouseChildren)) {
HXLINE( 350)				::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects->unshift(reg);
            			}
            			else {
HXLINE( 354)				int index = 0;
HXLINE( 356)				while(true){
HXLINE( 356)					bool _hx_tmp;
HXDLIN( 356)					if ((index < ::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects->length)) {
HXLINE( 356)						_hx_tmp = !(::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects->__get(index).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >()->mouseChildren);
            					}
            					else {
HXLINE( 356)						_hx_tmp = false;
            					}
HXDLIN( 356)					if (!(_hx_tmp)) {
HXLINE( 356)						goto _hx_goto_37;
            					}
HXLINE( 357)					index = (index + 1);
            				}
            				_hx_goto_37:;
HXLINE( 359)				::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects->insert(index,reg);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,setObjectMouseChildren,(void))

bool FlxMouseEventManager_obj::isObjectMouseChildren( ::Dynamic Object){
            	HX_GC_STACKFRAME(&_hx_pos_7737cad62ef16250_368_isObjectMouseChildren)
HXLINE( 369)		 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 371)		if (::hx::IsNotNull( reg )) {
HXLINE( 373)			return reg->mouseChildren;
            		}
            		else {
HXLINE( 377)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxMouseEventManager , isObjectMouseChildren() : object not found",2c,1c,56,e2),null())));
            		}
HXLINE( 371)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxMouseEventManager_obj,isObjectMouseChildren,return )

void FlxMouseEventManager_obj::setObjectMouseButtons( ::Dynamic object,::Array< int > mouseButtons){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_385_setObjectMouseButtons)
HXLINE( 386)		 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(object,null());
HXLINE( 388)		if (::hx::IsNotNull( reg )) {
HXLINE( 390)			reg->mouseButtons = mouseButtons;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,setObjectMouseButtons,(void))

void FlxMouseEventManager_obj::traverseFlxGroup( ::flixel::group::FlxTypedGroup Group,::Array< ::Dynamic> OrderedObjects){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_397_traverseFlxGroup)
HXDLIN( 397)		int _g = 0;
HXDLIN( 397)		::cpp::VirtualArray _g1 = Group->members;
HXDLIN( 397)		while((_g < _g1->get_length())){
HXDLIN( 397)			 ::Dynamic basic = _g1->__get(_g);
HXDLIN( 397)			_g = (_g + 1);
HXLINE( 399)			 ::flixel::group::FlxTypedGroup group = ::flixel::group::FlxTypedGroup_obj::resolveGroup(( ( ::flixel::FlxBasic)(basic) ));
HXLINE( 400)			if (::hx::IsNotNull( group )) {
HXLINE( 402)				::flixel::input::mouse::FlxMouseEventManager_obj::traverseFlxGroup(group,OrderedObjects);
            			}
HXLINE( 404)			if (::Std_obj::isOfType(basic,::hx::ClassOf< ::flixel::FlxObject >())) {
HXLINE( 406)				 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(( ( ::flixel::FlxObject)(basic) ),null());
HXLINE( 408)				if (::hx::IsNotNull( reg )) {
HXLINE( 410)					OrderedObjects->push(reg);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,traverseFlxGroup,(void))

 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData FlxMouseEventManager_obj::getRegister( ::Dynamic Object,::Array< ::Dynamic> Register){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_417_getRegister)
HXLINE( 418)		if (::hx::IsNull( Register )) {
HXLINE( 420)			Register = ::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects;
            		}
HXLINE( 423)		{
HXLINE( 423)			int _g = 0;
HXDLIN( 423)			while((_g < Register->length)){
HXLINE( 423)				 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg = Register->__get(_g).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 423)				_g = (_g + 1);
HXLINE( 425)				if (::hx::IsEq( reg->object,Object )) {
HXLINE( 427)					return reg;
            				}
            			}
            		}
HXLINE( 431)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,getRegister,return )

int FlxMouseEventManager_obj::sortByMouseChildren( ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg1, ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData reg2){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_435_sortByMouseChildren)
HXLINE( 436)		if ((reg1->mouseChildren == reg2->mouseChildren)) {
HXLINE( 438)			return 0;
            		}
HXLINE( 441)		if (!(reg1->mouseChildren)) {
HXLINE( 443)			return -1;
            		}
HXLINE( 446)		return 1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,sortByMouseChildren,return )


::hx::ObjectPtr< FlxMouseEventManager_obj > FlxMouseEventManager_obj::__new() {
	::hx::ObjectPtr< FlxMouseEventManager_obj > __this = new FlxMouseEventManager_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FlxMouseEventManager_obj > FlxMouseEventManager_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FlxMouseEventManager_obj *__this = (FlxMouseEventManager_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxMouseEventManager_obj), true, "flixel.input.mouse.FlxMouseEventManager"));
	*(void **)__this = FlxMouseEventManager_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxMouseEventManager_obj::FlxMouseEventManager_obj()
{
}

::hx::Val FlxMouseEventManager_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"checkOverlap") ) { return ::hx::Val( checkOverlap_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"clearRegistry") ) { return ::hx::Val( clearRegistry_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"checkOverlapWithPoint") ) { return ::hx::Val( checkOverlapWithPoint_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"checkPixelPerfectOverlap") ) { return ::hx::Val( checkPixelPerfectOverlap_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxMouseEventManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_point") ) { outValue = ( _point ); return true; }
		if (HX_FIELD_EQ(inName,"remove") ) { outValue = remove_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"reorder") ) { outValue = reorder_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"removeAll") ) { outValue = removeAll_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getRegister") ) { outValue = getRegister_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"traverseFlxGroup") ) { outValue = traverseFlxGroup_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_mouseOverObjects") ) { outValue = ( _mouseOverObjects ); return true; }
		if (HX_FIELD_EQ(inName,"_mouseDownObjects") ) { outValue = ( _mouseDownObjects ); return true; }
		if (HX_FIELD_EQ(inName,"_mouseClickedTime") ) { outValue = ( _mouseClickedTime ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_registeredObjects") ) { outValue = ( _registeredObjects ); return true; }
		if (HX_FIELD_EQ(inName,"setMouseUpCallback") ) { outValue = setMouseUpCallback_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"maxDoubleClickDelay") ) { outValue = ( maxDoubleClickDelay ); return true; }
		if (HX_FIELD_EQ(inName,"setMouseOutCallback") ) { outValue = setMouseOutCallback_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sortByMouseChildren") ) { outValue = sortByMouseChildren_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_mouseClickedObjects") ) { outValue = ( _mouseClickedObjects ); return true; }
		if (HX_FIELD_EQ(inName,"setMouseDownCallback") ) { outValue = setMouseDownCallback_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setMouseOverCallback") ) { outValue = setMouseOverCallback_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setMouseMoveCallback") ) { outValue = setMouseMoveCallback_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isObjectMouseEnabled") ) { outValue = isObjectMouseEnabled_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"setMouseClickCallback") ) { outValue = setMouseClickCallback_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setMouseWheelCallback") ) { outValue = setMouseWheelCallback_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setObjectMouseEnabled") ) { outValue = setObjectMouseEnabled_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isObjectMouseChildren") ) { outValue = isObjectMouseChildren_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setObjectMouseButtons") ) { outValue = setObjectMouseButtons_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"setObjectMouseChildren") ) { outValue = setObjectMouseChildren_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"setMouseDoubleClickCallback") ) { outValue = setMouseDoubleClickCallback_dyn(); return true; }
	}
	return false;
}

bool FlxMouseEventManager_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_point") ) { _point=ioValue.Cast<  ::flixel::math::FlxPoint >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_mouseOverObjects") ) { _mouseOverObjects=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"_mouseDownObjects") ) { _mouseDownObjects=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"_mouseClickedTime") ) { _mouseClickedTime=ioValue.Cast< int >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_registeredObjects") ) { _registeredObjects=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"maxDoubleClickDelay") ) { maxDoubleClickDelay=ioValue.Cast< int >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_mouseClickedObjects") ) { _mouseClickedObjects=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxMouseEventManager_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo FlxMouseEventManager_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &FlxMouseEventManager_obj::_registeredObjects,HX_("_registeredObjects",33,2c,b1,fd)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &FlxMouseEventManager_obj::_mouseOverObjects,HX_("_mouseOverObjects",1a,9a,98,a8)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &FlxMouseEventManager_obj::_mouseDownObjects,HX_("_mouseDownObjects",cc,50,30,cd)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &FlxMouseEventManager_obj::_mouseClickedObjects,HX_("_mouseClickedObjects",f3,a4,63,a8)},
	{::hx::fsInt,(void *) &FlxMouseEventManager_obj::_mouseClickedTime,HX_("_mouseClickedTime",8e,56,df,4c)},
	{::hx::fsObject /*  ::flixel::math::FlxPoint */ ,(void *) &FlxMouseEventManager_obj::_point,HX_("_point",91,fb,76,c2)},
	{::hx::fsInt,(void *) &FlxMouseEventManager_obj::maxDoubleClickDelay,HX_("maxDoubleClickDelay",50,c3,5f,52)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxMouseEventManager_obj_sMemberFields[] = {
	HX_("destroy",fa,2c,86,24),
	HX_("update",09,86,05,87),
	HX_("clearRegistry",6a,b4,fc,03),
	HX_("checkOverlap",9f,fb,96,96),
	HX_("checkOverlapWithPoint",cb,10,c2,44),
	HX_("checkPixelPerfectOverlap",38,87,e1,62),
	::String(null()) };

static void FlxMouseEventManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxMouseEventManager_obj::_registeredObjects,"_registeredObjects");
	HX_MARK_MEMBER_NAME(FlxMouseEventManager_obj::_mouseOverObjects,"_mouseOverObjects");
	HX_MARK_MEMBER_NAME(FlxMouseEventManager_obj::_mouseDownObjects,"_mouseDownObjects");
	HX_MARK_MEMBER_NAME(FlxMouseEventManager_obj::_mouseClickedObjects,"_mouseClickedObjects");
	HX_MARK_MEMBER_NAME(FlxMouseEventManager_obj::_mouseClickedTime,"_mouseClickedTime");
	HX_MARK_MEMBER_NAME(FlxMouseEventManager_obj::_point,"_point");
	HX_MARK_MEMBER_NAME(FlxMouseEventManager_obj::maxDoubleClickDelay,"maxDoubleClickDelay");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxMouseEventManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxMouseEventManager_obj::_registeredObjects,"_registeredObjects");
	HX_VISIT_MEMBER_NAME(FlxMouseEventManager_obj::_mouseOverObjects,"_mouseOverObjects");
	HX_VISIT_MEMBER_NAME(FlxMouseEventManager_obj::_mouseDownObjects,"_mouseDownObjects");
	HX_VISIT_MEMBER_NAME(FlxMouseEventManager_obj::_mouseClickedObjects,"_mouseClickedObjects");
	HX_VISIT_MEMBER_NAME(FlxMouseEventManager_obj::_mouseClickedTime,"_mouseClickedTime");
	HX_VISIT_MEMBER_NAME(FlxMouseEventManager_obj::_point,"_point");
	HX_VISIT_MEMBER_NAME(FlxMouseEventManager_obj::maxDoubleClickDelay,"maxDoubleClickDelay");
};

#endif

::hx::Class FlxMouseEventManager_obj::__mClass;

static ::String FlxMouseEventManager_obj_sStaticFields[] = {
	HX_("_registeredObjects",33,2c,b1,fd),
	HX_("_mouseOverObjects",1a,9a,98,a8),
	HX_("_mouseDownObjects",cc,50,30,cd),
	HX_("_mouseClickedObjects",f3,a4,63,a8),
	HX_("_mouseClickedTime",8e,56,df,4c),
	HX_("_point",91,fb,76,c2),
	HX_("maxDoubleClickDelay",50,c3,5f,52),
	HX_("init",10,3b,bb,45),
	HX_("add",21,f2,49,00),
	HX_("remove",44,9c,88,04),
	HX_("removeAll",3d,17,e5,ca),
	HX_("reorder",fb,43,bb,1b),
	HX_("setMouseDownCallback",0a,f4,07,da),
	HX_("setMouseUpCallback",43,fc,86,24),
	HX_("setMouseClickCallback",0a,31,9e,cd),
	HX_("setMouseDoubleClickCallback",f9,02,73,43),
	HX_("setMouseOverCallback",fc,ce,df,f9),
	HX_("setMouseOutCallback",10,aa,5c,33),
	HX_("setMouseMoveCallback",b9,a5,fb,fe),
	HX_("setMouseWheelCallback",5d,f4,b6,89),
	HX_("setObjectMouseEnabled",7d,12,2e,1b),
	HX_("isObjectMouseEnabled",c5,84,b4,5f),
	HX_("setObjectMouseChildren",c3,47,d9,30),
	HX_("isObjectMouseChildren",7b,d4,f6,e1),
	HX_("setObjectMouseButtons",3d,60,72,67),
	HX_("traverseFlxGroup",3f,3d,59,c9),
	HX_("getRegister",19,69,93,f6),
	HX_("sortByMouseChildren",6f,d2,c1,84),
	::String(null())
};

void FlxMouseEventManager_obj::__register()
{
	FlxMouseEventManager_obj _hx_dummy;
	FlxMouseEventManager_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.input.mouse.FlxMouseEventManager",a5,53,34,22);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxMouseEventManager_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxMouseEventManager_obj::__SetStatic;
	__mClass->mMarkFunc = FlxMouseEventManager_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxMouseEventManager_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxMouseEventManager_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxMouseEventManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxMouseEventManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxMouseEventManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxMouseEventManager_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxMouseEventManager_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_46_boot)
HXDLIN(  46)		_registeredObjects = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_47_boot)
HXDLIN(  47)		_mouseOverObjects = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_48_boot)
HXDLIN(  48)		_mouseDownObjects = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_49_boot)
HXDLIN(  49)		_mouseClickedObjects = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_51_boot)
HXDLIN(  51)		_mouseClickedTime = -1;
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::flixel::math::FlxPoint _hx_run(){
            			HX_STACKFRAME(&_hx_pos_7737cad62ef16250_53_boot)
HXDLIN(  53)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  53)			point->_inPool = false;
HXDLIN(  53)			return point;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_53_boot)
HXDLIN(  53)		_point = ( ( ::flixel::math::FlxPoint)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_59_boot)
HXDLIN(  59)		maxDoubleClickDelay = 500;
            	}
}

} // end namespace flixel
} // end namespace input
} // end namespace mouse
