// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_input_mouse__FlxMouseEventManager_ObjectMouseData
#include <flixel/input/mouse/_FlxMouseEventManager/ObjectMouseData.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_da4931f1149b180b_740_new,"flixel.input.mouse._FlxMouseEventManager.ObjectMouseData","new",0xb9a85afa,"flixel.input.mouse._FlxMouseEventManager.ObjectMouseData.new","flixel/input/mouse/FlxMouseEventManager.hx",740,0x750c3856)
static const int _hx_array_data_50751608_1[] = {
	(int)-1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_da4931f1149b180b_753_destroy,"flixel.input.mouse._FlxMouseEventManager.ObjectMouseData","destroy",0x0f9d0c94,"flixel.input.mouse._FlxMouseEventManager.ObjectMouseData.destroy","flixel/input/mouse/FlxMouseEventManager.hx",753,0x750c3856)
namespace flixel{
namespace input{
namespace mouse{
namespace _FlxMouseEventManager{

void ObjectMouseData_obj::__construct( ::Dynamic object, ::Dynamic onMouseDown, ::Dynamic onMouseUp, ::Dynamic onMouseOver, ::Dynamic onMouseOut,bool mouseChildren,bool mouseEnabled,bool pixelPerfect,::Array< int > mouseButtons){
            	HX_STACKFRAME(&_hx_pos_da4931f1149b180b_740_new)
HXLINE( 741)		this->object = ( ( ::flixel::FlxObject)(object) );
HXLINE( 742)		this->onMouseDown = onMouseDown;
HXLINE( 743)		this->onMouseUp = onMouseUp;
HXLINE( 744)		this->onMouseOver = onMouseOver;
HXLINE( 745)		this->onMouseOut = onMouseOut;
HXLINE( 746)		this->mouseChildren = mouseChildren;
HXLINE( 747)		this->mouseEnabled = mouseEnabled;
HXLINE( 748)		this->pixelPerfect = pixelPerfect;
HXLINE( 749)		::Array< int > _hx_tmp;
HXDLIN( 749)		if (::hx::IsNull( mouseButtons )) {
HXLINE( 749)			_hx_tmp = ::Array_obj< int >::fromData( _hx_array_data_50751608_1,1);
            		}
            		else {
HXLINE( 749)			_hx_tmp = mouseButtons;
            		}
HXDLIN( 749)		this->mouseButtons = _hx_tmp;
            	}

Dynamic ObjectMouseData_obj::__CreateEmpty() { return new ObjectMouseData_obj; }

void *ObjectMouseData_obj::_hx_vtable = 0;

Dynamic ObjectMouseData_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ObjectMouseData_obj > _hx_result = new ObjectMouseData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8]);
	return _hx_result;
}

bool ObjectMouseData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x04286682;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_input_mouse__FlxMouseEventManager_ObjectMouseData__hx_flixel_util_IFlxDestroyable= {
	( void (::hx::Object::*)())&::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData_obj::destroy,
};

void *ObjectMouseData_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_input_mouse__FlxMouseEventManager_ObjectMouseData__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void ObjectMouseData_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_da4931f1149b180b_753_destroy)
HXLINE( 754)		this->object = null();
HXLINE( 755)		this->sprite = null();
HXLINE( 756)		this->onMouseDown = null();
HXLINE( 757)		this->onMouseUp = null();
HXLINE( 758)		this->onMouseClick = null();
HXLINE( 759)		this->onMouseDoubleClick = null();
HXLINE( 760)		this->onMouseOver = null();
HXLINE( 761)		this->onMouseOut = null();
HXLINE( 762)		this->onMouseMove = null();
HXLINE( 763)		this->onMouseWheel = null();
HXLINE( 764)		this->mouseButtons = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ObjectMouseData_obj,destroy,(void))


::hx::ObjectPtr< ObjectMouseData_obj > ObjectMouseData_obj::__new( ::Dynamic object, ::Dynamic onMouseDown, ::Dynamic onMouseUp, ::Dynamic onMouseOver, ::Dynamic onMouseOut,bool mouseChildren,bool mouseEnabled,bool pixelPerfect,::Array< int > mouseButtons) {
	::hx::ObjectPtr< ObjectMouseData_obj > __this = new ObjectMouseData_obj();
	__this->__construct(object,onMouseDown,onMouseUp,onMouseOver,onMouseOut,mouseChildren,mouseEnabled,pixelPerfect,mouseButtons);
	return __this;
}

::hx::ObjectPtr< ObjectMouseData_obj > ObjectMouseData_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic object, ::Dynamic onMouseDown, ::Dynamic onMouseUp, ::Dynamic onMouseOver, ::Dynamic onMouseOut,bool mouseChildren,bool mouseEnabled,bool pixelPerfect,::Array< int > mouseButtons) {
	ObjectMouseData_obj *__this = (ObjectMouseData_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ObjectMouseData_obj), true, "flixel.input.mouse._FlxMouseEventManager.ObjectMouseData"));
	*(void **)__this = ObjectMouseData_obj::_hx_vtable;
	__this->__construct(object,onMouseDown,onMouseUp,onMouseOver,onMouseOut,mouseChildren,mouseEnabled,pixelPerfect,mouseButtons);
	return __this;
}

ObjectMouseData_obj::ObjectMouseData_obj()
{
}

void ObjectMouseData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ObjectMouseData);
	HX_MARK_MEMBER_NAME(object,"object");
	HX_MARK_MEMBER_NAME(onMouseDown,"onMouseDown");
	HX_MARK_MEMBER_NAME(onMouseUp,"onMouseUp");
	HX_MARK_MEMBER_NAME(onMouseClick,"onMouseClick");
	HX_MARK_MEMBER_NAME(onMouseDoubleClick,"onMouseDoubleClick");
	HX_MARK_MEMBER_NAME(onMouseOver,"onMouseOver");
	HX_MARK_MEMBER_NAME(onMouseOut,"onMouseOut");
	HX_MARK_MEMBER_NAME(onMouseMove,"onMouseMove");
	HX_MARK_MEMBER_NAME(onMouseWheel,"onMouseWheel");
	HX_MARK_MEMBER_NAME(mouseChildren,"mouseChildren");
	HX_MARK_MEMBER_NAME(mouseEnabled,"mouseEnabled");
	HX_MARK_MEMBER_NAME(pixelPerfect,"pixelPerfect");
	HX_MARK_MEMBER_NAME(sprite,"sprite");
	HX_MARK_MEMBER_NAME(mouseButtons,"mouseButtons");
	HX_MARK_MEMBER_NAME(currentMouseButton,"currentMouseButton");
	HX_MARK_END_CLASS();
}

void ObjectMouseData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(object,"object");
	HX_VISIT_MEMBER_NAME(onMouseDown,"onMouseDown");
	HX_VISIT_MEMBER_NAME(onMouseUp,"onMouseUp");
	HX_VISIT_MEMBER_NAME(onMouseClick,"onMouseClick");
	HX_VISIT_MEMBER_NAME(onMouseDoubleClick,"onMouseDoubleClick");
	HX_VISIT_MEMBER_NAME(onMouseOver,"onMouseOver");
	HX_VISIT_MEMBER_NAME(onMouseOut,"onMouseOut");
	HX_VISIT_MEMBER_NAME(onMouseMove,"onMouseMove");
	HX_VISIT_MEMBER_NAME(onMouseWheel,"onMouseWheel");
	HX_VISIT_MEMBER_NAME(mouseChildren,"mouseChildren");
	HX_VISIT_MEMBER_NAME(mouseEnabled,"mouseEnabled");
	HX_VISIT_MEMBER_NAME(pixelPerfect,"pixelPerfect");
	HX_VISIT_MEMBER_NAME(sprite,"sprite");
	HX_VISIT_MEMBER_NAME(mouseButtons,"mouseButtons");
	HX_VISIT_MEMBER_NAME(currentMouseButton,"currentMouseButton");
}

::hx::Val ObjectMouseData_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { return ::hx::Val( object ); }
		if (HX_FIELD_EQ(inName,"sprite") ) { return ::hx::Val( sprite ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { return ::hx::Val( onMouseUp ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onMouseOut") ) { return ::hx::Val( onMouseOut ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return ::hx::Val( onMouseDown ); }
		if (HX_FIELD_EQ(inName,"onMouseOver") ) { return ::hx::Val( onMouseOver ); }
		if (HX_FIELD_EQ(inName,"onMouseMove") ) { return ::hx::Val( onMouseMove ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onMouseClick") ) { return ::hx::Val( onMouseClick ); }
		if (HX_FIELD_EQ(inName,"onMouseWheel") ) { return ::hx::Val( onMouseWheel ); }
		if (HX_FIELD_EQ(inName,"mouseEnabled") ) { return ::hx::Val( mouseEnabled ); }
		if (HX_FIELD_EQ(inName,"pixelPerfect") ) { return ::hx::Val( pixelPerfect ); }
		if (HX_FIELD_EQ(inName,"mouseButtons") ) { return ::hx::Val( mouseButtons ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { return ::hx::Val( mouseChildren ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onMouseDoubleClick") ) { return ::hx::Val( onMouseDoubleClick ); }
		if (HX_FIELD_EQ(inName,"currentMouseButton") ) { return ::hx::Val( currentMouseButton ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ObjectMouseData_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { object=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sprite") ) { sprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { onMouseUp=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onMouseOut") ) { onMouseOut=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { onMouseDown=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onMouseOver") ) { onMouseOver=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onMouseMove") ) { onMouseMove=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onMouseClick") ) { onMouseClick=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onMouseWheel") ) { onMouseWheel=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseEnabled") ) { mouseEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pixelPerfect") ) { pixelPerfect=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseButtons") ) { mouseButtons=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { mouseChildren=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onMouseDoubleClick") ) { onMouseDoubleClick=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentMouseButton") ) { currentMouseButton=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ObjectMouseData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("object",bf,7e,3f,15));
	outFields->push(HX_("mouseChildren",84,18,6b,ff));
	outFields->push(HX_("mouseEnabled",dc,54,d6,5f));
	outFields->push(HX_("pixelPerfect",27,23,90,64));
	outFields->push(HX_("sprite",05,dc,95,c3));
	outFields->push(HX_("mouseButtons",9c,a2,1a,ac));
	outFields->push(HX_("currentMouseButton",3e,7a,04,47));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ObjectMouseData_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(ObjectMouseData_obj,object),HX_("object",bf,7e,3f,15)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ObjectMouseData_obj,onMouseDown),HX_("onMouseDown",08,94,05,11)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ObjectMouseData_obj,onMouseUp),HX_("onMouseUp",81,ac,1d,98)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ObjectMouseData_obj,onMouseClick),HX_("onMouseClick",e2,11,6f,3e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ObjectMouseData_obj,onMouseDoubleClick),HX_("onMouseDoubleClick",91,c8,8d,b1)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ObjectMouseData_obj,onMouseOver),HX_("onMouseOver",fa,2c,50,18)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ObjectMouseData_obj,onMouseOut),HX_("onMouseOut",a8,bb,d4,81)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ObjectMouseData_obj,onMouseMove),HX_("onMouseMove",b7,7e,f8,16)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ObjectMouseData_obj,onMouseWheel),HX_("onMouseWheel",35,ca,ca,bf)},
	{::hx::fsBool,(int)offsetof(ObjectMouseData_obj,mouseChildren),HX_("mouseChildren",84,18,6b,ff)},
	{::hx::fsBool,(int)offsetof(ObjectMouseData_obj,mouseEnabled),HX_("mouseEnabled",dc,54,d6,5f)},
	{::hx::fsBool,(int)offsetof(ObjectMouseData_obj,pixelPerfect),HX_("pixelPerfect",27,23,90,64)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ObjectMouseData_obj,sprite),HX_("sprite",05,dc,95,c3)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(ObjectMouseData_obj,mouseButtons),HX_("mouseButtons",9c,a2,1a,ac)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ObjectMouseData_obj,currentMouseButton),HX_("currentMouseButton",3e,7a,04,47)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ObjectMouseData_obj_sStaticStorageInfo = 0;
#endif

static ::String ObjectMouseData_obj_sMemberFields[] = {
	HX_("object",bf,7e,3f,15),
	HX_("onMouseDown",08,94,05,11),
	HX_("onMouseUp",81,ac,1d,98),
	HX_("onMouseClick",e2,11,6f,3e),
	HX_("onMouseDoubleClick",91,c8,8d,b1),
	HX_("onMouseOver",fa,2c,50,18),
	HX_("onMouseOut",a8,bb,d4,81),
	HX_("onMouseMove",b7,7e,f8,16),
	HX_("onMouseWheel",35,ca,ca,bf),
	HX_("mouseChildren",84,18,6b,ff),
	HX_("mouseEnabled",dc,54,d6,5f),
	HX_("pixelPerfect",27,23,90,64),
	HX_("sprite",05,dc,95,c3),
	HX_("mouseButtons",9c,a2,1a,ac),
	HX_("currentMouseButton",3e,7a,04,47),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class ObjectMouseData_obj::__mClass;

void ObjectMouseData_obj::__register()
{
	ObjectMouseData_obj _hx_dummy;
	ObjectMouseData_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.input.mouse._FlxMouseEventManager.ObjectMouseData",08,16,75,50);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ObjectMouseData_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ObjectMouseData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ObjectMouseData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ObjectMouseData_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace input
} // end namespace mouse
} // end namespace _FlxMouseEventManager
