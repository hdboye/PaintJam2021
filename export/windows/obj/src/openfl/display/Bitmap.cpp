// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DOMRenderer
#include <openfl/display/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display__internal_CairoDisplayObject
#include <openfl/display/_internal/CairoDisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display__internal_Context3DBitmap
#include <openfl/display/_internal/Context3DBitmap.h>
#endif
#ifndef INCLUDED_openfl_display__internal_Context3DShape
#include <openfl/display/_internal/Context3DShape.h>
#endif
#ifndef INCLUDED_openfl_display__internal_DOMBitmap
#include <openfl/display/_internal/DOMBitmap.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f5857023424199a6_50_new,"openfl.display.Bitmap","new",0x8bc0314b,"openfl.display.Bitmap.new","openfl/display/Bitmap.hx",50,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_65___enterFrame,"openfl.display.Bitmap","__enterFrame",0x534728ca,"openfl.display.Bitmap.__enterFrame","openfl/display/Bitmap.hx",65,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_72___getBounds,"openfl.display.Bitmap","__getBounds",0x13081c76,"openfl.display.Bitmap.__getBounds","openfl/display/Bitmap.hx",72,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_90___hitTest,"openfl.display.Bitmap","__hitTest",0x80f61450,"openfl.display.Bitmap.__hitTest","openfl/display/Bitmap.hx",90,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_118___hitTestMask,"openfl.display.Bitmap","__hitTestMask",0x7acde95c,"openfl.display.Bitmap.__hitTestMask","openfl/display/Bitmap.hx",118,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_135___renderCairo,"openfl.display.Bitmap","__renderCairo",0x941372dd,"openfl.display.Bitmap.__renderCairo","openfl/display/Bitmap.hx",135,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_160___renderCairoMask,"openfl.display.Bitmap","__renderCairoMask",0xba721269,"openfl.display.Bitmap.__renderCairoMask","openfl/display/Bitmap.hx",160,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_164___renderCanvas,"openfl.display.Bitmap","__renderCanvas",0x00421ce3,"openfl.display.Bitmap.__renderCanvas","openfl/display/Bitmap.hx",164,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_187___renderCanvasMask,"openfl.display.Bitmap","__renderCanvasMask",0x68a5376f,"openfl.display.Bitmap.__renderCanvasMask","openfl/display/Bitmap.hx",187,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_191___renderDOM,"openfl.display.Bitmap","__renderDOM",0xfdebb997,"openfl.display.Bitmap.__renderDOM","openfl/display/Bitmap.hx",191,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_212___renderDOMClear,"openfl.display.Bitmap","__renderDOMClear",0xef620476,"openfl.display.Bitmap.__renderDOMClear","openfl/display/Bitmap.hx",212,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_216___renderGL,"openfl.display.Bitmap","__renderGL",0xbc428090,"openfl.display.Bitmap.__renderGL","openfl/display/Bitmap.hx",216,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_239___renderGLMask,"openfl.display.Bitmap","__renderGLMask",0x6c65759c,"openfl.display.Bitmap.__renderGLMask","openfl/display/Bitmap.hx",239,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_243___updateCacheBitmap,"openfl.display.Bitmap","__updateCacheBitmap",0xef053813,"openfl.display.Bitmap.__updateCacheBitmap","openfl/display/Bitmap.hx",243,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_257_get_bitmapData,"openfl.display.Bitmap","get_bitmapData",0x619f7ef7,"openfl.display.Bitmap.get_bitmapData","openfl/display/Bitmap.hx",257,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_261_set_bitmapData,"openfl.display.Bitmap","set_bitmapData",0x81bf676b,"openfl.display.Bitmap.set_bitmapData","openfl/display/Bitmap.hx",261,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_278_set_height,"openfl.display.Bitmap","set_height",0x5c7f7899,"openfl.display.Bitmap.set_height","openfl/display/Bitmap.hx",278,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_291_set_width,"openfl.display.Bitmap","set_width",0x0e856194,"openfl.display.Bitmap.set_width","openfl/display/Bitmap.hx",291,0x461b2743)
namespace openfl{
namespace display{

void Bitmap_obj::__construct( ::openfl::display::BitmapData bitmapData, ::Dynamic pixelSnapping,::hx::Null< bool >  __o_smoothing){
            		bool smoothing = __o_smoothing.Default(false);
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_50_new)
HXLINE(  51)		super::__construct();
HXLINE(  53)		this->_hx___bitmapData = bitmapData;
HXLINE(  54)		this->pixelSnapping = pixelSnapping;
HXLINE(  55)		this->smoothing = smoothing;
HXLINE(  57)		if (::hx::IsNull( pixelSnapping )) {
HXLINE(  59)			this->pixelSnapping = 1;
            		}
            	}

Dynamic Bitmap_obj::__CreateEmpty() { return new Bitmap_obj; }

void *Bitmap_obj::_hx_vtable = 0;

Dynamic Bitmap_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Bitmap_obj > _hx_result = new Bitmap_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Bitmap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4cc42801) {
		if (inClassId<=(int)0x0c89e854) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
		} else {
			return inClassId==(int)0x4cc42801;
		}
	} else {
		return inClassId==(int)0x6b353933;
	}
}

void Bitmap_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_65___enterFrame)
HXDLIN(  65)		bool _hx_tmp;
HXDLIN(  65)		bool _hx_tmp1;
HXDLIN(  65)		if (::hx::IsNotNull( this->_hx___bitmapData )) {
HXDLIN(  65)			_hx_tmp1 = ::hx::IsNotNull( this->_hx___bitmapData->image );
            		}
            		else {
HXDLIN(  65)			_hx_tmp1 = false;
            		}
HXDLIN(  65)		if (_hx_tmp1) {
HXDLIN(  65)			_hx_tmp = (this->_hx___bitmapData->image->version != this->_hx___imageVersion);
            		}
            		else {
HXDLIN(  65)			_hx_tmp = false;
            		}
HXDLIN(  65)		if (_hx_tmp) {
HXLINE(  67)			if (!(this->_hx___renderDirty)) {
HXLINE(  67)				this->_hx___renderDirty = true;
HXDLIN(  67)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


void Bitmap_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_72___getBounds)
HXLINE(  73)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(  74)		if (::hx::IsNotNull( this->_hx___bitmapData )) {
HXLINE(  76)			bounds->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(this->_hx___bitmapData->width) ),( (Float)(this->_hx___bitmapData->height) ));
            		}
            		else {
HXLINE(  80)			bounds->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
            		}
HXLINE(  83)		bounds->_hx___transform(bounds,matrix);
HXLINE(  84)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(  85)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


bool Bitmap_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_90___hitTest)
HXLINE(  91)		bool _hx_tmp;
HXDLIN(  91)		bool _hx_tmp1;
HXDLIN(  91)		if (hitObject->get_visible()) {
HXLINE(  91)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE(  91)			_hx_tmp1 = true;
            		}
HXDLIN(  91)		if (!(_hx_tmp1)) {
HXLINE(  91)			_hx_tmp = ::hx::IsNull( this->_hx___bitmapData );
            		}
            		else {
HXLINE(  91)			_hx_tmp = true;
            		}
HXDLIN(  91)		if (_hx_tmp) {
HXLINE(  91)			return false;
            		}
HXLINE(  92)		bool _hx_tmp2;
HXDLIN(  92)		if (::hx::IsNotNull( this->get_mask() )) {
HXLINE(  92)			_hx_tmp2 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE(  92)			_hx_tmp2 = false;
            		}
HXDLIN(  92)		if (_hx_tmp2) {
HXLINE(  92)			return false;
            		}
HXLINE(  94)		this->_hx___getRenderTransform();
HXLINE(  96)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(  96)		Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(  96)		Float px;
HXDLIN(  96)		if ((norm == 0)) {
HXLINE(  96)			px = -(_this->tx);
            		}
            		else {
HXLINE(  96)			px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE(  97)		 ::openfl::geom::Matrix _this1 = this->_hx___renderTransform;
HXDLIN(  97)		Float norm1 = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN(  97)		Float py;
HXDLIN(  97)		if ((norm1 == 0)) {
HXLINE(  97)			py = -(_this1->ty);
            		}
            		else {
HXLINE(  97)			py = ((((Float)1.0) / norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE(  99)		bool _hx_tmp3;
HXDLIN(  99)		bool _hx_tmp4;
HXDLIN(  99)		bool _hx_tmp5;
HXDLIN(  99)		if ((px > 0)) {
HXLINE(  99)			_hx_tmp5 = (py > 0);
            		}
            		else {
HXLINE(  99)			_hx_tmp5 = false;
            		}
HXDLIN(  99)		if (_hx_tmp5) {
HXLINE(  99)			_hx_tmp4 = (px <= this->_hx___bitmapData->width);
            		}
            		else {
HXLINE(  99)			_hx_tmp4 = false;
            		}
HXDLIN(  99)		if (_hx_tmp4) {
HXLINE(  99)			_hx_tmp3 = (py <= this->_hx___bitmapData->height);
            		}
            		else {
HXLINE(  99)			_hx_tmp3 = false;
            		}
HXDLIN(  99)		if (_hx_tmp3) {
HXLINE( 101)			bool _hx_tmp;
HXDLIN( 101)			if (::hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 101)				_hx_tmp = !(this->_hx___scrollRect->contains(px,py));
            			}
            			else {
HXLINE( 101)				_hx_tmp = false;
            			}
HXDLIN( 101)			if (_hx_tmp) {
HXLINE( 103)				return false;
            			}
HXLINE( 106)			bool _hx_tmp1;
HXDLIN( 106)			if (::hx::IsNotNull( stack )) {
HXLINE( 106)				_hx_tmp1 = !(interactiveOnly);
            			}
            			else {
HXLINE( 106)				_hx_tmp1 = false;
            			}
HXDLIN( 106)			if (_hx_tmp1) {
HXLINE( 108)				stack->push(hitObject);
            			}
HXLINE( 111)			return true;
            		}
HXLINE( 114)		return false;
            	}


bool Bitmap_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_118___hitTestMask)
HXLINE( 119)		if (::hx::IsNull( this->_hx___bitmapData )) {
HXLINE( 119)			return false;
            		}
HXLINE( 121)		this->_hx___getRenderTransform();
HXLINE( 123)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN( 123)		Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN( 123)		Float px;
HXDLIN( 123)		if ((norm == 0)) {
HXLINE( 123)			px = -(_this->tx);
            		}
            		else {
HXLINE( 123)			px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE( 124)		 ::openfl::geom::Matrix _this1 = this->_hx___renderTransform;
HXDLIN( 124)		Float norm1 = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN( 124)		Float py;
HXDLIN( 124)		if ((norm1 == 0)) {
HXLINE( 124)			py = -(_this1->ty);
            		}
            		else {
HXLINE( 124)			py = ((((Float)1.0) / norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE( 126)		bool _hx_tmp;
HXDLIN( 126)		bool _hx_tmp1;
HXDLIN( 126)		bool _hx_tmp2;
HXDLIN( 126)		if ((px > 0)) {
HXLINE( 126)			_hx_tmp2 = (py > 0);
            		}
            		else {
HXLINE( 126)			_hx_tmp2 = false;
            		}
HXDLIN( 126)		if (_hx_tmp2) {
HXLINE( 126)			_hx_tmp1 = (px <= this->_hx___bitmapData->width);
            		}
            		else {
HXLINE( 126)			_hx_tmp1 = false;
            		}
HXDLIN( 126)		if (_hx_tmp1) {
HXLINE( 126)			_hx_tmp = (py <= this->_hx___bitmapData->height);
            		}
            		else {
HXLINE( 126)			_hx_tmp = false;
            		}
HXDLIN( 126)		if (_hx_tmp) {
HXLINE( 128)			return true;
            		}
HXLINE( 131)		return false;
            	}


void Bitmap_obj::_hx___renderCairo( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_135___renderCairo)
HXLINE( 137)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE( 139)		bool _hx_tmp;
HXDLIN( 139)		if (::hx::IsNotNull( this->_hx___bitmapData )) {
HXLINE( 139)			_hx_tmp = ::hx::IsNotNull( this->_hx___bitmapData->image );
            		}
            		else {
HXLINE( 139)			_hx_tmp = false;
            		}
HXDLIN( 139)		if (_hx_tmp) {
HXLINE( 141)			this->_hx___imageVersion = this->_hx___bitmapData->image->version;
            		}
HXLINE( 144)		bool _hx_tmp1;
HXDLIN( 144)		if (::hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 144)			_hx_tmp1 = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 144)			_hx_tmp1 = false;
            		}
HXDLIN( 144)		if (_hx_tmp1) {
HXLINE( 146)			 ::openfl::display::Bitmap bitmap = this->_hx___cacheBitmap;
HXDLIN( 146)			if (bitmap->_hx___renderable) {
HXLINE( 146)				Float alpha = renderer->_hx___getAlpha(bitmap->_hx___worldAlpha);
HXDLIN( 146)				bool _hx_tmp;
HXDLIN( 146)				bool _hx_tmp1;
HXDLIN( 146)				if ((alpha > 0)) {
HXLINE( 146)					_hx_tmp1 = ::hx::IsNotNull( bitmap->_hx___bitmapData );
            				}
            				else {
HXLINE( 146)					_hx_tmp1 = false;
            				}
HXDLIN( 146)				if (_hx_tmp1) {
HXLINE( 146)					_hx_tmp = bitmap->_hx___bitmapData->_hx___isValid;
            				}
            				else {
HXLINE( 146)					_hx_tmp = false;
            				}
HXDLIN( 146)				if (_hx_tmp) {
HXLINE( 146)					 ::lime::graphics::cairo::Cairo cairo = renderer->cairo;
HXDLIN( 146)					renderer->_hx___setBlendMode(bitmap->_hx___worldBlendMode);
HXDLIN( 146)					renderer->_hx___pushMaskObject(bitmap,null());
HXDLIN( 146)					renderer->applyMatrix(bitmap->_hx___renderTransform,cairo);
HXDLIN( 146)					 ::Dynamic surface = bitmap->_hx___bitmapData->getSurface();
HXDLIN( 146)					if (::hx::IsNotNull( surface )) {
HXLINE( 146)						 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXDLIN( 146)						int _hx_tmp;
HXDLIN( 146)						bool _hx_tmp1;
HXDLIN( 146)						if (renderer->_hx___allowSmoothing) {
HXLINE( 146)							_hx_tmp1 = bitmap->smoothing;
            						}
            						else {
HXLINE( 146)							_hx_tmp1 = false;
            						}
HXDLIN( 146)						if (_hx_tmp1) {
HXLINE( 146)							_hx_tmp = 1;
            						}
            						else {
HXLINE( 146)							_hx_tmp = 3;
            						}
HXDLIN( 146)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp);
HXDLIN( 146)						cairo->set_source(pattern);
HXDLIN( 146)						if ((alpha == 1)) {
HXLINE( 146)							cairo->paint();
            						}
            						else {
HXLINE( 146)							cairo->paintWithAlpha(alpha);
            						}
            					}
HXDLIN( 146)					renderer->_hx___popMaskObject(bitmap,null());
HXDLIN( 146)					renderer->_hx___setBlendMode(10);
            				}
            			}
            		}
            		else {
HXLINE( 150)			::openfl::display::_internal::CairoDisplayObject_obj::render(::hx::ObjectPtr<OBJ_>(this),renderer);
HXLINE( 151)			if (this->_hx___renderable) {
HXLINE( 151)				Float alpha = renderer->_hx___getAlpha(this->_hx___worldAlpha);
HXDLIN( 151)				bool _hx_tmp;
HXDLIN( 151)				bool _hx_tmp1;
HXDLIN( 151)				if ((alpha > 0)) {
HXLINE( 151)					_hx_tmp1 = ::hx::IsNotNull( this->_hx___bitmapData );
            				}
            				else {
HXLINE( 151)					_hx_tmp1 = false;
            				}
HXDLIN( 151)				if (_hx_tmp1) {
HXLINE( 151)					_hx_tmp = this->_hx___bitmapData->_hx___isValid;
            				}
            				else {
HXLINE( 151)					_hx_tmp = false;
            				}
HXDLIN( 151)				if (_hx_tmp) {
HXLINE( 151)					 ::lime::graphics::cairo::Cairo cairo = renderer->cairo;
HXDLIN( 151)					renderer->_hx___setBlendMode(this->_hx___worldBlendMode);
HXDLIN( 151)					renderer->_hx___pushMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 151)					renderer->applyMatrix(this->_hx___renderTransform,cairo);
HXDLIN( 151)					 ::Dynamic surface = this->_hx___bitmapData->getSurface();
HXDLIN( 151)					if (::hx::IsNotNull( surface )) {
HXLINE( 151)						 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXDLIN( 151)						int _hx_tmp;
HXDLIN( 151)						bool _hx_tmp1;
HXDLIN( 151)						if (renderer->_hx___allowSmoothing) {
HXLINE( 151)							_hx_tmp1 = this->smoothing;
            						}
            						else {
HXLINE( 151)							_hx_tmp1 = false;
            						}
HXDLIN( 151)						if (_hx_tmp1) {
HXLINE( 151)							_hx_tmp = 1;
            						}
            						else {
HXLINE( 151)							_hx_tmp = 3;
            						}
HXDLIN( 151)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp);
HXDLIN( 151)						cairo->set_source(pattern);
HXDLIN( 151)						if ((alpha == 1)) {
HXLINE( 151)							cairo->paint();
            						}
            						else {
HXLINE( 151)							cairo->paintWithAlpha(alpha);
            						}
            					}
HXDLIN( 151)					renderer->_hx___popMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 151)					renderer->_hx___setBlendMode(10);
            				}
            			}
            		}
HXLINE( 154)		this->_hx___renderEvent(renderer);
            	}


void Bitmap_obj::_hx___renderCairoMask( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_160___renderCairoMask)
HXDLIN( 160)		 ::lime::graphics::cairo::Cairo renderer1 = renderer->cairo;
HXDLIN( 160)		Float _hx_tmp = this->get_width();
HXDLIN( 160)		renderer1->rectangle(( (Float)(0) ),( (Float)(0) ),_hx_tmp,this->get_height());
            	}


void Bitmap_obj::_hx___renderCanvas( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_164___renderCanvas)
HXLINE( 165)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE( 167)		bool _hx_tmp;
HXDLIN( 167)		if (::hx::IsNotNull( this->_hx___bitmapData )) {
HXLINE( 167)			_hx_tmp = ::hx::IsNotNull( this->_hx___bitmapData->image );
            		}
            		else {
HXLINE( 167)			_hx_tmp = false;
            		}
HXDLIN( 167)		if (_hx_tmp) {
HXLINE( 169)			this->_hx___imageVersion = this->_hx___bitmapData->image->version;
            		}
HXLINE( 172)		bool _hx_tmp1;
HXDLIN( 172)		if (::hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 172)			_hx_tmp1 = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 172)			_hx_tmp1 = false;
            		}
HXLINE( 182)		this->_hx___renderEvent(renderer);
            	}


void Bitmap_obj::_hx___renderCanvasMask( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_187___renderCanvasMask)
HXDLIN( 187)		 ::Dynamic renderer1 =  ::Dynamic(renderer->context->__Field(HX_("rect",24,4d,a7,4b),::hx::paccDynamic));
HXDLIN( 187)		Float _hx_tmp = this->get_width();
HXDLIN( 187)		renderer1(0,0,_hx_tmp,this->get_height());
            	}


void Bitmap_obj::_hx___renderDOM( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_191___renderDOM)
HXLINE( 192)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE( 194)		bool _hx_tmp;
HXDLIN( 194)		if (::hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 194)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 194)			_hx_tmp = false;
            		}
HXDLIN( 194)		if (_hx_tmp) {
HXLINE( 196)			this->_hx___renderDOMClear(renderer);
HXLINE( 197)			this->_hx___cacheBitmap->stage = this->stage;
            		}
HXLINE( 207)		this->_hx___renderEvent(renderer);
            	}


void Bitmap_obj::_hx___renderDOMClear( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_212___renderDOMClear)
HXDLIN( 212)		::openfl::display::_internal::DOMBitmap_obj::clear(::hx::ObjectPtr<OBJ_>(this),renderer);
            	}


void Bitmap_obj::_hx___renderGL( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_216___renderGL)
HXLINE( 217)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE( 219)		bool _hx_tmp;
HXDLIN( 219)		if (::hx::IsNotNull( this->_hx___bitmapData )) {
HXLINE( 219)			_hx_tmp = ::hx::IsNotNull( this->_hx___bitmapData->image );
            		}
            		else {
HXLINE( 219)			_hx_tmp = false;
            		}
HXDLIN( 219)		if (_hx_tmp) {
HXLINE( 221)			this->_hx___imageVersion = this->_hx___bitmapData->image->version;
            		}
HXLINE( 224)		bool _hx_tmp1;
HXDLIN( 224)		if (::hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 224)			_hx_tmp1 = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 224)			_hx_tmp1 = false;
            		}
HXDLIN( 224)		if (_hx_tmp1) {
HXLINE( 226)			::openfl::display::_internal::Context3DBitmap_obj::render(this->_hx___cacheBitmap,renderer);
            		}
            		else {
HXLINE( 230)			bool _hx_tmp;
HXDLIN( 230)			if (::hx::IsNull( this->opaqueBackground )) {
HXLINE( 230)				_hx_tmp = ::hx::IsNull( this->_hx___graphics );
            			}
            			else {
HXLINE( 230)				_hx_tmp = false;
            			}
HXDLIN( 230)			if (!(_hx_tmp)) {
HXLINE( 230)				bool _hx_tmp;
HXDLIN( 230)				if (this->_hx___renderable) {
HXLINE( 230)					_hx_tmp = (this->_hx___worldAlpha <= 0);
            				}
            				else {
HXLINE( 230)					_hx_tmp = true;
            				}
HXDLIN( 230)				if (!(_hx_tmp)) {
HXLINE( 230)					bool _hx_tmp;
HXDLIN( 230)					bool _hx_tmp1;
HXDLIN( 230)					bool _hx_tmp2;
HXDLIN( 230)					if (::hx::IsNotNull( this->opaqueBackground )) {
HXLINE( 230)						_hx_tmp2 = !(this->_hx___isCacheBitmapRender);
            					}
            					else {
HXLINE( 230)						_hx_tmp2 = false;
            					}
HXDLIN( 230)					if (_hx_tmp2) {
HXLINE( 230)						_hx_tmp1 = (this->get_width() > 0);
            					}
            					else {
HXLINE( 230)						_hx_tmp1 = false;
            					}
HXDLIN( 230)					if (_hx_tmp1) {
HXLINE( 230)						_hx_tmp = (this->get_height() > 0);
            					}
            					else {
HXLINE( 230)						_hx_tmp = false;
            					}
HXDLIN( 230)					if (_hx_tmp) {
HXLINE( 230)						renderer->_hx___setBlendMode(this->_hx___worldBlendMode);
HXDLIN( 230)						renderer->_hx___pushMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 230)						 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXDLIN( 230)						 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXDLIN( 230)						Float _hx_tmp = this->get_width();
HXDLIN( 230)						rect->setTo(( (Float)(0) ),( (Float)(0) ),_hx_tmp,this->get_height());
HXDLIN( 230)						renderer->_hx___pushMaskRect(rect,this->_hx___renderTransform);
HXDLIN( 230)						int color = ( (int)(this->opaqueBackground) );
HXDLIN( 230)						context->clear((( (Float)((::hx::UShr(color,16) & 255)) ) / ( (Float)(255) )),(( (Float)((::hx::UShr(color,8) & 255)) ) / ( (Float)(255) )),(( (Float)((color & 255)) ) / ( (Float)(255) )),1,0,0,1);
HXDLIN( 230)						renderer->_hx___popMaskRect();
HXDLIN( 230)						renderer->_hx___popMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 230)						::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            					}
HXDLIN( 230)					if (::hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 230)						::openfl::display::_internal::Context3DShape_obj::render(::hx::ObjectPtr<OBJ_>(this),renderer);
            					}
            				}
            			}
HXLINE( 231)			::openfl::display::_internal::Context3DBitmap_obj::render(::hx::ObjectPtr<OBJ_>(this),renderer);
            		}
HXLINE( 234)		this->_hx___renderEvent(renderer);
            	}


void Bitmap_obj::_hx___renderGLMask( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_239___renderGLMask)
HXDLIN( 239)		::openfl::display::_internal::Context3DBitmap_obj::renderMask(::hx::ObjectPtr<OBJ_>(this),renderer);
            	}


bool Bitmap_obj::_hx___updateCacheBitmap( ::openfl::display::DisplayObjectRenderer renderer,bool force){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_243___updateCacheBitmap)
HXLINE( 247)		bool _hx_tmp;
HXDLIN( 247)		if (::hx::IsNotNull( this->_hx___bitmapData )) {
HXLINE( 247)			bool _hx_tmp1;
HXDLIN( 247)			if (::hx::IsNull( this->_hx___filters )) {
HXLINE( 247)				_hx_tmp1 = (renderer->_hx___type == HX_("opengl",6f,64,94,21));
            			}
            			else {
HXLINE( 247)				_hx_tmp1 = false;
            			}
HXDLIN( 247)			if (_hx_tmp1) {
HXLINE( 247)				_hx_tmp = ::hx::IsNull( this->_hx___cacheBitmap );
            			}
            			else {
HXLINE( 247)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 247)			_hx_tmp = true;
            		}
HXDLIN( 247)		if (_hx_tmp) {
HXLINE( 247)			return false;
            		}
HXLINE( 248)		bool _hx_tmp1;
HXDLIN( 248)		if (::hx::IsNotNull( this->_hx___bitmapData->image )) {
HXLINE( 248)			_hx_tmp1 = (this->_hx___bitmapData->image->version != this->_hx___imageVersion);
            		}
            		else {
HXLINE( 248)			_hx_tmp1 = false;
            		}
HXDLIN( 248)		return this->super::_hx___updateCacheBitmap(renderer,_hx_tmp1);
            	}


 ::openfl::display::BitmapData Bitmap_obj::get_bitmapData(){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_257_get_bitmapData)
HXDLIN( 257)		return this->_hx___bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bitmap_obj,get_bitmapData,return )

 ::openfl::display::BitmapData Bitmap_obj::set_bitmapData( ::openfl::display::BitmapData value){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_261_set_bitmapData)
HXLINE( 262)		this->_hx___bitmapData = value;
HXLINE( 263)		this->smoothing = false;
HXLINE( 265)		if (!(this->_hx___renderDirty)) {
HXLINE( 265)			this->_hx___renderDirty = true;
HXDLIN( 265)			this->_hx___setParentRenderDirty();
            		}
HXLINE( 267)		bool _hx_tmp = ::hx::IsNotNull( this->_hx___filters );
HXLINE( 272)		this->_hx___imageVersion = -1;
HXLINE( 274)		return this->_hx___bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bitmap_obj,set_bitmapData,return )

Float Bitmap_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_278_set_height)
HXLINE( 279)		if (::hx::IsNotNull( this->_hx___bitmapData )) {
HXLINE( 281)			this->set_scaleY((value / ( (Float)(this->_hx___bitmapData->height) )));
            		}
            		else {
HXLINE( 285)			this->set_scaleY(( (Float)(0) ));
            		}
HXLINE( 287)		return value;
            	}


Float Bitmap_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_291_set_width)
HXLINE( 292)		if (::hx::IsNotNull( this->_hx___bitmapData )) {
HXLINE( 294)			this->set_scaleX((value / ( (Float)(this->_hx___bitmapData->width) )));
            		}
            		else {
HXLINE( 298)			this->set_scaleX(( (Float)(0) ));
            		}
HXLINE( 300)		return value;
            	}



::hx::ObjectPtr< Bitmap_obj > Bitmap_obj::__new( ::openfl::display::BitmapData bitmapData, ::Dynamic pixelSnapping,::hx::Null< bool >  __o_smoothing) {
	::hx::ObjectPtr< Bitmap_obj > __this = new Bitmap_obj();
	__this->__construct(bitmapData,pixelSnapping,__o_smoothing);
	return __this;
}

::hx::ObjectPtr< Bitmap_obj > Bitmap_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::display::BitmapData bitmapData, ::Dynamic pixelSnapping,::hx::Null< bool >  __o_smoothing) {
	Bitmap_obj *__this = (Bitmap_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Bitmap_obj), true, "openfl.display.Bitmap"));
	*(void **)__this = Bitmap_obj::_hx_vtable;
	__this->__construct(bitmapData,pixelSnapping,__o_smoothing);
	return __this;
}

Bitmap_obj::Bitmap_obj()
{
}

void Bitmap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Bitmap);
	HX_MARK_MEMBER_NAME(pixelSnapping,"pixelSnapping");
	HX_MARK_MEMBER_NAME(smoothing,"smoothing");
	HX_MARK_MEMBER_NAME(_hx___bitmapData,"__bitmapData");
	HX_MARK_MEMBER_NAME(_hx___imageVersion,"__imageVersion");
	 ::openfl::display::DisplayObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Bitmap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pixelSnapping,"pixelSnapping");
	HX_VISIT_MEMBER_NAME(smoothing,"smoothing");
	HX_VISIT_MEMBER_NAME(_hx___bitmapData,"__bitmapData");
	HX_VISIT_MEMBER_NAME(_hx___imageVersion,"__imageVersion");
	 ::openfl::display::DisplayObject_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Bitmap_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"smoothing") ) { return ::hx::Val( smoothing ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return ::hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return ::hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapData") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_bitmapData() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return ::hx::Val( _hx___renderGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return ::hx::Val( set_height_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return ::hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return ::hx::Val( _hx___renderDOM_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bitmapData") ) { return ::hx::Val( _hx___bitmapData ); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return ::hx::Val( _hx___enterFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pixelSnapping") ) { return ::hx::Val( pixelSnapping ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return ::hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return ::hx::Val( _hx___renderCairo_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__imageVersion") ) { return ::hx::Val( _hx___imageVersion ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return ::hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return ::hx::Val( _hx___renderGLMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bitmapData") ) { return ::hx::Val( get_bitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bitmapData") ) { return ::hx::Val( set_bitmapData_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__renderDOMClear") ) { return ::hx::Val( _hx___renderDOMClear_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return ::hx::Val( _hx___renderCairoMask_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return ::hx::Val( _hx___renderCanvasMask_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__updateCacheBitmap") ) { return ::hx::Val( _hx___updateCacheBitmap_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Bitmap_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"smoothing") ) { smoothing=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapData") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_bitmapData(inValue.Cast<  ::openfl::display::BitmapData >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bitmapData") ) { _hx___bitmapData=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pixelSnapping") ) { pixelSnapping=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__imageVersion") ) { _hx___imageVersion=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Bitmap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bitmapData",b9,b5,c0,33));
	outFields->push(HX_("pixelSnapping",62,ae,a1,b8));
	outFields->push(HX_("smoothing",74,d5,e1,95));
	outFields->push(HX_("__bitmapData",d9,30,54,6c));
	outFields->push(HX_("__imageVersion",1d,e4,7a,8d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Bitmap_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Bitmap_obj,pixelSnapping),HX_("pixelSnapping",62,ae,a1,b8)},
	{::hx::fsBool,(int)offsetof(Bitmap_obj,smoothing),HX_("smoothing",74,d5,e1,95)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(Bitmap_obj,_hx___bitmapData),HX_("__bitmapData",d9,30,54,6c)},
	{::hx::fsInt,(int)offsetof(Bitmap_obj,_hx___imageVersion),HX_("__imageVersion",1d,e4,7a,8d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Bitmap_obj_sStaticStorageInfo = 0;
#endif

static ::String Bitmap_obj_sMemberFields[] = {
	HX_("pixelSnapping",62,ae,a1,b8),
	HX_("smoothing",74,d5,e1,95),
	HX_("__bitmapData",d9,30,54,6c),
	HX_("__imageVersion",1d,e4,7a,8d),
	HX_("__enterFrame",15,7f,e3,3a),
	HX_("__getBounds",8b,58,a0,10),
	HX_("__hitTest",25,b1,cd,63),
	HX_("__hitTestMask",b1,14,fd,3b),
	HX_("__renderCairo",32,9e,42,55),
	HX_("__renderCairoMask",3e,0c,22,6b),
	HX_("__renderCanvas",ee,db,58,48),
	HX_("__renderCanvasMask",fa,d7,ef,51),
	HX_("__renderDOM",ac,f5,83,fb),
	HX_("__renderDOMClear",41,dc,ee,79),
	HX_("__renderGL",1b,1e,14,56),
	HX_("__renderGLMask",a7,34,7c,b4),
	HX_("__updateCacheBitmap",28,11,07,27),
	HX_("get_bitmapData",02,3e,b6,a9),
	HX_("set_bitmapData",76,26,d6,c9),
	HX_("set_height",24,16,51,f6),
	HX_("set_width",69,fe,5c,f1),
	::String(null()) };

::hx::Class Bitmap_obj::__mClass;

void Bitmap_obj::__register()
{
	Bitmap_obj _hx_dummy;
	Bitmap_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.display.Bitmap",d9,2f,4d,7b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Bitmap_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Bitmap_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Bitmap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Bitmap_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
