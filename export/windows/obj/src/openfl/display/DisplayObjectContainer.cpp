// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DOMRenderer
#include <openfl/display/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display__internal_CairoGraphics
#include <openfl/display/_internal/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl_display__internal_CanvasGraphics
#include <openfl/display/_internal/CanvasGraphics.h>
#endif
#ifndef INCLUDED_openfl_display__internal_Context3DShape
#include <openfl/display/_internal/Context3DShape.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_RangeError
#include <openfl/errors/RangeError.h>
#endif
#ifndef INCLUDED_openfl_errors_TypeError
#include <openfl/errors/TypeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d11618aadd936e00_46_new,"openfl.display.DisplayObjectContainer","new",0x4362e03c,"openfl.display.DisplayObjectContainer.new","openfl/display/DisplayObjectContainer.hx",46,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_58_addChild,"openfl.display.DisplayObjectContainer","addChild",0x5694c25f,"openfl.display.DisplayObjectContainer.addChild","openfl/display/DisplayObjectContainer.hx",58,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_62_addChildAt,"openfl.display.DisplayObjectContainer","addChildAt",0xb7119132,"openfl.display.DisplayObjectContainer.addChildAt","openfl/display/DisplayObjectContainer.hx",62,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_152_areInaccessibleObjectsUnderPoint,"openfl.display.DisplayObjectContainer","areInaccessibleObjectsUnderPoint",0x2380e0e1,"openfl.display.DisplayObjectContainer.areInaccessibleObjectsUnderPoint","openfl/display/DisplayObjectContainer.hx",152,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_156_contains,"openfl.display.DisplayObjectContainer","contains",0xc3f94cc3,"openfl.display.DisplayObjectContainer.contains","openfl/display/DisplayObjectContainer.hx",156,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_166_getChildAt,"openfl.display.DisplayObjectContainer","getChildAt",0x9ee8eb5d,"openfl.display.DisplayObjectContainer.getChildAt","openfl/display/DisplayObjectContainer.hx",166,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_176_getChildByName,"openfl.display.DisplayObjectContainer","getChildByName",0x64b33f2c,"openfl.display.DisplayObjectContainer.getChildByName","openfl/display/DisplayObjectContainer.hx",176,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_186_getChildIndex,"openfl.display.DisplayObjectContainer","getChildIndex",0xcc3e62e8,"openfl.display.DisplayObjectContainer.getChildIndex","openfl/display/DisplayObjectContainer.hx",186,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_196_getObjectsUnderPoint,"openfl.display.DisplayObjectContainer","getObjectsUnderPoint",0x85c6693a,"openfl.display.DisplayObjectContainer.getObjectsUnderPoint","openfl/display/DisplayObjectContainer.hx",196,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_204_removeChild,"openfl.display.DisplayObjectContainer","removeChild",0x1a99d294,"openfl.display.DisplayObjectContainer.removeChild","openfl/display/DisplayObjectContainer.hx",204,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_237_removeChildAt,"openfl.display.DisplayObjectContainer","removeChildAt",0x52a2d8a7,"openfl.display.DisplayObjectContainer.removeChildAt","openfl/display/DisplayObjectContainer.hx",237,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_247_removeChildren,"openfl.display.DisplayObjectContainer","removeChildren",0xfbffdb47,"openfl.display.DisplayObjectContainer.removeChildren","openfl/display/DisplayObjectContainer.hx",247,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_276_resolve,"openfl.display.DisplayObjectContainer","resolve",0x8cca40c8,"openfl.display.DisplayObjectContainer.resolve","openfl/display/DisplayObjectContainer.hx",276,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_292_setChildIndex,"openfl.display.DisplayObjectContainer","setChildIndex",0x114444f4,"openfl.display.DisplayObjectContainer.setChildIndex","openfl/display/DisplayObjectContainer.hx",292,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_301_stopAllMovieClips,"openfl.display.DisplayObjectContainer","stopAllMovieClips",0x46e0f9ce,"openfl.display.DisplayObjectContainer.stopAllMovieClips","openfl/display/DisplayObjectContainer.hx",301,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_306_swapChildren,"openfl.display.DisplayObjectContainer","swapChildren",0xe0695f96,"openfl.display.DisplayObjectContainer.swapChildren","openfl/display/DisplayObjectContainer.hx",306,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_319_swapChildrenAt,"openfl.display.DisplayObjectContainer","swapChildrenAt",0xd5312a29,"openfl.display.DisplayObjectContainer.swapChildrenAt","openfl/display/DisplayObjectContainer.hx",319,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_328___cleanup,"openfl.display.DisplayObjectContainer","__cleanup",0x2346b9e0,"openfl.display.DisplayObjectContainer.__cleanup","openfl/display/DisplayObjectContainer.hx",328,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_340___cleanupRemovedChildren,"openfl.display.DisplayObjectContainer","__cleanupRemovedChildren",0x4395feff,"openfl.display.DisplayObjectContainer.__cleanupRemovedChildren","openfl/display/DisplayObjectContainer.hx",340,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_354___dispatchChildren,"openfl.display.DisplayObjectContainer","__dispatchChildren",0x7a91a8dd,"openfl.display.DisplayObjectContainer.__dispatchChildren","openfl/display/DisplayObjectContainer.hx",354,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_372___enterFrame,"openfl.display.DisplayObjectContainer","__enterFrame",0x3af993b9,"openfl.display.DisplayObjectContainer.__enterFrame","openfl/display/DisplayObjectContainer.hx",372,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_379___getBounds,"openfl.display.DisplayObjectContainer","__getBounds",0xe74ca467,"openfl.display.DisplayObjectContainer.__getBounds","openfl/display/DisplayObjectContainer.hx",379,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_399___getFilterBounds,"openfl.display.DisplayObjectContainer","__getFilterBounds",0xbea2d3bf,"openfl.display.DisplayObjectContainer.__getFilterBounds","openfl/display/DisplayObjectContainer.hx",399,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_420___getRenderBounds,"openfl.display.DisplayObjectContainer","__getRenderBounds",0x21a0a9dd,"openfl.display.DisplayObjectContainer.__getRenderBounds","openfl/display/DisplayObjectContainer.hx",420,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_449___hitTest,"openfl.display.DisplayObjectContainer","__hitTest",0x5a840e01,"openfl.display.DisplayObjectContainer.__hitTest","openfl/display/DisplayObjectContainer.hx",449,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_538___hitTestMask,"openfl.display.DisplayObjectContainer","__hitTestMask",0x4f390f8d,"openfl.display.DisplayObjectContainer.__hitTestMask","openfl/display/DisplayObjectContainer.hx",538,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_553___readGraphicsData,"openfl.display.DisplayObjectContainer","__readGraphicsData",0x782e37cf,"openfl.display.DisplayObjectContainer.__readGraphicsData","openfl/display/DisplayObjectContainer.hx",553,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_566___renderCairo,"openfl.display.DisplayObjectContainer","__renderCairo",0x687e990e,"openfl.display.DisplayObjectContainer.__renderCairo","openfl/display/DisplayObjectContainer.hx",566,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_601___renderCairoMask,"openfl.display.DisplayObjectContainer","__renderCairoMask",0x110aa51a,"openfl.display.DisplayObjectContainer.__renderCairoMask","openfl/display/DisplayObjectContainer.hx",601,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_618___renderCanvas,"openfl.display.DisplayObjectContainer","__renderCanvas",0x09986192,"openfl.display.DisplayObjectContainer.__renderCanvas","openfl/display/DisplayObjectContainer.hx",618,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_653___renderCanvasMask,"openfl.display.DisplayObjectContainer","__renderCanvasMask",0xd78cff9e,"openfl.display.DisplayObjectContainer.__renderCanvasMask","openfl/display/DisplayObjectContainer.hx",653,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_668___renderDOM,"openfl.display.DisplayObjectContainer","__renderDOM",0xd2304188,"openfl.display.DisplayObjectContainer.__renderDOM","openfl/display/DisplayObjectContainer.hx",668,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_707___renderDOMClear,"openfl.display.DisplayObjectContainer","__renderDOMClear",0xae5612e5,"openfl.display.DisplayObjectContainer.__renderDOMClear","openfl/display/DisplayObjectContainer.hx",707,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_725___renderGL,"openfl.display.DisplayObjectContainer","__renderGL",0x3eef01bf,"openfl.display.DisplayObjectContainer.__renderGL","openfl/display/DisplayObjectContainer.hx",725,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_766___renderGLMask,"openfl.display.DisplayObjectContainer","__renderGLMask",0x75bbba4b,"openfl.display.DisplayObjectContainer.__renderGLMask","openfl/display/DisplayObjectContainer.hx",766,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_782___setStageReference,"openfl.display.DisplayObjectContainer","__setStageReference",0x58cb6d2b,"openfl.display.DisplayObjectContainer.__setStageReference","openfl/display/DisplayObjectContainer.hx",782,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_796___setWorldTransformInvalid,"openfl.display.DisplayObjectContainer","__setWorldTransformInvalid",0xa8fd351f,"openfl.display.DisplayObjectContainer.__setWorldTransformInvalid","openfl/display/DisplayObjectContainer.hx",796,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_811___shouldCacheHardware,"openfl.display.DisplayObjectContainer","__shouldCacheHardware",0xd831e693,"openfl.display.DisplayObjectContainer.__shouldCacheHardware","openfl/display/DisplayObjectContainer.hx",811,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_830___stopAllMovieClips,"openfl.display.DisplayObjectContainer","__stopAllMovieClips",0xb7ce11ae,"openfl.display.DisplayObjectContainer.__stopAllMovieClips","openfl/display/DisplayObjectContainer.hx",830,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_837___tabTest,"openfl.display.DisplayObjectContainer","__tabTest",0xbd744b03,"openfl.display.DisplayObjectContainer.__tabTest","openfl/display/DisplayObjectContainer.hx",837,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_858___update,"openfl.display.DisplayObjectContainer","__update",0xc6b2e3cd,"openfl.display.DisplayObjectContainer.__update","openfl/display/DisplayObjectContainer.hx",858,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_873_get_numChildren,"openfl.display.DisplayObjectContainer","get_numChildren",0x73b78b18,"openfl.display.DisplayObjectContainer.get_numChildren","openfl/display/DisplayObjectContainer.hx",873,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_878_get_tabChildren,"openfl.display.DisplayObjectContainer","get_tabChildren",0x62bd2e27,"openfl.display.DisplayObjectContainer.get_tabChildren","openfl/display/DisplayObjectContainer.hx",878,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_882_set_tabChildren,"openfl.display.DisplayObjectContainer","set_tabChildren",0x5e88ab33,"openfl.display.DisplayObjectContainer.set_tabChildren","openfl/display/DisplayObjectContainer.hx",882,0x5f4d3d72)
namespace openfl{
namespace display{

void DisplayObjectContainer_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_46_new)
HXLINE(  47)		super::__construct();
HXLINE(  49)		this->mouseChildren = true;
HXLINE(  50)		this->_hx___tabChildren = true;
HXLINE(  52)		this->_hx___children = ::Array_obj< ::Dynamic>::__new();
HXLINE(  53)		int length = null();
HXDLIN(  53)		bool fixed = null();
HXDLIN(  53)		::Array< ::Dynamic> array = null();
HXDLIN(  53)		this->_hx___removedChildren =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,array,true);
            	}

Dynamic DisplayObjectContainer_obj::__CreateEmpty() { return new DisplayObjectContainer_obj; }

void *DisplayObjectContainer_obj::_hx_vtable = 0;

Dynamic DisplayObjectContainer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DisplayObjectContainer_obj > _hx_result = new DisplayObjectContainer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DisplayObjectContainer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x0330636f) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
	}
}

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::addChild( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_58_addChild)
HXDLIN(  58)		return this->addChildAt(child,this->get_numChildren());
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,addChild,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::addChildAt( ::openfl::display::DisplayObject child,int index){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_62_addChildAt)
HXLINE(  63)		if (::hx::IsNull( child )) {
HXLINE(  65)			 ::openfl::errors::TypeError error =  ::openfl::errors::TypeError_obj::__alloc( HX_CTX ,HX_("Error #2007: Parameter child must be non-null.",30,5a,a7,aa));
HXLINE(  66)			error->errorID = 2007;
HXLINE(  67)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(error));
            		}
            		else {
HXLINE(  70)			if (::hx::IsEq( child->stage,child )) {
HXLINE(  72)				 ::openfl::errors::ArgumentError error =  ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Error #3783: A Stage object cannot be added as the child of another object.",fa,51,93,42));
HXLINE(  73)				error->errorID = 3783;
HXLINE(  74)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(error));
            			}
            		}
HXLINE(  78)		bool _hx_tmp;
HXDLIN(  78)		if ((index <= this->_hx___children->length)) {
HXLINE(  78)			_hx_tmp = (index < 0);
            		}
            		else {
HXLINE(  78)			_hx_tmp = true;
            		}
HXDLIN(  78)		if (_hx_tmp) {
HXLINE(  80)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Invalid index position ",80,59,50,86) + index)));
            		}
HXLINE(  83)		if (::hx::IsEq( child->parent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  85)			if (::hx::IsNotEq( this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >(),child )) {
HXLINE(  87)				this->_hx___children->remove(child);
HXLINE(  88)				this->_hx___children->insert(index,child);
HXLINE(  90)				if (!(this->_hx___renderDirty)) {
HXLINE(  90)					this->_hx___renderDirty = true;
HXDLIN(  90)					this->_hx___setParentRenderDirty();
            				}
            			}
            		}
            		else {
HXLINE(  95)			if (::hx::IsNotNull( child->parent )) {
HXLINE(  97)				child->parent->removeChild(child);
            			}
HXLINE( 100)			this->_hx___children->insert(index,child);
HXLINE( 101)			child->parent = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 103)			bool addedToStage;
HXDLIN( 103)			if (::hx::IsNotNull( this->stage )) {
HXLINE( 103)				addedToStage = ::hx::IsNull( child->stage );
            			}
            			else {
HXLINE( 103)				addedToStage = false;
            			}
HXLINE( 105)			if (addedToStage) {
HXLINE( 107)				child->_hx___setStageReference(this->stage);
            			}
HXLINE( 110)			child->_hx___setTransformDirty();
HXLINE( 111)			if (!(child->_hx___renderDirty)) {
HXLINE( 111)				child->_hx___renderDirty = true;
HXDLIN( 111)				child->_hx___setParentRenderDirty();
            			}
HXLINE( 112)			if (!(this->_hx___renderDirty)) {
HXLINE( 112)				this->_hx___renderDirty = true;
HXDLIN( 112)				this->_hx___setParentRenderDirty();
            			}
HXLINE( 118)			 ::openfl::events::Event event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("added",c0,d4,43,1c),null(),null());
HXLINE( 120)			event->bubbles = true;
HXLINE( 122)			event->target = child;
HXLINE( 124)			child->_hx___dispatchWithCapture(event);
HXLINE( 130)			if (addedToStage) {
HXLINE( 135)				event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("addedToStage",63,22,55,0c),false,false);
HXLINE( 138)				child->_hx___dispatchWithCapture(event);
HXLINE( 139)				child->_hx___dispatchChildren(event);
            			}
            		}
HXLINE( 147)		return child;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,addChildAt,return )

bool DisplayObjectContainer_obj::areInaccessibleObjectsUnderPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_152_areInaccessibleObjectsUnderPoint)
HXDLIN( 152)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,areInaccessibleObjectsUnderPoint,return )

bool DisplayObjectContainer_obj::contains( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_156_contains)
HXLINE( 157)		while(true){
HXLINE( 157)			bool _hx_tmp;
HXDLIN( 157)			if (::hx::IsNotEq( child,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 157)				_hx_tmp = ::hx::IsNotNull( child );
            			}
            			else {
HXLINE( 157)				_hx_tmp = false;
            			}
HXDLIN( 157)			if (!(_hx_tmp)) {
HXLINE( 157)				goto _hx_goto_4;
            			}
HXLINE( 159)			child = child->parent;
            		}
            		_hx_goto_4:;
HXLINE( 162)		return ::hx::IsEq( child,::hx::ObjectPtr<OBJ_>(this) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,contains,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::getChildAt(int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_166_getChildAt)
HXLINE( 167)		bool _hx_tmp;
HXDLIN( 167)		if ((index >= 0)) {
HXLINE( 167)			_hx_tmp = (index < this->_hx___children->length);
            		}
            		else {
HXLINE( 167)			_hx_tmp = false;
            		}
HXDLIN( 167)		if (_hx_tmp) {
HXLINE( 169)			return this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >();
            		}
HXLINE( 172)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildAt,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::getChildByName(::String name){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_176_getChildByName)
HXLINE( 177)		{
HXLINE( 177)			int _g = 0;
HXDLIN( 177)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 177)			while((_g < _g1->length)){
HXLINE( 177)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 177)				_g = (_g + 1);
HXLINE( 179)				if ((child->get_name() == name)) {
HXLINE( 179)					return child;
            				}
            			}
            		}
HXLINE( 182)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildByName,return )

int DisplayObjectContainer_obj::getChildIndex( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_186_getChildIndex)
HXLINE( 187)		{
HXLINE( 187)			int _g = 0;
HXDLIN( 187)			int _g1 = this->_hx___children->length;
HXDLIN( 187)			while((_g < _g1)){
HXLINE( 187)				_g = (_g + 1);
HXDLIN( 187)				int i = (_g - 1);
HXLINE( 189)				if (::hx::IsEq( this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >(),child )) {
HXLINE( 189)					return i;
            				}
            			}
            		}
HXLINE( 192)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildIndex,return )

::Array< ::Dynamic> DisplayObjectContainer_obj::getObjectsUnderPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_196_getObjectsUnderPoint)
HXLINE( 197)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE( 198)		this->_hx___hitTest(point->x,point->y,false,stack,false,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 199)		stack->reverse();
HXLINE( 200)		return stack;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getObjectsUnderPoint,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::removeChild( ::openfl::display::DisplayObject child){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_204_removeChild)
HXLINE( 205)		bool _hx_tmp;
HXDLIN( 205)		if (::hx::IsNotNull( child )) {
HXLINE( 205)			_hx_tmp = ::hx::IsEq( child->parent,::hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 205)			_hx_tmp = false;
            		}
HXDLIN( 205)		if (_hx_tmp) {
HXLINE( 207)			child->_hx___setTransformDirty();
HXLINE( 208)			if (!(child->_hx___renderDirty)) {
HXLINE( 208)				child->_hx___renderDirty = true;
HXDLIN( 208)				child->_hx___setParentRenderDirty();
            			}
HXLINE( 209)			if (!(this->_hx___renderDirty)) {
HXLINE( 209)				this->_hx___renderDirty = true;
HXDLIN( 209)				this->_hx___setParentRenderDirty();
            			}
HXLINE( 211)			 ::openfl::events::Event event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("removed",a0,1f,00,f3),true,null());
HXLINE( 212)			child->_hx___dispatchWithCapture(event);
HXLINE( 214)			if (::hx::IsNotNull( this->stage )) {
HXLINE( 216)				bool _hx_tmp;
HXDLIN( 216)				if (::hx::IsNotNull( child->stage )) {
HXLINE( 216)					_hx_tmp = ::hx::IsEq( this->stage->get_focus(),child );
            				}
            				else {
HXLINE( 216)					_hx_tmp = false;
            				}
HXDLIN( 216)				if (_hx_tmp) {
HXLINE( 218)					this->stage->set_focus(null());
            				}
HXLINE( 221)				 ::openfl::events::Event event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("removedFromStage",34,21,76,ba),false,false);
HXLINE( 222)				child->_hx___dispatchWithCapture(event);
HXLINE( 223)				child->_hx___dispatchChildren(event);
HXLINE( 224)				child->_hx___setStageReference(null());
            			}
HXLINE( 227)			child->parent = null();
HXLINE( 228)			this->_hx___children->remove(child);
HXLINE( 229)			this->_hx___removedChildren->push(child);
HXLINE( 230)			child->_hx___setTransformDirty();
            		}
HXLINE( 233)		return child;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,removeChild,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::removeChildAt(int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_237_removeChildAt)
HXLINE( 238)		bool _hx_tmp;
HXDLIN( 238)		if ((index >= 0)) {
HXLINE( 238)			_hx_tmp = (index < this->_hx___children->length);
            		}
            		else {
HXLINE( 238)			_hx_tmp = false;
            		}
HXDLIN( 238)		if (_hx_tmp) {
HXLINE( 240)			return this->removeChild(this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >());
            		}
HXLINE( 243)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,removeChildAt,return )

void DisplayObjectContainer_obj::removeChildren(::hx::Null< int >  __o_beginIndex,::hx::Null< int >  __o_endIndex){
            		int beginIndex = __o_beginIndex.Default(0);
            		int endIndex = __o_endIndex.Default(2147483647);
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_247_removeChildren)
HXLINE( 248)		if ((endIndex == (int)2147483647)) {
HXLINE( 250)			endIndex = (this->_hx___children->length - 1);
HXLINE( 252)			if ((endIndex < 0)) {
HXLINE( 254)				return;
            			}
            		}
HXLINE( 258)		if ((beginIndex > (this->_hx___children->length - 1))) {
HXLINE( 260)			return;
            		}
            		else {
HXLINE( 262)			bool _hx_tmp;
HXDLIN( 262)			bool _hx_tmp1;
HXDLIN( 262)			if ((endIndex >= beginIndex)) {
HXLINE( 262)				_hx_tmp1 = (beginIndex < 0);
            			}
            			else {
HXLINE( 262)				_hx_tmp1 = true;
            			}
HXDLIN( 262)			if (!(_hx_tmp1)) {
HXLINE( 262)				_hx_tmp = (endIndex > this->_hx___children->length);
            			}
            			else {
HXLINE( 262)				_hx_tmp = true;
            			}
HXDLIN( 262)			if (_hx_tmp) {
HXLINE( 264)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,HX_("The supplied index is out of bounds.",17,96,1b,51))));
            			}
            		}
HXLINE( 267)		int numRemovals = (endIndex - beginIndex);
HXLINE( 268)		while((numRemovals >= 0)){
HXLINE( 270)			this->removeChildAt(beginIndex);
HXLINE( 271)			numRemovals = (numRemovals - 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,removeChildren,(void))

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::resolve(::String fieldName){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_276_resolve)
HXLINE( 277)		if (::hx::IsNull( this->_hx___children )) {
HXLINE( 277)			return null();
            		}
HXLINE( 279)		{
HXLINE( 279)			int _g = 0;
HXDLIN( 279)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 279)			while((_g < _g1->length)){
HXLINE( 279)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 279)				_g = (_g + 1);
HXLINE( 281)				if ((child->get_name() == fieldName)) {
HXLINE( 283)					return child;
            				}
            			}
            		}
HXLINE( 287)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,resolve,return )

void DisplayObjectContainer_obj::setChildIndex( ::openfl::display::DisplayObject child,int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_292_setChildIndex)
HXDLIN( 292)		bool _hx_tmp;
HXDLIN( 292)		bool _hx_tmp1;
HXDLIN( 292)		if ((index >= 0)) {
HXDLIN( 292)			_hx_tmp1 = (index <= this->_hx___children->length);
            		}
            		else {
HXDLIN( 292)			_hx_tmp1 = false;
            		}
HXDLIN( 292)		if (_hx_tmp1) {
HXDLIN( 292)			_hx_tmp = ::hx::IsEq( child->parent,::hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN( 292)			_hx_tmp = false;
            		}
HXDLIN( 292)		if (_hx_tmp) {
HXLINE( 294)			this->_hx___children->remove(child);
HXLINE( 295)			this->_hx___children->insert(index,child);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,setChildIndex,(void))

void DisplayObjectContainer_obj::stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_301_stopAllMovieClips)
HXDLIN( 301)		this->_hx___stopAllMovieClips();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,stopAllMovieClips,(void))

void DisplayObjectContainer_obj::swapChildren( ::openfl::display::DisplayObject child1, ::openfl::display::DisplayObject child2){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_306_swapChildren)
HXDLIN( 306)		bool _hx_tmp;
HXDLIN( 306)		if (::hx::IsEq( child1->parent,::hx::ObjectPtr<OBJ_>(this) )) {
HXDLIN( 306)			_hx_tmp = ::hx::IsEq( child2->parent,::hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN( 306)			_hx_tmp = false;
            		}
HXDLIN( 306)		if (_hx_tmp) {
HXLINE( 308)			int index1 = this->_hx___children->indexOf(child1,null());
HXLINE( 309)			int index2 = this->_hx___children->indexOf(child2,null());
HXLINE( 311)			this->_hx___children[index1] = child2;
HXLINE( 312)			this->_hx___children[index2] = child1;
HXLINE( 314)			if (!(this->_hx___renderDirty)) {
HXLINE( 314)				this->_hx___renderDirty = true;
HXDLIN( 314)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildren,(void))

void DisplayObjectContainer_obj::swapChildrenAt(int index1,int index2){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_319_swapChildrenAt)
HXLINE( 320)		 ::openfl::display::DisplayObject swap = this->_hx___children->__get(index1).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 321)		this->_hx___children[index1] = this->_hx___children->__get(index2).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 322)		this->_hx___children[index2] = swap;
HXLINE( 323)		swap = null();
HXLINE( 324)		if (!(this->_hx___renderDirty)) {
HXLINE( 324)			this->_hx___renderDirty = true;
HXDLIN( 324)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildrenAt,(void))

void DisplayObjectContainer_obj::_hx___cleanup(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_328___cleanup)
HXLINE( 329)		this->super::_hx___cleanup();
HXLINE( 331)		{
HXLINE( 331)			int _g = 0;
HXDLIN( 331)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 331)			while((_g < _g1->length)){
HXLINE( 331)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 331)				_g = (_g + 1);
HXLINE( 333)				child->_hx___cleanup();
            			}
            		}
HXLINE( 336)		{
HXLINE( 336)			{
HXLINE( 336)				 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN( 336)				while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 336)					 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 336)					if (::hx::IsNull( orphan1->stage )) {
HXLINE( 336)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 336)			this->_hx___removedChildren->set_length(0);
            		}
            	}


void DisplayObjectContainer_obj::_hx___cleanupRemovedChildren(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_340___cleanupRemovedChildren)
HXLINE( 341)		{
HXLINE( 341)			 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN( 341)			while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 341)				 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 343)				if (::hx::IsNull( orphan1->stage )) {
HXLINE( 345)					orphan1->_hx___cleanup();
            				}
            			}
            		}
HXLINE( 349)		this->_hx___removedChildren->set_length(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,_hx___cleanupRemovedChildren,(void))

void DisplayObjectContainer_obj::_hx___dispatchChildren( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_354___dispatchChildren)
HXDLIN( 354)		if (::hx::IsNotNull( this->_hx___children )) {
HXLINE( 356)			int _g = 0;
HXDLIN( 356)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 356)			while((_g < _g1->length)){
HXLINE( 356)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 356)				_g = (_g + 1);
HXLINE( 358)				event->target = child;
HXLINE( 360)				if (!(child->_hx___dispatchWithCapture(event))) {
HXLINE( 362)					goto _hx_goto_27;
            				}
HXLINE( 365)				child->_hx___dispatchChildren(event);
            			}
            			_hx_goto_27:;
            		}
            	}


void DisplayObjectContainer_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_372___enterFrame)
HXDLIN( 372)		int _g = 0;
HXDLIN( 372)		::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 372)		while((_g < _g1->length)){
HXDLIN( 372)			 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 372)			_g = (_g + 1);
HXLINE( 374)			child->_hx___enterFrame(deltaTime);
            		}
            	}


void DisplayObjectContainer_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_379___getBounds)
HXLINE( 380)		this->super::_hx___getBounds(rect,matrix);
HXLINE( 382)		if ((this->_hx___children->length == 0)) {
HXLINE( 382)			return;
            		}
HXLINE( 384)		 ::openfl::geom::Matrix childWorldTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 386)		{
HXLINE( 386)			int _g = 0;
HXDLIN( 386)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 386)			while((_g < _g1->length)){
HXLINE( 386)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 386)				_g = (_g + 1);
HXLINE( 388)				bool _hx_tmp;
HXDLIN( 388)				if ((child->_hx___scaleX != 0)) {
HXLINE( 388)					_hx_tmp = (child->_hx___scaleY == 0);
            				}
            				else {
HXLINE( 388)					_hx_tmp = true;
            				}
HXDLIN( 388)				if (_hx_tmp) {
HXLINE( 388)					continue;
            				}
HXLINE( 390)				{
HXLINE( 390)					 ::openfl::geom::Matrix local = child->_hx___transform;
HXDLIN( 390)					childWorldTransform->a = ((local->a * matrix->a) + (local->b * matrix->c));
HXDLIN( 390)					childWorldTransform->b = ((local->a * matrix->b) + (local->b * matrix->d));
HXDLIN( 390)					childWorldTransform->c = ((local->c * matrix->a) + (local->d * matrix->c));
HXDLIN( 390)					childWorldTransform->d = ((local->c * matrix->b) + (local->d * matrix->d));
HXDLIN( 390)					childWorldTransform->tx = (((local->tx * matrix->a) + (local->ty * matrix->c)) + matrix->tx);
HXDLIN( 390)					childWorldTransform->ty = (((local->tx * matrix->b) + (local->ty * matrix->d)) + matrix->ty);
            				}
HXLINE( 392)				child->_hx___getBounds(rect,childWorldTransform);
            			}
            		}
HXLINE( 395)		::openfl::geom::Matrix_obj::_hx___pool->release(childWorldTransform);
            	}


void DisplayObjectContainer_obj::_hx___getFilterBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_399___getFilterBounds)
HXLINE( 400)		this->super::_hx___getFilterBounds(rect,matrix);
HXLINE( 401)		if (::hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 401)			return;
            		}
HXLINE( 403)		if ((this->_hx___children->length == 0)) {
HXLINE( 403)			return;
            		}
HXLINE( 405)		 ::openfl::geom::Matrix childWorldTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 407)		{
HXLINE( 407)			int _g = 0;
HXDLIN( 407)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 407)			while((_g < _g1->length)){
HXLINE( 407)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 407)				_g = (_g + 1);
HXLINE( 409)				bool _hx_tmp;
HXDLIN( 409)				bool _hx_tmp1;
HXDLIN( 409)				if ((child->_hx___scaleX != 0)) {
HXLINE( 409)					_hx_tmp1 = (child->_hx___scaleY == 0);
            				}
            				else {
HXLINE( 409)					_hx_tmp1 = true;
            				}
HXDLIN( 409)				if (!(_hx_tmp1)) {
HXLINE( 409)					_hx_tmp = child->_hx___isMask;
            				}
            				else {
HXLINE( 409)					_hx_tmp = true;
            				}
HXDLIN( 409)				if (_hx_tmp) {
HXLINE( 409)					continue;
            				}
HXLINE( 411)				{
HXLINE( 411)					 ::openfl::geom::Matrix local = child->_hx___transform;
HXDLIN( 411)					childWorldTransform->a = ((local->a * matrix->a) + (local->b * matrix->c));
HXDLIN( 411)					childWorldTransform->b = ((local->a * matrix->b) + (local->b * matrix->d));
HXDLIN( 411)					childWorldTransform->c = ((local->c * matrix->a) + (local->d * matrix->c));
HXDLIN( 411)					childWorldTransform->d = ((local->c * matrix->b) + (local->d * matrix->d));
HXDLIN( 411)					childWorldTransform->tx = (((local->tx * matrix->a) + (local->ty * matrix->c)) + matrix->tx);
HXDLIN( 411)					childWorldTransform->ty = (((local->tx * matrix->b) + (local->ty * matrix->d)) + matrix->ty);
            				}
HXLINE( 413)				child->_hx___getFilterBounds(rect,childWorldTransform);
            			}
            		}
HXLINE( 416)		::openfl::geom::Matrix_obj::_hx___pool->release(childWorldTransform);
            	}


void DisplayObjectContainer_obj::_hx___getRenderBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_420___getRenderBounds)
HXLINE( 421)		if (::hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 423)			this->super::_hx___getRenderBounds(rect,matrix);
HXLINE( 424)			return;
            		}
            		else {
HXLINE( 428)			this->super::_hx___getBounds(rect,matrix);
            		}
HXLINE( 431)		if ((this->_hx___children->length == 0)) {
HXLINE( 431)			return;
            		}
HXLINE( 433)		 ::openfl::geom::Matrix childWorldTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 435)		{
HXLINE( 435)			int _g = 0;
HXDLIN( 435)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 435)			while((_g < _g1->length)){
HXLINE( 435)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 435)				_g = (_g + 1);
HXLINE( 437)				bool _hx_tmp;
HXDLIN( 437)				bool _hx_tmp1;
HXDLIN( 437)				if ((child->_hx___scaleX != 0)) {
HXLINE( 437)					_hx_tmp1 = (child->_hx___scaleY == 0);
            				}
            				else {
HXLINE( 437)					_hx_tmp1 = true;
            				}
HXDLIN( 437)				if (!(_hx_tmp1)) {
HXLINE( 437)					_hx_tmp = child->_hx___isMask;
            				}
            				else {
HXLINE( 437)					_hx_tmp = true;
            				}
HXDLIN( 437)				if (_hx_tmp) {
HXLINE( 437)					continue;
            				}
HXLINE( 439)				{
HXLINE( 439)					 ::openfl::geom::Matrix local = child->_hx___transform;
HXDLIN( 439)					childWorldTransform->a = ((local->a * matrix->a) + (local->b * matrix->c));
HXDLIN( 439)					childWorldTransform->b = ((local->a * matrix->b) + (local->b * matrix->d));
HXDLIN( 439)					childWorldTransform->c = ((local->c * matrix->a) + (local->d * matrix->c));
HXDLIN( 439)					childWorldTransform->d = ((local->c * matrix->b) + (local->d * matrix->d));
HXDLIN( 439)					childWorldTransform->tx = (((local->tx * matrix->a) + (local->ty * matrix->c)) + matrix->tx);
HXDLIN( 439)					childWorldTransform->ty = (((local->tx * matrix->b) + (local->ty * matrix->d)) + matrix->ty);
            				}
HXLINE( 441)				child->_hx___getRenderBounds(rect,childWorldTransform);
            			}
            		}
HXLINE( 444)		::openfl::geom::Matrix_obj::_hx___pool->release(childWorldTransform);
            	}


bool DisplayObjectContainer_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_449___hitTest)
HXLINE( 450)		bool _hx_tmp;
HXDLIN( 450)		bool _hx_tmp1;
HXDLIN( 450)		if (hitObject->get_visible()) {
HXLINE( 450)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE( 450)			_hx_tmp1 = true;
            		}
HXDLIN( 450)		if (!(_hx_tmp1)) {
HXLINE( 450)			bool _hx_tmp1;
HXDLIN( 450)			if (interactiveOnly) {
HXLINE( 450)				_hx_tmp1 = !(this->mouseEnabled);
            			}
            			else {
HXLINE( 450)				_hx_tmp1 = false;
            			}
HXDLIN( 450)			if (_hx_tmp1) {
HXLINE( 450)				_hx_tmp = !(this->mouseChildren);
            			}
            			else {
HXLINE( 450)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 450)			_hx_tmp = true;
            		}
HXDLIN( 450)		if (_hx_tmp) {
HXLINE( 450)			return false;
            		}
HXLINE( 451)		bool _hx_tmp2;
HXDLIN( 451)		if (::hx::IsNotNull( this->get_mask() )) {
HXLINE( 451)			_hx_tmp2 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE( 451)			_hx_tmp2 = false;
            		}
HXDLIN( 451)		if (_hx_tmp2) {
HXLINE( 451)			return false;
            		}
HXLINE( 453)		if (::hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 455)			 ::openfl::geom::Point point = ::openfl::geom::Point_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Point >();
HXLINE( 456)			point->setTo(x,y);
HXLINE( 457)			{
HXLINE( 457)				 ::openfl::geom::Matrix _this = this->_hx___getRenderTransform();
HXDLIN( 457)				Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN( 457)				if ((norm == 0)) {
HXLINE( 457)					point->x = -(_this->tx);
HXDLIN( 457)					point->y = -(_this->ty);
            				}
            				else {
HXLINE( 457)					Float px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - point->y)) + (_this->d * (point->x - _this->tx))));
HXDLIN( 457)					point->y = ((((Float)1.0) / norm) * ((_this->a * (point->y - _this->ty)) + (_this->b * (_this->tx - point->x))));
HXDLIN( 457)					point->x = px;
            				}
            			}
HXLINE( 459)			if (!(this->_hx___scrollRect->containsPoint(point))) {
HXLINE( 461)				::openfl::geom::Point_obj::_hx___pool->release(point);
HXLINE( 462)				return false;
            			}
HXLINE( 465)			::openfl::geom::Point_obj::_hx___pool->release(point);
            		}
HXLINE( 468)		int i = this->_hx___children->length;
HXLINE( 469)		if (interactiveOnly) {
HXLINE( 471)			bool _hx_tmp;
HXDLIN( 471)			if (::hx::IsNotNull( stack )) {
HXLINE( 471)				_hx_tmp = !(this->mouseChildren);
            			}
            			else {
HXLINE( 471)				_hx_tmp = true;
            			}
HXDLIN( 471)			if (_hx_tmp) {
HXLINE( 473)				while(true){
HXLINE( 473)					i = (i - 1);
HXDLIN( 473)					if (!((i >= 0))) {
HXLINE( 473)						goto _hx_goto_37;
            					}
HXLINE( 475)					if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,null(),true,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >())) {
HXLINE( 477)						if (::hx::IsNotNull( stack )) {
HXLINE( 479)							stack->push(hitObject);
            						}
HXLINE( 482)						return true;
            					}
            				}
            				_hx_goto_37:;
            			}
            			else {
HXLINE( 486)				if (::hx::IsNotNull( stack )) {
HXLINE( 488)					int length = stack->length;
HXLINE( 490)					bool interactive = false;
HXLINE( 491)					bool hitTest = false;
HXLINE( 493)					while(true){
HXLINE( 493)						i = (i - 1);
HXDLIN( 493)						if (!((i >= 0))) {
HXLINE( 493)							goto _hx_goto_38;
            						}
HXLINE( 495)						interactive = this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___getInteractive(null());
HXLINE( 497)						bool _hx_tmp;
HXDLIN( 497)						if (!(interactive)) {
HXLINE( 497)							if (this->mouseEnabled) {
HXLINE( 497)								_hx_tmp = !(hitTest);
            							}
            							else {
HXLINE( 497)								_hx_tmp = false;
            							}
            						}
            						else {
HXLINE( 497)							_hx_tmp = true;
            						}
HXDLIN( 497)						if (_hx_tmp) {
HXLINE( 499)							if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,stack,true,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >())) {
HXLINE( 501)								hitTest = true;
HXLINE( 503)								bool _hx_tmp;
HXDLIN( 503)								if (interactive) {
HXLINE( 503)									_hx_tmp = (stack->length > length);
            								}
            								else {
HXLINE( 503)									_hx_tmp = false;
            								}
HXDLIN( 503)								if (_hx_tmp) {
HXLINE( 505)									goto _hx_goto_38;
            								}
            							}
            						}
            					}
            					_hx_goto_38:;
HXLINE( 511)					if (hitTest) {
HXLINE( 513)						stack->insert(length,hitObject);
HXLINE( 514)						return true;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 520)			bool hitTest = false;
HXLINE( 522)			while(true){
HXLINE( 522)				i = (i - 1);
HXDLIN( 522)				if (!((i >= 0))) {
HXLINE( 522)					goto _hx_goto_39;
            				}
HXLINE( 524)				if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,stack,false,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >())) {
HXLINE( 526)					hitTest = true;
HXLINE( 527)					if (::hx::IsNull( stack )) {
HXLINE( 527)						goto _hx_goto_39;
            					}
            				}
            			}
            			_hx_goto_39:;
HXLINE( 531)			return hitTest;
            		}
HXLINE( 534)		return false;
            	}


bool DisplayObjectContainer_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_538___hitTestMask)
HXLINE( 539)		int i = this->_hx___children->length;
HXLINE( 541)		while(true){
HXLINE( 541)			i = (i - 1);
HXDLIN( 541)			if (!((i >= 0))) {
HXLINE( 541)				goto _hx_goto_41;
            			}
HXLINE( 543)			if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTestMask(x,y)) {
HXLINE( 545)				return true;
            			}
            		}
            		_hx_goto_41:;
HXLINE( 549)		return false;
            	}


void DisplayObjectContainer_obj::_hx___readGraphicsData( ::openfl::_Vector::ObjectVector graphicsData,bool recurse){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_553___readGraphicsData)
HXLINE( 554)		this->super::_hx___readGraphicsData(graphicsData,recurse);
HXLINE( 556)		if (recurse) {
HXLINE( 558)			int _g = 0;
HXDLIN( 558)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 558)			while((_g < _g1->length)){
HXLINE( 558)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 558)				_g = (_g + 1);
HXLINE( 560)				child->_hx___readGraphicsData(graphicsData,recurse);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderCairo( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_566___renderCairo)
HXLINE( 568)		{
HXLINE( 568)			{
HXLINE( 568)				 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN( 568)				while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 568)					 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 568)					if (::hx::IsNull( orphan1->stage )) {
HXLINE( 568)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 568)			this->_hx___removedChildren->set_length(0);
            		}
HXLINE( 570)		bool _hx_tmp;
HXDLIN( 570)		if (this->_hx___renderable) {
HXLINE( 570)			_hx_tmp = (this->_hx___worldAlpha <= 0);
            		}
            		else {
HXLINE( 570)			_hx_tmp = true;
            		}
HXDLIN( 570)		if (_hx_tmp) {
HXLINE( 570)			return;
            		}
HXLINE( 572)		this->super::_hx___renderCairo(renderer);
HXLINE( 574)		bool _hx_tmp1;
HXDLIN( 574)		if (::hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 574)			_hx_tmp1 = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 574)			_hx_tmp1 = false;
            		}
HXDLIN( 574)		if (_hx_tmp1) {
HXLINE( 574)			return;
            		}
HXLINE( 576)		renderer->_hx___pushMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 578)		if (::hx::IsNotNull( renderer->_hx___stage )) {
HXLINE( 580)			{
HXLINE( 580)				int _g = 0;
HXDLIN( 580)				::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 580)				while((_g < _g1->length)){
HXLINE( 580)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 580)					_g = (_g + 1);
HXLINE( 582)					child->_hx___renderCairo(renderer);
HXLINE( 583)					child->_hx___renderDirty = false;
            				}
            			}
HXLINE( 586)			this->_hx___renderDirty = false;
            		}
            		else {
HXLINE( 590)			int _g = 0;
HXDLIN( 590)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 590)			while((_g < _g1->length)){
HXLINE( 590)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 590)				_g = (_g + 1);
HXLINE( 592)				child->_hx___renderCairo(renderer);
            			}
            		}
HXLINE( 596)		renderer->_hx___popMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderCairoMask( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_601___renderCairoMask)
HXLINE( 603)		{
HXLINE( 603)			{
HXLINE( 603)				 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN( 603)				while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 603)					 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 603)					if (::hx::IsNull( orphan1->stage )) {
HXLINE( 603)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 603)			this->_hx___removedChildren->set_length(0);
            		}
HXLINE( 605)		if (::hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 607)			::openfl::display::_internal::CairoGraphics_obj::renderMask(this->_hx___graphics,renderer);
            		}
HXLINE( 610)		{
HXLINE( 610)			int _g = 0;
HXDLIN( 610)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 610)			while((_g < _g1->length)){
HXLINE( 610)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 610)				_g = (_g + 1);
HXLINE( 612)				child->_hx___renderCairoMask(renderer);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderCanvas( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_618___renderCanvas)
HXLINE( 619)		{
HXLINE( 619)			{
HXLINE( 619)				 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN( 619)				while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 619)					 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 619)					if (::hx::IsNull( orphan1->stage )) {
HXLINE( 619)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 619)			this->_hx___removedChildren->set_length(0);
            		}
HXLINE( 621)		bool _hx_tmp;
HXDLIN( 621)		bool _hx_tmp1;
HXDLIN( 621)		if (this->_hx___renderable) {
HXLINE( 621)			_hx_tmp1 = (this->_hx___worldAlpha <= 0);
            		}
            		else {
HXLINE( 621)			_hx_tmp1 = true;
            		}
HXDLIN( 621)		if (!(_hx_tmp1)) {
HXLINE( 621)			if (::hx::IsNotNull( this->get_mask() )) {
HXLINE( 621)				if (!((this->get_mask()->get_width() <= 0))) {
HXLINE( 621)					_hx_tmp = (this->get_mask()->get_height() <= 0);
            				}
            				else {
HXLINE( 621)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 621)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 621)			_hx_tmp = true;
            		}
HXDLIN( 621)		if (_hx_tmp) {
HXLINE( 621)			return;
            		}
HXLINE( 624)		this->super::_hx___renderCanvas(renderer);
HXLINE( 626)		bool _hx_tmp2;
HXDLIN( 626)		if (::hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 626)			_hx_tmp2 = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 626)			_hx_tmp2 = false;
            		}
HXDLIN( 626)		if (_hx_tmp2) {
HXLINE( 626)			return;
            		}
HXLINE( 628)		renderer->_hx___pushMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 630)		if (::hx::IsNotNull( renderer->_hx___stage )) {
HXLINE( 632)			{
HXLINE( 632)				int _g = 0;
HXDLIN( 632)				::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 632)				while((_g < _g1->length)){
HXLINE( 632)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 632)					_g = (_g + 1);
HXLINE( 634)					child->_hx___renderCanvas(renderer);
HXLINE( 635)					child->_hx___renderDirty = false;
            				}
            			}
HXLINE( 638)			this->_hx___renderDirty = false;
            		}
            		else {
HXLINE( 642)			int _g = 0;
HXDLIN( 642)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 642)			while((_g < _g1->length)){
HXLINE( 642)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 642)				_g = (_g + 1);
HXLINE( 644)				child->_hx___renderCanvas(renderer);
            			}
            		}
HXLINE( 648)		renderer->_hx___popMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderCanvasMask( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_653___renderCanvasMask)
HXLINE( 654)		{
HXLINE( 654)			{
HXLINE( 654)				 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN( 654)				while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 654)					 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 654)					if (::hx::IsNull( orphan1->stage )) {
HXLINE( 654)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 654)			this->_hx___removedChildren->set_length(0);
            		}
HXLINE( 656)		if (::hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 658)			::openfl::display::_internal::CanvasGraphics_obj::renderMask(this->_hx___graphics,renderer);
            		}
HXLINE( 661)		{
HXLINE( 661)			int _g = 0;
HXDLIN( 661)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 661)			while((_g < _g1->length)){
HXLINE( 661)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 661)				_g = (_g + 1);
HXLINE( 663)				child->_hx___renderCanvasMask(renderer);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderDOM( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_668___renderDOM)
HXLINE( 669)		{
HXLINE( 669)			 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN( 669)			while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 669)				 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 671)				if (::hx::IsNull( orphan1->stage )) {
HXLINE( 673)					orphan1->_hx___renderDOM(renderer);
            				}
            			}
            		}
HXLINE( 677)		{
HXLINE( 677)			{
HXLINE( 677)				 ::Dynamic orphan1 = this->_hx___removedChildren->iterator();
HXDLIN( 677)				while(( (bool)(orphan1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 677)					 ::openfl::display::DisplayObject orphan = ( ( ::openfl::display::DisplayObject)(orphan1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 677)					if (::hx::IsNull( orphan->stage )) {
HXLINE( 677)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 677)			this->_hx___removedChildren->set_length(0);
            		}
HXLINE( 679)		this->super::_hx___renderDOM(renderer);
HXLINE( 681)		bool _hx_tmp;
HXDLIN( 681)		if (::hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 681)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 681)			_hx_tmp = false;
            		}
HXDLIN( 681)		if (_hx_tmp) {
HXLINE( 681)			return;
            		}
HXLINE( 683)		renderer->_hx___pushMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 685)		if (::hx::IsNotNull( renderer->_hx___stage )) {
HXLINE( 687)			{
HXLINE( 687)				int _g = 0;
HXDLIN( 687)				::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 687)				while((_g < _g1->length)){
HXLINE( 687)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 687)					_g = (_g + 1);
HXLINE( 689)					child->_hx___renderDOM(renderer);
HXLINE( 690)					child->_hx___renderDirty = false;
            				}
            			}
HXLINE( 693)			this->_hx___renderDirty = false;
            		}
            		else {
HXLINE( 697)			int _g = 0;
HXDLIN( 697)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 697)			while((_g < _g1->length)){
HXLINE( 697)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 697)				_g = (_g + 1);
HXLINE( 699)				child->_hx___renderDOM(renderer);
            			}
            		}
HXLINE( 703)		renderer->_hx___popMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderDOMClear( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_707___renderDOMClear)
HXLINE( 708)		{
HXLINE( 708)			 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN( 708)			while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 708)				 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 710)				if (::hx::IsNull( orphan1->stage )) {
HXLINE( 712)					orphan1->_hx___renderDOMClear(renderer);
            				}
            			}
            		}
HXLINE( 716)		{
HXLINE( 716)			{
HXLINE( 716)				 ::Dynamic orphan1 = this->_hx___removedChildren->iterator();
HXDLIN( 716)				while(( (bool)(orphan1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 716)					 ::openfl::display::DisplayObject orphan = ( ( ::openfl::display::DisplayObject)(orphan1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 716)					if (::hx::IsNull( orphan->stage )) {
HXLINE( 716)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 716)			this->_hx___removedChildren->set_length(0);
            		}
HXLINE( 718)		{
HXLINE( 718)			int _g = 0;
HXDLIN( 718)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 718)			while((_g < _g1->length)){
HXLINE( 718)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 718)				_g = (_g + 1);
HXLINE( 720)				child->_hx___renderDOMClear(renderer);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderGL( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_725___renderGL)
HXLINE( 726)		{
HXLINE( 726)			{
HXLINE( 726)				 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN( 726)				while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 726)					 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 726)					if (::hx::IsNull( orphan1->stage )) {
HXLINE( 726)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 726)			this->_hx___removedChildren->set_length(0);
            		}
HXLINE( 728)		bool _hx_tmp;
HXDLIN( 728)		if (this->_hx___renderable) {
HXLINE( 728)			_hx_tmp = (this->_hx___worldAlpha <= 0);
            		}
            		else {
HXLINE( 728)			_hx_tmp = true;
            		}
HXDLIN( 728)		if (_hx_tmp) {
HXLINE( 728)			return;
            		}
HXLINE( 730)		this->super::_hx___renderGL(renderer);
HXLINE( 732)		bool _hx_tmp1;
HXDLIN( 732)		if (::hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 732)			_hx_tmp1 = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 732)			_hx_tmp1 = false;
            		}
HXDLIN( 732)		if (_hx_tmp1) {
HXLINE( 732)			return;
            		}
HXLINE( 734)		if ((this->_hx___children->length > 0)) {
HXLINE( 736)			renderer->_hx___pushMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 739)			if (::hx::IsNotNull( renderer->_hx___stage )) {
HXLINE( 741)				{
HXLINE( 741)					int _g = 0;
HXDLIN( 741)					::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 741)					while((_g < _g1->length)){
HXLINE( 741)						 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 741)						_g = (_g + 1);
HXLINE( 743)						child->_hx___renderGL(renderer);
HXLINE( 744)						child->_hx___renderDirty = false;
            					}
            				}
HXLINE( 747)				this->_hx___renderDirty = false;
            			}
            			else {
HXLINE( 751)				int _g = 0;
HXDLIN( 751)				::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 751)				while((_g < _g1->length)){
HXLINE( 751)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 751)					_g = (_g + 1);
HXLINE( 753)					child->_hx___renderGL(renderer);
            				}
            			}
            		}
HXLINE( 758)		if ((this->_hx___children->length > 0)) {
HXLINE( 761)			renderer->_hx___popMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderGLMask( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_766___renderGLMask)
HXLINE( 767)		{
HXLINE( 767)			{
HXLINE( 767)				 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN( 767)				while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 767)					 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 767)					if (::hx::IsNull( orphan1->stage )) {
HXLINE( 767)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 767)			this->_hx___removedChildren->set_length(0);
            		}
HXLINE( 769)		if (::hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 772)			::openfl::display::_internal::Context3DShape_obj::renderMask(::hx::ObjectPtr<OBJ_>(this),renderer);
            		}
HXLINE( 775)		{
HXLINE( 775)			int _g = 0;
HXDLIN( 775)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 775)			while((_g < _g1->length)){
HXLINE( 775)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 775)				_g = (_g + 1);
HXLINE( 777)				child->_hx___renderGLMask(renderer);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___setStageReference( ::openfl::display::Stage stage){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_782___setStageReference)
HXLINE( 783)		this->super::_hx___setStageReference(stage);
HXLINE( 785)		if (::hx::IsNotNull( this->_hx___children )) {
HXLINE( 787)			int _g = 0;
HXDLIN( 787)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 787)			while((_g < _g1->length)){
HXLINE( 787)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 787)				_g = (_g + 1);
HXLINE( 789)				child->_hx___setStageReference(stage);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___setWorldTransformInvalid(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_796___setWorldTransformInvalid)
HXDLIN( 796)		if (!(this->_hx___worldTransformInvalid)) {
HXLINE( 798)			this->_hx___worldTransformInvalid = true;
HXLINE( 800)			if (::hx::IsNotNull( this->_hx___children )) {
HXLINE( 802)				int _g = 0;
HXDLIN( 802)				::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 802)				while((_g < _g1->length)){
HXLINE( 802)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 802)					_g = (_g + 1);
HXLINE( 804)					child->_hx___setWorldTransformInvalid();
            				}
            			}
            		}
            	}


 ::Dynamic DisplayObjectContainer_obj::_hx___shouldCacheHardware( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_811___shouldCacheHardware)
HXLINE( 812)		if (::hx::IsEq( value,true )) {
HXLINE( 812)			return true;
            		}
HXLINE( 813)		value = this->super::_hx___shouldCacheHardware(value);
HXLINE( 814)		if (::hx::IsEq( value,true )) {
HXLINE( 814)			return true;
            		}
HXLINE( 816)		if (::hx::IsNotNull( this->_hx___children )) {
HXLINE( 818)			int _g = 0;
HXDLIN( 818)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 818)			while((_g < _g1->length)){
HXLINE( 818)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 818)				_g = (_g + 1);
HXLINE( 820)				value = child->_hx___shouldCacheHardware(value);
HXLINE( 821)				if (::hx::IsEq( value,true )) {
HXLINE( 821)					return true;
            				}
            			}
            		}
HXLINE( 825)		return value;
            	}


void DisplayObjectContainer_obj::_hx___stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_830___stopAllMovieClips)
HXDLIN( 830)		int _g = 0;
HXDLIN( 830)		::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 830)		while((_g < _g1->length)){
HXDLIN( 830)			 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 830)			_g = (_g + 1);
HXLINE( 832)			child->_hx___stopAllMovieClips();
            		}
            	}


void DisplayObjectContainer_obj::_hx___tabTest(::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_837___tabTest)
HXLINE( 838)		this->super::_hx___tabTest(stack);
HXLINE( 840)		if (!(this->get_tabChildren())) {
HXLINE( 840)			return;
            		}
HXLINE( 842)		bool interactive = false;
HXLINE( 843)		 ::openfl::display::InteractiveObject interactiveObject = null();
HXLINE( 845)		{
HXLINE( 845)			int _g = 0;
HXDLIN( 845)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 845)			while((_g < _g1->length)){
HXLINE( 845)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 845)				_g = (_g + 1);
HXLINE( 847)				interactive = child->_hx___getInteractive(null());
HXLINE( 849)				if (interactive) {
HXLINE( 851)					interactiveObject = ( ( ::openfl::display::InteractiveObject)(child) );
HXLINE( 852)					interactiveObject->_hx___tabTest(stack);
            				}
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___update(bool transformOnly,bool updateChildren){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_858___update)
HXLINE( 859)		this->super::_hx___update(transformOnly,updateChildren);
HXLINE( 861)		if (updateChildren) {
HXLINE( 863)			int _g = 0;
HXDLIN( 863)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 863)			while((_g < _g1->length)){
HXLINE( 863)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 863)				_g = (_g + 1);
HXLINE( 865)				child->_hx___update(transformOnly,true);
            			}
            		}
            	}


int DisplayObjectContainer_obj::get_numChildren(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_873_get_numChildren)
HXDLIN( 873)		return this->_hx___children->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,get_numChildren,return )

bool DisplayObjectContainer_obj::get_tabChildren(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_878_get_tabChildren)
HXDLIN( 878)		return this->_hx___tabChildren;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,get_tabChildren,return )

bool DisplayObjectContainer_obj::set_tabChildren(bool value){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_882_set_tabChildren)
HXLINE( 883)		if ((this->_hx___tabChildren != value)) {
HXLINE( 885)			this->_hx___tabChildren = value;
HXLINE( 887)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("tabChildrenChange",44,91,b5,de),true,false));
            		}
HXLINE( 890)		return this->_hx___tabChildren;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,set_tabChildren,return )


::hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__new() {
	::hx::ObjectPtr< DisplayObjectContainer_obj > __this = new DisplayObjectContainer_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__alloc(::hx::Ctx *_hx_ctx) {
	DisplayObjectContainer_obj *__this = (DisplayObjectContainer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DisplayObjectContainer_obj), true, "openfl.display.DisplayObjectContainer"));
	*(void **)__this = DisplayObjectContainer_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DisplayObjectContainer_obj::DisplayObjectContainer_obj()
{
}

void DisplayObjectContainer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DisplayObjectContainer);
	HX_MARK_MEMBER_NAME(mouseChildren,"mouseChildren");
	HX_MARK_MEMBER_NAME(_hx___removedChildren,"__removedChildren");
	HX_MARK_MEMBER_NAME(_hx___tabChildren,"__tabChildren");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DisplayObjectContainer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mouseChildren,"mouseChildren");
	HX_VISIT_MEMBER_NAME(_hx___removedChildren,"__removedChildren");
	HX_VISIT_MEMBER_NAME(_hx___tabChildren,"__tabChildren");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val DisplayObjectContainer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"resolve") ) { return ::hx::Val( resolve_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addChild") ) { return ::hx::Val( addChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return ::hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return ::hx::Val( _hx___update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__cleanup") ) { return ::hx::Val( _hx___cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return ::hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"__tabTest") ) { return ::hx::Val( _hx___tabTest_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addChildAt") ) { return ::hx::Val( addChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getChildAt") ) { return ::hx::Val( getChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return ::hx::Val( _hx___renderGL_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"numChildren") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_numChildren() ); }
		if (HX_FIELD_EQ(inName,"tabChildren") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_tabChildren() ); }
		if (HX_FIELD_EQ(inName,"removeChild") ) { return ::hx::Val( removeChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return ::hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return ::hx::Val( _hx___renderDOM_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"swapChildren") ) { return ::hx::Val( swapChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return ::hx::Val( _hx___enterFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { return ::hx::Val( mouseChildren ); }
		if (HX_FIELD_EQ(inName,"__tabChildren") ) { return ::hx::Val( _hx___tabChildren ); }
		if (HX_FIELD_EQ(inName,"getChildIndex") ) { return ::hx::Val( getChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChildAt") ) { return ::hx::Val( removeChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"setChildIndex") ) { return ::hx::Val( setChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return ::hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return ::hx::Val( _hx___renderCairo_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getChildByName") ) { return ::hx::Val( getChildByName_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChildren") ) { return ::hx::Val( removeChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"swapChildrenAt") ) { return ::hx::Val( swapChildrenAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return ::hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return ::hx::Val( _hx___renderGLMask_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_numChildren") ) { return ::hx::Val( get_numChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tabChildren") ) { return ::hx::Val( get_tabChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_tabChildren") ) { return ::hx::Val( set_tabChildren_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__renderDOMClear") ) { return ::hx::Val( _hx___renderDOMClear_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__removedChildren") ) { return ::hx::Val( _hx___removedChildren ); }
		if (HX_FIELD_EQ(inName,"stopAllMovieClips") ) { return ::hx::Val( stopAllMovieClips_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getFilterBounds") ) { return ::hx::Val( _hx___getFilterBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getRenderBounds") ) { return ::hx::Val( _hx___getRenderBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return ::hx::Val( _hx___renderCairoMask_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__dispatchChildren") ) { return ::hx::Val( _hx___dispatchChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"__readGraphicsData") ) { return ::hx::Val( _hx___readGraphicsData_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return ::hx::Val( _hx___renderCanvasMask_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__setStageReference") ) { return ::hx::Val( _hx___setStageReference_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopAllMovieClips") ) { return ::hx::Val( _hx___stopAllMovieClips_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getObjectsUnderPoint") ) { return ::hx::Val( getObjectsUnderPoint_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__shouldCacheHardware") ) { return ::hx::Val( _hx___shouldCacheHardware_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__cleanupRemovedChildren") ) { return ::hx::Val( _hx___cleanupRemovedChildren_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__setWorldTransformInvalid") ) { return ::hx::Val( _hx___setWorldTransformInvalid_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"areInaccessibleObjectsUnderPoint") ) { return ::hx::Val( areInaccessibleObjectsUnderPoint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val DisplayObjectContainer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"tabChildren") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_tabChildren(inValue.Cast< bool >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { mouseChildren=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__tabChildren") ) { _hx___tabChildren=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__removedChildren") ) { _hx___removedChildren=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DisplayObjectContainer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mouseChildren",84,18,6b,ff));
	outFields->push(HX_("numChildren",a5,69,80,5c));
	outFields->push(HX_("tabChildren",b4,0c,86,4b));
	outFields->push(HX_("__removedChildren",df,c5,0e,d3));
	outFields->push(HX_("__tabChildren",94,4d,fe,93));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DisplayObjectContainer_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(DisplayObjectContainer_obj,mouseChildren),HX_("mouseChildren",84,18,6b,ff)},
	{::hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(DisplayObjectContainer_obj,_hx___removedChildren),HX_("__removedChildren",df,c5,0e,d3)},
	{::hx::fsBool,(int)offsetof(DisplayObjectContainer_obj,_hx___tabChildren),HX_("__tabChildren",94,4d,fe,93)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *DisplayObjectContainer_obj_sStaticStorageInfo = 0;
#endif

static ::String DisplayObjectContainer_obj_sMemberFields[] = {
	HX_("mouseChildren",84,18,6b,ff),
	HX_("__removedChildren",df,c5,0e,d3),
	HX_("__tabChildren",94,4d,fe,93),
	HX_("addChild",bb,cf,16,bf),
	HX_("addChildAt",8e,ad,36,ce),
	HX_("areInaccessibleObjectsUnderPoint",3d,22,9b,1e),
	HX_("contains",1f,5a,7b,2c),
	HX_("getChildAt",b9,07,0e,b6),
	HX_("getChildByName",88,b9,73,a3),
	HX_("getChildIndex",0c,68,02,b9),
	HX_("getObjectsUnderPoint",96,10,d5,80),
	HX_("removeChild",b8,86,ed,43),
	HX_("removeChildAt",cb,dd,66,3f),
	HX_("removeChildren",a3,55,c0,3a),
	HX_("resolve",ec,12,60,67),
	HX_("setChildIndex",18,4a,08,fe),
	HX_("stopAllMovieClips",f2,60,f8,a0),
	HX_("swapChildren",f2,4a,53,e0),
	HX_("swapChildrenAt",85,a4,f1,13),
	HX_("__cleanup",04,5d,90,2c),
	HX_("__cleanupRemovedChildren",5b,84,61,c1),
	HX_("__dispatchChildren",39,81,f4,f4),
	HX_("__enterFrame",15,7f,e3,3a),
	HX_("__getBounds",8b,58,a0,10),
	HX_("__getFilterBounds",e3,3a,ba,18),
	HX_("__getRenderBounds",01,11,b8,7b),
	HX_("__hitTest",25,b1,cd,63),
	HX_("__hitTestMask",b1,14,fd,3b),
	HX_("__readGraphicsData",2b,10,91,f2),
	HX_("__renderCairo",32,9e,42,55),
	HX_("__renderCairoMask",3e,0c,22,6b),
	HX_("__renderCanvas",ee,db,58,48),
	HX_("__renderCanvasMask",fa,d7,ef,51),
	HX_("__renderDOM",ac,f5,83,fb),
	HX_("__renderDOMClear",41,dc,ee,79),
	HX_("__renderGL",1b,1e,14,56),
	HX_("__renderGLMask",a7,34,7c,b4),
	HX_("__setStageReference",4f,e5,e5,f4),
	HX_("__setWorldTransformInvalid",7b,c9,b9,d4),
	HX_("__shouldCacheHardware",b7,af,f5,89),
	HX_("__stopAllMovieClips",d2,89,e8,53),
	HX_("__tabTest",27,ee,bd,c6),
	HX_("__update",29,f1,34,2f),
	HX_("get_numChildren",3c,21,62,1d),
	HX_("get_tabChildren",4b,c4,67,0c),
	HX_("set_tabChildren",57,41,33,08),
	::String(null()) };

::hx::Class DisplayObjectContainer_obj::__mClass;

void DisplayObjectContainer_obj::__register()
{
	DisplayObjectContainer_obj _hx_dummy;
	DisplayObjectContainer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.display.DisplayObjectContainer",4a,52,ef,89);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DisplayObjectContainer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DisplayObjectContainer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayObjectContainer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayObjectContainer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
