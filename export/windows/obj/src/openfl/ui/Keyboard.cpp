// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_openfl_ui_Keyboard
#include <openfl/ui/Keyboard.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_128_isAccessible,"openfl.ui.Keyboard","isAccessible",0xa9f8adcb,"openfl.ui.Keyboard.isAccessible","openfl/ui/Keyboard.hx",128,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_134___convertKeyCode,"openfl.ui.Keyboard","__convertKeyCode",0x9705d864,"openfl.ui.Keyboard.__convertKeyCode","openfl/ui/Keyboard.hx",134,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_377___getCharCode,"openfl.ui.Keyboard","__getCharCode",0x5c5ae14e,"openfl.ui.Keyboard.__getCharCode","openfl/ui/Keyboard.hx",377,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_511___getKeyLocation,"openfl.ui.Keyboard","__getKeyLocation",0xfd1dd5a9,"openfl.ui.Keyboard.__getKeyLocation","openfl/ui/Keyboard.hx",511,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_12_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",12,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_14_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",14,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_15_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",15,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_16_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",16,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_17_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",17,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_18_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",18,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_19_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",19,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_20_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",20,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_21_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",21,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_22_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",22,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_23_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",23,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_24_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",24,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_25_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",25,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_26_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",26,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_27_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",27,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_28_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",28,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_29_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",29,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_30_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",30,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_31_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",31,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_32_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",32,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_33_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",33,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_34_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",34,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_35_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",35,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_36_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",36,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_37_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",37,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_38_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",38,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_39_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",39,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_40_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",40,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_41_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",41,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_42_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",42,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_43_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",43,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_44_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",44,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_45_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",45,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_46_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",46,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_47_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",47,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_48_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",48,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_49_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",49,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_50_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",50,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_51_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",51,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_52_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",52,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_53_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",53,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_54_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",54,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_55_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",55,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_56_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",56,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_57_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",57,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_58_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",58,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_59_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",59,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_60_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",60,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_61_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",61,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_62_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",62,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_63_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",63,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_64_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",64,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_65_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",65,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_66_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",66,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_67_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",67,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_68_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",68,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_69_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",69,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_70_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",70,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_71_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",71,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_72_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",72,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_73_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",73,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_74_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",74,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_75_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",75,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_76_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",76,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_77_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",77,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_78_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",78,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_79_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",79,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_80_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",80,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_81_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",81,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_82_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",82,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_83_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",83,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_84_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",84,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_85_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",85,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_86_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",86,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_87_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",87,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_90_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",90,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_92_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",92,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_93_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",93,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_94_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",94,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_95_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",95,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_96_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",96,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_97_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",97,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_98_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",98,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_99_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",99,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_100_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",100,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_101_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",101,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_102_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",102,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_103_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",103,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_104_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",104,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_105_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",105,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_108_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",108,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_110_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",110,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_111_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",111,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_112_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",112,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_113_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",113,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_114_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",114,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_115_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",115,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_116_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",116,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_117_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",117,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_118_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",118,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_119_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",119,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_120_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",120,0x5fb867bb)
namespace openfl{
namespace ui{

void Keyboard_obj::__construct() { }

Dynamic Keyboard_obj::__CreateEmpty() { return new Keyboard_obj; }

void *Keyboard_obj::_hx_vtable = 0;

Dynamic Keyboard_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Keyboard_obj > _hx_result = new Keyboard_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Keyboard_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0c5957a7;
}

int Keyboard_obj::NUMBER_0;

int Keyboard_obj::NUMBER_1;

int Keyboard_obj::NUMBER_2;

int Keyboard_obj::NUMBER_3;

int Keyboard_obj::NUMBER_4;

int Keyboard_obj::NUMBER_5;

int Keyboard_obj::NUMBER_6;

int Keyboard_obj::NUMBER_7;

int Keyboard_obj::NUMBER_8;

int Keyboard_obj::NUMBER_9;

int Keyboard_obj::A;

int Keyboard_obj::B;

int Keyboard_obj::C;

int Keyboard_obj::D;

int Keyboard_obj::E;

int Keyboard_obj::F;

int Keyboard_obj::G;

int Keyboard_obj::H;

int Keyboard_obj::I;

int Keyboard_obj::J;

int Keyboard_obj::K;

int Keyboard_obj::L;

int Keyboard_obj::M;

int Keyboard_obj::N;

int Keyboard_obj::O;

int Keyboard_obj::P;

int Keyboard_obj::Q;

int Keyboard_obj::R;

int Keyboard_obj::S;

int Keyboard_obj::T;

int Keyboard_obj::U;

int Keyboard_obj::V;

int Keyboard_obj::W;

int Keyboard_obj::X;

int Keyboard_obj::Y;

int Keyboard_obj::Z;

int Keyboard_obj::NUMPAD_0;

int Keyboard_obj::NUMPAD_1;

int Keyboard_obj::NUMPAD_2;

int Keyboard_obj::NUMPAD_3;

int Keyboard_obj::NUMPAD_4;

int Keyboard_obj::NUMPAD_5;

int Keyboard_obj::NUMPAD_6;

int Keyboard_obj::NUMPAD_7;

int Keyboard_obj::NUMPAD_8;

int Keyboard_obj::NUMPAD_9;

int Keyboard_obj::NUMPAD_MULTIPLY;

int Keyboard_obj::NUMPAD_ADD;

int Keyboard_obj::NUMPAD_ENTER;

int Keyboard_obj::NUMPAD_SUBTRACT;

int Keyboard_obj::NUMPAD_DECIMAL;

int Keyboard_obj::NUMPAD_DIVIDE;

int Keyboard_obj::F1;

int Keyboard_obj::F2;

int Keyboard_obj::F3;

int Keyboard_obj::F4;

int Keyboard_obj::F5;

int Keyboard_obj::F6;

int Keyboard_obj::F7;

int Keyboard_obj::F8;

int Keyboard_obj::F9;

int Keyboard_obj::F10;

int Keyboard_obj::F11;

int Keyboard_obj::F12;

int Keyboard_obj::F13;

int Keyboard_obj::F14;

int Keyboard_obj::F15;

int Keyboard_obj::BACKSPACE;

int Keyboard_obj::TAB;

int Keyboard_obj::ALTERNATE;

int Keyboard_obj::ENTER;

int Keyboard_obj::COMMAND;

int Keyboard_obj::SHIFT;

int Keyboard_obj::CONTROL;

int Keyboard_obj::BREAK;

int Keyboard_obj::CAPS_LOCK;

int Keyboard_obj::NUMPAD;

int Keyboard_obj::ESCAPE;

int Keyboard_obj::SPACE;

int Keyboard_obj::PAGE_UP;

int Keyboard_obj::PAGE_DOWN;

int Keyboard_obj::END;

int Keyboard_obj::HOME;

int Keyboard_obj::LEFT;

int Keyboard_obj::RIGHT;

int Keyboard_obj::UP;

int Keyboard_obj::DOWN;

int Keyboard_obj::INSERT;

int Keyboard_obj::DELETE;

int Keyboard_obj::NUMLOCK;

int Keyboard_obj::SEMICOLON;

int Keyboard_obj::EQUAL;

int Keyboard_obj::COMMA;

int Keyboard_obj::MINUS;

int Keyboard_obj::PERIOD;

int Keyboard_obj::SLASH;

int Keyboard_obj::BACKQUOTE;

int Keyboard_obj::LEFTBRACKET;

int Keyboard_obj::BACKSLASH;

int Keyboard_obj::RIGHTBRACKET;

int Keyboard_obj::QUOTE;

bool Keyboard_obj::capsLock;

bool Keyboard_obj::numLock;

bool Keyboard_obj::isAccessible(){
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_128_isAccessible)
HXDLIN( 128)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Keyboard_obj,isAccessible,return )

int Keyboard_obj::_hx___convertKeyCode(int key){
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_134___convertKeyCode)
HXDLIN( 134)		switch((int)(key)){
            			case (int)8: {
HXLINE( 136)				return 8;
            			}
            			break;
            			case (int)9: {
HXLINE( 137)				return 9;
            			}
            			break;
            			case (int)13: {
HXLINE( 138)				return 13;
            			}
            			break;
            			case (int)27: {
HXLINE( 139)				return 27;
            			}
            			break;
            			case (int)32: {
HXLINE( 140)				return 32;
            			}
            			break;
            			case (int)33: {
HXLINE( 141)				return 49;
            			}
            			break;
            			case (int)34: {
HXLINE( 142)				return 222;
            			}
            			break;
            			case (int)35: {
HXLINE( 143)				return 51;
            			}
            			break;
            			case (int)36: {
HXLINE( 144)				return 52;
            			}
            			break;
            			case (int)37: {
HXLINE( 145)				return 53;
            			}
            			break;
            			case (int)38: {
HXLINE( 146)				return 55;
            			}
            			break;
            			case (int)39: {
HXLINE( 147)				return 222;
            			}
            			break;
            			case (int)40: {
HXLINE( 148)				return 57;
            			}
            			break;
            			case (int)41: {
HXLINE( 149)				return 48;
            			}
            			break;
            			case (int)42: {
HXLINE( 150)				return 56;
            			}
            			break;
            			case (int)44: {
HXLINE( 152)				return 188;
            			}
            			break;
            			case (int)45: {
HXLINE( 153)				return 189;
            			}
            			break;
            			case (int)46: {
HXLINE( 154)				return 190;
            			}
            			break;
            			case (int)47: {
HXLINE( 155)				return 191;
            			}
            			break;
            			case (int)48: {
HXLINE( 156)				return 48;
            			}
            			break;
            			case (int)49: {
HXLINE( 157)				return 49;
            			}
            			break;
            			case (int)50: {
HXLINE( 158)				return 50;
            			}
            			break;
            			case (int)51: {
HXLINE( 159)				return 51;
            			}
            			break;
            			case (int)52: {
HXLINE( 160)				return 52;
            			}
            			break;
            			case (int)53: {
HXLINE( 161)				return 53;
            			}
            			break;
            			case (int)54: {
HXLINE( 162)				return 54;
            			}
            			break;
            			case (int)55: {
HXLINE( 163)				return 55;
            			}
            			break;
            			case (int)56: {
HXLINE( 164)				return 56;
            			}
            			break;
            			case (int)57: {
HXLINE( 165)				return 57;
            			}
            			break;
            			case (int)58: {
HXLINE( 166)				return 186;
            			}
            			break;
            			case (int)59: {
HXLINE( 167)				return 186;
            			}
            			break;
            			case (int)60: {
HXLINE( 168)				return 60;
            			}
            			break;
            			case (int)61: {
HXLINE( 169)				return 187;
            			}
            			break;
            			case (int)62: {
HXLINE( 170)				return 190;
            			}
            			break;
            			case (int)63: {
HXLINE( 171)				return 191;
            			}
            			break;
            			case (int)64: {
HXLINE( 172)				return 50;
            			}
            			break;
            			case (int)91: {
HXLINE( 173)				return 219;
            			}
            			break;
            			case (int)92: {
HXLINE( 174)				return 220;
            			}
            			break;
            			case (int)93: {
HXLINE( 175)				return 221;
            			}
            			break;
            			case (int)94: {
HXLINE( 176)				return 54;
            			}
            			break;
            			case (int)95: {
HXLINE( 177)				return 189;
            			}
            			break;
            			case (int)96: {
HXLINE( 178)				return 192;
            			}
            			break;
            			case (int)97: {
HXLINE( 179)				return 65;
            			}
            			break;
            			case (int)98: {
HXLINE( 180)				return 66;
            			}
            			break;
            			case (int)99: {
HXLINE( 181)				return 67;
            			}
            			break;
            			case (int)100: {
HXLINE( 182)				return 68;
            			}
            			break;
            			case (int)101: {
HXLINE( 183)				return 69;
            			}
            			break;
            			case (int)102: {
HXLINE( 184)				return 70;
            			}
            			break;
            			case (int)103: {
HXLINE( 185)				return 71;
            			}
            			break;
            			case (int)104: {
HXLINE( 186)				return 72;
            			}
            			break;
            			case (int)105: {
HXLINE( 187)				return 73;
            			}
            			break;
            			case (int)106: {
HXLINE( 188)				return 74;
            			}
            			break;
            			case (int)107: {
HXLINE( 189)				return 75;
            			}
            			break;
            			case (int)108: {
HXLINE( 190)				return 76;
            			}
            			break;
            			case (int)109: {
HXLINE( 191)				return 77;
            			}
            			break;
            			case (int)110: {
HXLINE( 192)				return 78;
            			}
            			break;
            			case (int)111: {
HXLINE( 193)				return 79;
            			}
            			break;
            			case (int)112: {
HXLINE( 194)				return 80;
            			}
            			break;
            			case (int)113: {
HXLINE( 195)				return 81;
            			}
            			break;
            			case (int)114: {
HXLINE( 196)				return 82;
            			}
            			break;
            			case (int)115: {
HXLINE( 197)				return 83;
            			}
            			break;
            			case (int)116: {
HXLINE( 198)				return 84;
            			}
            			break;
            			case (int)117: {
HXLINE( 199)				return 85;
            			}
            			break;
            			case (int)118: {
HXLINE( 200)				return 86;
            			}
            			break;
            			case (int)119: {
HXLINE( 201)				return 87;
            			}
            			break;
            			case (int)120: {
HXLINE( 202)				return 88;
            			}
            			break;
            			case (int)121: {
HXLINE( 203)				return 89;
            			}
            			break;
            			case (int)122: {
HXLINE( 204)				return 90;
            			}
            			break;
            			case (int)127: {
HXLINE( 205)				return 46;
            			}
            			break;
            			case (int)1073741881: {
HXLINE( 206)				return 20;
            			}
            			break;
            			case (int)1073741882: {
HXLINE( 207)				return 112;
            			}
            			break;
            			case (int)1073741883: {
HXLINE( 208)				return 113;
            			}
            			break;
            			case (int)1073741884: {
HXLINE( 209)				return 114;
            			}
            			break;
            			case (int)1073741885: {
HXLINE( 210)				return 115;
            			}
            			break;
            			case (int)1073741886: {
HXLINE( 211)				return 116;
            			}
            			break;
            			case (int)1073741887: {
HXLINE( 212)				return 117;
            			}
            			break;
            			case (int)1073741888: {
HXLINE( 213)				return 118;
            			}
            			break;
            			case (int)1073741889: {
HXLINE( 214)				return 119;
            			}
            			break;
            			case (int)1073741890: {
HXLINE( 215)				return 120;
            			}
            			break;
            			case (int)1073741891: {
HXLINE( 216)				return 121;
            			}
            			break;
            			case (int)1073741892: {
HXLINE( 217)				return 122;
            			}
            			break;
            			case (int)1073741893: {
HXLINE( 218)				return 123;
            			}
            			break;
            			case (int)1073741894: {
HXLINE( 219)				return 301;
            			}
            			break;
            			case (int)1073741895: {
HXLINE( 220)				return 145;
            			}
            			break;
            			case (int)1073741896: {
HXLINE( 221)				return 19;
            			}
            			break;
            			case (int)1073741897: {
HXLINE( 222)				return 45;
            			}
            			break;
            			case (int)1073741898: {
HXLINE( 223)				return 36;
            			}
            			break;
            			case (int)1073741899: {
HXLINE( 224)				return 33;
            			}
            			break;
            			case (int)1073741901: {
HXLINE( 225)				return 35;
            			}
            			break;
            			case (int)1073741902: {
HXLINE( 226)				return 34;
            			}
            			break;
            			case (int)1073741903: {
HXLINE( 227)				return 39;
            			}
            			break;
            			case (int)1073741904: {
HXLINE( 228)				return 37;
            			}
            			break;
            			case (int)1073741905: {
HXLINE( 229)				return 40;
            			}
            			break;
            			case (int)1073741906: {
HXLINE( 230)				return 38;
            			}
            			break;
            			case (int)1073741907: {
HXLINE( 231)				return 144;
            			}
            			break;
            			case (int)1073741908: {
HXLINE( 232)				return 111;
            			}
            			break;
            			case (int)1073741909: {
HXLINE( 233)				return 106;
            			}
            			break;
            			case (int)1073741910: {
HXLINE( 234)				return 109;
            			}
            			break;
            			case (int)1073741911: {
HXLINE( 235)				return 107;
            			}
            			break;
            			case (int)1073741912: {
HXLINE( 236)				return 13;
            			}
            			break;
            			case (int)1073741913: {
HXLINE( 237)				return 97;
            			}
            			break;
            			case (int)1073741914: {
HXLINE( 238)				return 98;
            			}
            			break;
            			case (int)1073741915: {
HXLINE( 239)				return 99;
            			}
            			break;
            			case (int)1073741916: {
HXLINE( 240)				return 100;
            			}
            			break;
            			case (int)1073741917: {
HXLINE( 241)				return 101;
            			}
            			break;
            			case (int)1073741918: {
HXLINE( 242)				return 102;
            			}
            			break;
            			case (int)1073741919: {
HXLINE( 243)				return 103;
            			}
            			break;
            			case (int)1073741920: {
HXLINE( 244)				return 104;
            			}
            			break;
            			case (int)1073741921: {
HXLINE( 245)				return 105;
            			}
            			break;
            			case (int)1073741922: {
HXLINE( 246)				return 96;
            			}
            			break;
            			case (int)1073741923: {
HXLINE( 247)				return 110;
            			}
            			break;
            			case (int)1073741925: {
HXLINE( 248)				return 302;
            			}
            			break;
            			case (int)1073741928: {
HXLINE( 251)				return 124;
            			}
            			break;
            			case (int)1073741929: {
HXLINE( 252)				return 125;
            			}
            			break;
            			case (int)1073741930: {
HXLINE( 253)				return 126;
            			}
            			break;
            			case (int)1073741982: {
HXLINE( 284)				return 13;
            			}
            			break;
            			case (int)1073742044: {
HXLINE( 335)				return 110;
            			}
            			break;
            			case (int)1073742048: {
HXLINE( 337)				return 17;
            			}
            			break;
            			case (int)1073742049: {
HXLINE( 338)				return 16;
            			}
            			break;
            			case (int)1073742050: {
HXLINE( 339)				return 18;
            			}
            			break;
            			case (int)1073742051: {
HXLINE( 340)				return 15;
            			}
            			break;
            			case (int)1073742052: {
HXLINE( 341)				return 17;
            			}
            			break;
            			case (int)1073742053: {
HXLINE( 342)				return 16;
            			}
            			break;
            			case (int)1073742054: {
HXLINE( 343)				return 18;
            			}
            			break;
            			case (int)1073742055: {
HXLINE( 344)				return 15;
            			}
            			break;
            			default:{
HXLINE( 371)				return key;
            			}
            		}
HXLINE( 134)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Keyboard_obj,_hx___convertKeyCode,return )

int Keyboard_obj::_hx___getCharCode(int key,::hx::Null< bool >  __o_shift){
            		bool shift = __o_shift.Default(false);
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_377___getCharCode)
HXLINE( 378)		if (!(shift)) {
HXLINE( 380)			switch((int)(key)){
            				case (int)8: {
HXLINE( 383)					return 8;
            				}
            				break;
            				case (int)9: {
HXLINE( 385)					return 9;
            				}
            				break;
            				case (int)13: {
HXLINE( 387)					return 13;
            				}
            				break;
            				case (int)27: {
HXLINE( 389)					return 27;
            				}
            				break;
            				case (int)32: {
HXLINE( 391)					return 32;
            				}
            				break;
            				case (int)186: {
HXLINE( 393)					return 59;
            				}
            				break;
            				case (int)187: {
HXLINE( 395)					return 61;
            				}
            				break;
            				case (int)188: {
HXLINE( 397)					return 44;
            				}
            				break;
            				case (int)189: {
HXLINE( 399)					return 45;
            				}
            				break;
            				case (int)190: {
HXLINE( 401)					return 46;
            				}
            				break;
            				case (int)191: {
HXLINE( 403)					return 47;
            				}
            				break;
            				case (int)192: {
HXLINE( 405)					return 96;
            				}
            				break;
            				case (int)219: {
HXLINE( 407)					return 91;
            				}
            				break;
            				case (int)220: {
HXLINE( 409)					return 92;
            				}
            				break;
            				case (int)221: {
HXLINE( 411)					return 93;
            				}
            				break;
            				case (int)222: {
HXLINE( 413)					return 39;
            				}
            				break;
            			}
HXLINE( 416)			bool _hx_tmp;
HXDLIN( 416)			if ((key >= 48)) {
HXLINE( 416)				_hx_tmp = (key <= 57);
            			}
            			else {
HXLINE( 416)				_hx_tmp = false;
            			}
HXDLIN( 416)			if (_hx_tmp) {
HXLINE( 418)				return ((key - 48) + 48);
            			}
HXLINE( 421)			bool _hx_tmp1;
HXDLIN( 421)			if ((key >= 65)) {
HXLINE( 421)				_hx_tmp1 = (key <= 90);
            			}
            			else {
HXLINE( 421)				_hx_tmp1 = false;
            			}
HXDLIN( 421)			if (_hx_tmp1) {
HXLINE( 423)				return ((key - 65) + 97);
            			}
            		}
            		else {
HXLINE( 428)			switch((int)(key)){
            				case (int)48: {
HXLINE( 431)					return 41;
            				}
            				break;
            				case (int)49: {
HXLINE( 433)					return 33;
            				}
            				break;
            				case (int)50: {
HXLINE( 435)					return 64;
            				}
            				break;
            				case (int)51: {
HXLINE( 437)					return 35;
            				}
            				break;
            				case (int)52: {
HXLINE( 439)					return 36;
            				}
            				break;
            				case (int)53: {
HXLINE( 441)					return 37;
            				}
            				break;
            				case (int)54: {
HXLINE( 443)					return 94;
            				}
            				break;
            				case (int)55: {
HXLINE( 445)					return 38;
            				}
            				break;
            				case (int)56: {
HXLINE( 447)					return 42;
            				}
            				break;
            				case (int)57: {
HXLINE( 449)					return 40;
            				}
            				break;
            				case (int)186: {
HXLINE( 451)					return 58;
            				}
            				break;
            				case (int)187: {
HXLINE( 453)					return 43;
            				}
            				break;
            				case (int)188: {
HXLINE( 455)					return 60;
            				}
            				break;
            				case (int)189: {
HXLINE( 457)					return 95;
            				}
            				break;
            				case (int)190: {
HXLINE( 459)					return 62;
            				}
            				break;
            				case (int)191: {
HXLINE( 461)					return 63;
            				}
            				break;
            				case (int)192: {
HXLINE( 463)					return 126;
            				}
            				break;
            				case (int)219: {
HXLINE( 465)					return 123;
            				}
            				break;
            				case (int)220: {
HXLINE( 467)					return 124;
            				}
            				break;
            				case (int)221: {
HXLINE( 469)					return 125;
            				}
            				break;
            				case (int)222: {
HXLINE( 471)					return 34;
            				}
            				break;
            			}
HXLINE( 474)			bool _hx_tmp;
HXDLIN( 474)			if ((key >= 65)) {
HXLINE( 474)				_hx_tmp = (key <= 90);
            			}
            			else {
HXLINE( 474)				_hx_tmp = false;
            			}
HXDLIN( 474)			if (_hx_tmp) {
HXLINE( 476)				return ((key - 65) + 65);
            			}
            		}
HXLINE( 480)		bool _hx_tmp;
HXDLIN( 480)		if ((key >= 96)) {
HXLINE( 480)			_hx_tmp = (key <= 105);
            		}
            		else {
HXLINE( 480)			_hx_tmp = false;
            		}
HXDLIN( 480)		if (_hx_tmp) {
HXLINE( 482)			return ((key - 96) + 48);
            		}
HXLINE( 485)		switch((int)(key)){
            			case (int)8: {
HXLINE( 502)				return 8;
            			}
            			break;
            			case (int)13: {
HXLINE( 500)				return 13;
            			}
            			break;
            			case (int)46: {
HXLINE( 498)				return 127;
            			}
            			break;
            			case (int)106: {
HXLINE( 488)				return 42;
            			}
            			break;
            			case (int)107: {
HXLINE( 490)				return 43;
            			}
            			break;
            			case (int)108: {
HXLINE( 492)				return 44;
            			}
            			break;
            			case (int)110: {
HXLINE( 494)				return 45;
            			}
            			break;
            			case (int)111: {
HXLINE( 496)				return 46;
            			}
            			break;
            		}
HXLINE( 505)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Keyboard_obj,_hx___getCharCode,return )

int Keyboard_obj::_hx___getKeyLocation(int key){
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_511___getKeyLocation)
HXDLIN( 511)		switch((int)(key)){
            			case (int)1073741908: case (int)1073741909: case (int)1073741910: case (int)1073741911: case (int)1073741912: case (int)1073741913: case (int)1073741914: case (int)1073741915: case (int)1073741916: case (int)1073741917: case (int)1073741918: case (int)1073741919: case (int)1073741920: case (int)1073741921: case (int)1073741922: case (int)1073741923: case (int)1073742044: {
HXLINE( 518)				return 3;
            			}
            			break;
            			case (int)1073742048: case (int)1073742049: case (int)1073742050: case (int)1073742051: {
HXLINE( 513)				return 1;
            			}
            			break;
            			case (int)1073742052: case (int)1073742053: case (int)1073742054: case (int)1073742055: {
HXLINE( 514)				return 2;
            			}
            			break;
            			default:{
HXLINE( 519)				return 0;
            			}
            		}
HXLINE( 511)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Keyboard_obj,_hx___getKeyLocation,return )


Keyboard_obj::Keyboard_obj()
{
}

bool Keyboard_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"numLock") ) { outValue = ( numLock ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"capsLock") ) { outValue = ( capsLock ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isAccessible") ) { outValue = isAccessible_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__getCharCode") ) { outValue = _hx___getCharCode_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__convertKeyCode") ) { outValue = _hx___convertKeyCode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__getKeyLocation") ) { outValue = _hx___getKeyLocation_dyn(); return true; }
	}
	return false;
}

bool Keyboard_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"numLock") ) { numLock=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"capsLock") ) { capsLock=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Keyboard_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Keyboard_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Keyboard_obj::NUMBER_0,HX_("NUMBER_0",fa,89,c6,33)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMBER_1,HX_("NUMBER_1",fb,89,c6,33)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMBER_2,HX_("NUMBER_2",fc,89,c6,33)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMBER_3,HX_("NUMBER_3",fd,89,c6,33)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMBER_4,HX_("NUMBER_4",fe,89,c6,33)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMBER_5,HX_("NUMBER_5",ff,89,c6,33)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMBER_6,HX_("NUMBER_6",00,8a,c6,33)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMBER_7,HX_("NUMBER_7",01,8a,c6,33)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMBER_8,HX_("NUMBER_8",02,8a,c6,33)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMBER_9,HX_("NUMBER_9",03,8a,c6,33)},
	{::hx::fsInt,(void *) &Keyboard_obj::A,HX_("A",41,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::B,HX_("B",42,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::C,HX_("C",43,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::D,HX_("D",44,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::E,HX_("E",45,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::F,HX_("F",46,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::G,HX_("G",47,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::H,HX_("H",48,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::I,HX_("I",49,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::J,HX_("J",4a,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::K,HX_("K",4b,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::L,HX_("L",4c,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::M,HX_("M",4d,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::N,HX_("N",4e,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::O,HX_("O",4f,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::P,HX_("P",50,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::Q,HX_("Q",51,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::R,HX_("R",52,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::S,HX_("S",53,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::T,HX_("T",54,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::U,HX_("U",55,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::V,HX_("V",56,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::W,HX_("W",57,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::X,HX_("X",58,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::Y,HX_("Y",59,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::Z,HX_("Z",5a,00,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMPAD_0,HX_("NUMPAD_0",fe,2e,b3,40)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMPAD_1,HX_("NUMPAD_1",ff,2e,b3,40)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMPAD_2,HX_("NUMPAD_2",00,2f,b3,40)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMPAD_3,HX_("NUMPAD_3",01,2f,b3,40)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMPAD_4,HX_("NUMPAD_4",02,2f,b3,40)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMPAD_5,HX_("NUMPAD_5",03,2f,b3,40)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMPAD_6,HX_("NUMPAD_6",04,2f,b3,40)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMPAD_7,HX_("NUMPAD_7",05,2f,b3,40)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMPAD_8,HX_("NUMPAD_8",06,2f,b3,40)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMPAD_9,HX_("NUMPAD_9",07,2f,b3,40)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMPAD_MULTIPLY,HX_("NUMPAD_MULTIPLY",16,d9,d8,96)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMPAD_ADD,HX_("NUMPAD_ADD",4f,8c,28,37)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMPAD_ENTER,HX_("NUMPAD_ENTER",c6,52,e2,0f)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMPAD_SUBTRACT,HX_("NUMPAD_SUBTRACT",06,6c,5d,f4)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMPAD_DECIMAL,HX_("NUMPAD_DECIMAL",bf,c5,36,01)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMPAD_DIVIDE,HX_("NUMPAD_DIVIDE",eb,41,1f,90)},
	{::hx::fsInt,(void *) &Keyboard_obj::F1,HX_("F1",2b,3d,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::F2,HX_("F2",2c,3d,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::F3,HX_("F3",2d,3d,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::F4,HX_("F4",2e,3d,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::F5,HX_("F5",2f,3d,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::F6,HX_("F6",30,3d,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::F7,HX_("F7",31,3d,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::F8,HX_("F8",32,3d,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::F9,HX_("F9",33,3d,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::F10,HX_("F10",a5,48,35,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::F11,HX_("F11",a6,48,35,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::F12,HX_("F12",a7,48,35,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::F13,HX_("F13",a8,48,35,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::F14,HX_("F14",a9,48,35,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::F15,HX_("F15",aa,48,35,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::BACKSPACE,HX_("BACKSPACE",1f,f5,42,c6)},
	{::hx::fsInt,(void *) &Keyboard_obj::TAB,HX_("TAB",35,f6,3f,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::ALTERNATE,HX_("ALTERNATE",1a,39,8c,30)},
	{::hx::fsInt,(void *) &Keyboard_obj::ENTER,HX_("ENTER",f8,a4,74,ee)},
	{::hx::fsInt,(void *) &Keyboard_obj::COMMAND,HX_("COMMAND",2b,45,41,01)},
	{::hx::fsInt,(void *) &Keyboard_obj::SHIFT,HX_("SHIFT",62,24,11,fa)},
	{::hx::fsInt,(void *) &Keyboard_obj::CONTROL,HX_("CONTROL",3d,3f,55,99)},
	{::hx::fsInt,(void *) &Keyboard_obj::BREAK,HX_("BREAK",9f,5c,da,36)},
	{::hx::fsInt,(void *) &Keyboard_obj::CAPS_LOCK,HX_("CAPS_LOCK",09,04,db,ce)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMPAD,HX_("NUMPAD",cd,ce,07,54)},
	{::hx::fsInt,(void *) &Keyboard_obj::ESCAPE,HX_("ESCAPE",81,ef,5c,8d)},
	{::hx::fsInt,(void *) &Keyboard_obj::SPACE,HX_("SPACE",a6,c4,54,ff)},
	{::hx::fsInt,(void *) &Keyboard_obj::PAGE_UP,HX_("PAGE_UP",8b,d9,3e,0b)},
	{::hx::fsInt,(void *) &Keyboard_obj::PAGE_DOWN,HX_("PAGE_DOWN",92,7b,93,70)},
	{::hx::fsInt,(void *) &Keyboard_obj::END,HX_("END",bb,9f,34,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::HOME,HX_("HOME",1f,92,d3,2f)},
	{::hx::fsInt,(void *) &Keyboard_obj::LEFT,HX_("LEFT",07,d0,70,32)},
	{::hx::fsInt,(void *) &Keyboard_obj::RIGHT,HX_("RIGHT",bc,43,52,67)},
	{::hx::fsInt,(void *) &Keyboard_obj::UP,HX_("UP",5b,4a,00,00)},
	{::hx::fsInt,(void *) &Keyboard_obj::DOWN,HX_("DOWN",62,c0,2e,2d)},
	{::hx::fsInt,(void *) &Keyboard_obj::INSERT,HX_("INSERT",39,ef,5f,50)},
	{::hx::fsInt,(void *) &Keyboard_obj::DELETE,HX_("DELETE",2b,6c,5b,1d)},
	{::hx::fsInt,(void *) &Keyboard_obj::NUMLOCK,HX_("NUMLOCK",11,e9,32,30)},
	{::hx::fsInt,(void *) &Keyboard_obj::SEMICOLON,HX_("SEMICOLON",11,86,2a,49)},
	{::hx::fsInt,(void *) &Keyboard_obj::EQUAL,HX_("EQUAL",94,07,71,f0)},
	{::hx::fsInt,(void *) &Keyboard_obj::COMMA,HX_("COMMA",b5,69,4b,c8)},
	{::hx::fsInt,(void *) &Keyboard_obj::MINUS,HX_("MINUS",50,b8,56,86)},
	{::hx::fsInt,(void *) &Keyboard_obj::PERIOD,HX_("PERIOD",01,0d,9e,ed)},
	{::hx::fsInt,(void *) &Keyboard_obj::SLASH,HX_("SLASH",1d,f8,af,fc)},
	{::hx::fsInt,(void *) &Keyboard_obj::BACKQUOTE,HX_("BACKQUOTE",95,8b,ce,a2)},
	{::hx::fsInt,(void *) &Keyboard_obj::LEFTBRACKET,HX_("LEFTBRACKET",e1,a8,04,a4)},
	{::hx::fsInt,(void *) &Keyboard_obj::BACKSLASH,HX_("BACKSLASH",96,28,9e,c3)},
	{::hx::fsInt,(void *) &Keyboard_obj::RIGHTBRACKET,HX_("RIGHTBRACKET",cc,45,32,57)},
	{::hx::fsInt,(void *) &Keyboard_obj::QUOTE,HX_("QUOTE",1c,5b,e0,db)},
	{::hx::fsBool,(void *) &Keyboard_obj::capsLock,HX_("capsLock",ac,08,c2,11)},
	{::hx::fsBool,(void *) &Keyboard_obj::numLock,HX_("numLock",51,41,38,9b)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Keyboard_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_0,"NUMBER_0");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_1,"NUMBER_1");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_2,"NUMBER_2");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_3,"NUMBER_3");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_4,"NUMBER_4");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_5,"NUMBER_5");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_6,"NUMBER_6");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_7,"NUMBER_7");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_8,"NUMBER_8");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_9,"NUMBER_9");
	HX_MARK_MEMBER_NAME(Keyboard_obj::A,"A");
	HX_MARK_MEMBER_NAME(Keyboard_obj::B,"B");
	HX_MARK_MEMBER_NAME(Keyboard_obj::C,"C");
	HX_MARK_MEMBER_NAME(Keyboard_obj::D,"D");
	HX_MARK_MEMBER_NAME(Keyboard_obj::E,"E");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F,"F");
	HX_MARK_MEMBER_NAME(Keyboard_obj::G,"G");
	HX_MARK_MEMBER_NAME(Keyboard_obj::H,"H");
	HX_MARK_MEMBER_NAME(Keyboard_obj::I,"I");
	HX_MARK_MEMBER_NAME(Keyboard_obj::J,"J");
	HX_MARK_MEMBER_NAME(Keyboard_obj::K,"K");
	HX_MARK_MEMBER_NAME(Keyboard_obj::L,"L");
	HX_MARK_MEMBER_NAME(Keyboard_obj::M,"M");
	HX_MARK_MEMBER_NAME(Keyboard_obj::N,"N");
	HX_MARK_MEMBER_NAME(Keyboard_obj::O,"O");
	HX_MARK_MEMBER_NAME(Keyboard_obj::P,"P");
	HX_MARK_MEMBER_NAME(Keyboard_obj::Q,"Q");
	HX_MARK_MEMBER_NAME(Keyboard_obj::R,"R");
	HX_MARK_MEMBER_NAME(Keyboard_obj::S,"S");
	HX_MARK_MEMBER_NAME(Keyboard_obj::T,"T");
	HX_MARK_MEMBER_NAME(Keyboard_obj::U,"U");
	HX_MARK_MEMBER_NAME(Keyboard_obj::V,"V");
	HX_MARK_MEMBER_NAME(Keyboard_obj::W,"W");
	HX_MARK_MEMBER_NAME(Keyboard_obj::X,"X");
	HX_MARK_MEMBER_NAME(Keyboard_obj::Y,"Y");
	HX_MARK_MEMBER_NAME(Keyboard_obj::Z,"Z");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_0,"NUMPAD_0");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_1,"NUMPAD_1");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_2,"NUMPAD_2");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_3,"NUMPAD_3");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_4,"NUMPAD_4");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_5,"NUMPAD_5");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_6,"NUMPAD_6");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_7,"NUMPAD_7");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_8,"NUMPAD_8");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_9,"NUMPAD_9");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_MULTIPLY,"NUMPAD_MULTIPLY");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_ADD,"NUMPAD_ADD");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_ENTER,"NUMPAD_ENTER");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_SUBTRACT,"NUMPAD_SUBTRACT");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_DECIMAL,"NUMPAD_DECIMAL");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_DIVIDE,"NUMPAD_DIVIDE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F1,"F1");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F2,"F2");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F3,"F3");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F4,"F4");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F5,"F5");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F6,"F6");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F7,"F7");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F8,"F8");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F9,"F9");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F10,"F10");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F11,"F11");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F12,"F12");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F13,"F13");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F14,"F14");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F15,"F15");
	HX_MARK_MEMBER_NAME(Keyboard_obj::BACKSPACE,"BACKSPACE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::TAB,"TAB");
	HX_MARK_MEMBER_NAME(Keyboard_obj::ALTERNATE,"ALTERNATE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::ENTER,"ENTER");
	HX_MARK_MEMBER_NAME(Keyboard_obj::COMMAND,"COMMAND");
	HX_MARK_MEMBER_NAME(Keyboard_obj::SHIFT,"SHIFT");
	HX_MARK_MEMBER_NAME(Keyboard_obj::CONTROL,"CONTROL");
	HX_MARK_MEMBER_NAME(Keyboard_obj::BREAK,"BREAK");
	HX_MARK_MEMBER_NAME(Keyboard_obj::CAPS_LOCK,"CAPS_LOCK");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD,"NUMPAD");
	HX_MARK_MEMBER_NAME(Keyboard_obj::ESCAPE,"ESCAPE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::SPACE,"SPACE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::PAGE_UP,"PAGE_UP");
	HX_MARK_MEMBER_NAME(Keyboard_obj::PAGE_DOWN,"PAGE_DOWN");
	HX_MARK_MEMBER_NAME(Keyboard_obj::END,"END");
	HX_MARK_MEMBER_NAME(Keyboard_obj::HOME,"HOME");
	HX_MARK_MEMBER_NAME(Keyboard_obj::LEFT,"LEFT");
	HX_MARK_MEMBER_NAME(Keyboard_obj::RIGHT,"RIGHT");
	HX_MARK_MEMBER_NAME(Keyboard_obj::UP,"UP");
	HX_MARK_MEMBER_NAME(Keyboard_obj::DOWN,"DOWN");
	HX_MARK_MEMBER_NAME(Keyboard_obj::INSERT,"INSERT");
	HX_MARK_MEMBER_NAME(Keyboard_obj::DELETE,"DELETE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMLOCK,"NUMLOCK");
	HX_MARK_MEMBER_NAME(Keyboard_obj::SEMICOLON,"SEMICOLON");
	HX_MARK_MEMBER_NAME(Keyboard_obj::EQUAL,"EQUAL");
	HX_MARK_MEMBER_NAME(Keyboard_obj::COMMA,"COMMA");
	HX_MARK_MEMBER_NAME(Keyboard_obj::MINUS,"MINUS");
	HX_MARK_MEMBER_NAME(Keyboard_obj::PERIOD,"PERIOD");
	HX_MARK_MEMBER_NAME(Keyboard_obj::SLASH,"SLASH");
	HX_MARK_MEMBER_NAME(Keyboard_obj::BACKQUOTE,"BACKQUOTE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::LEFTBRACKET,"LEFTBRACKET");
	HX_MARK_MEMBER_NAME(Keyboard_obj::BACKSLASH,"BACKSLASH");
	HX_MARK_MEMBER_NAME(Keyboard_obj::RIGHTBRACKET,"RIGHTBRACKET");
	HX_MARK_MEMBER_NAME(Keyboard_obj::QUOTE,"QUOTE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::capsLock,"capsLock");
	HX_MARK_MEMBER_NAME(Keyboard_obj::numLock,"numLock");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Keyboard_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_0,"NUMBER_0");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_1,"NUMBER_1");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_2,"NUMBER_2");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_3,"NUMBER_3");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_4,"NUMBER_4");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_5,"NUMBER_5");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_6,"NUMBER_6");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_7,"NUMBER_7");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_8,"NUMBER_8");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_9,"NUMBER_9");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::A,"A");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::B,"B");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::C,"C");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::D,"D");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::E,"E");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F,"F");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::G,"G");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::H,"H");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::I,"I");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::J,"J");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::K,"K");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::L,"L");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::M,"M");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::N,"N");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::O,"O");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::P,"P");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::Q,"Q");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::R,"R");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::S,"S");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::T,"T");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::U,"U");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::V,"V");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::W,"W");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::X,"X");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::Y,"Y");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::Z,"Z");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_0,"NUMPAD_0");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_1,"NUMPAD_1");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_2,"NUMPAD_2");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_3,"NUMPAD_3");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_4,"NUMPAD_4");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_5,"NUMPAD_5");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_6,"NUMPAD_6");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_7,"NUMPAD_7");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_8,"NUMPAD_8");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_9,"NUMPAD_9");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_MULTIPLY,"NUMPAD_MULTIPLY");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_ADD,"NUMPAD_ADD");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_ENTER,"NUMPAD_ENTER");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_SUBTRACT,"NUMPAD_SUBTRACT");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_DECIMAL,"NUMPAD_DECIMAL");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_DIVIDE,"NUMPAD_DIVIDE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F1,"F1");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F2,"F2");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F3,"F3");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F4,"F4");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F5,"F5");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F6,"F6");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F7,"F7");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F8,"F8");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F9,"F9");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F10,"F10");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F11,"F11");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F12,"F12");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F13,"F13");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F14,"F14");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F15,"F15");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::BACKSPACE,"BACKSPACE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::TAB,"TAB");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::ALTERNATE,"ALTERNATE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::ENTER,"ENTER");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::COMMAND,"COMMAND");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::SHIFT,"SHIFT");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::CONTROL,"CONTROL");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::BREAK,"BREAK");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::CAPS_LOCK,"CAPS_LOCK");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD,"NUMPAD");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::ESCAPE,"ESCAPE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::SPACE,"SPACE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::PAGE_UP,"PAGE_UP");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::PAGE_DOWN,"PAGE_DOWN");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::END,"END");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::HOME,"HOME");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::LEFT,"LEFT");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::RIGHT,"RIGHT");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::UP,"UP");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::DOWN,"DOWN");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::INSERT,"INSERT");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::DELETE,"DELETE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMLOCK,"NUMLOCK");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::SEMICOLON,"SEMICOLON");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::EQUAL,"EQUAL");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::COMMA,"COMMA");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::MINUS,"MINUS");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::PERIOD,"PERIOD");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::SLASH,"SLASH");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::BACKQUOTE,"BACKQUOTE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::LEFTBRACKET,"LEFTBRACKET");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::BACKSLASH,"BACKSLASH");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::RIGHTBRACKET,"RIGHTBRACKET");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::QUOTE,"QUOTE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::capsLock,"capsLock");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::numLock,"numLock");
};

#endif

::hx::Class Keyboard_obj::__mClass;

static ::String Keyboard_obj_sStaticFields[] = {
	HX_("NUMBER_0",fa,89,c6,33),
	HX_("NUMBER_1",fb,89,c6,33),
	HX_("NUMBER_2",fc,89,c6,33),
	HX_("NUMBER_3",fd,89,c6,33),
	HX_("NUMBER_4",fe,89,c6,33),
	HX_("NUMBER_5",ff,89,c6,33),
	HX_("NUMBER_6",00,8a,c6,33),
	HX_("NUMBER_7",01,8a,c6,33),
	HX_("NUMBER_8",02,8a,c6,33),
	HX_("NUMBER_9",03,8a,c6,33),
	HX_("A",41,00,00,00),
	HX_("B",42,00,00,00),
	HX_("C",43,00,00,00),
	HX_("D",44,00,00,00),
	HX_("E",45,00,00,00),
	HX_("F",46,00,00,00),
	HX_("G",47,00,00,00),
	HX_("H",48,00,00,00),
	HX_("I",49,00,00,00),
	HX_("J",4a,00,00,00),
	HX_("K",4b,00,00,00),
	HX_("L",4c,00,00,00),
	HX_("M",4d,00,00,00),
	HX_("N",4e,00,00,00),
	HX_("O",4f,00,00,00),
	HX_("P",50,00,00,00),
	HX_("Q",51,00,00,00),
	HX_("R",52,00,00,00),
	HX_("S",53,00,00,00),
	HX_("T",54,00,00,00),
	HX_("U",55,00,00,00),
	HX_("V",56,00,00,00),
	HX_("W",57,00,00,00),
	HX_("X",58,00,00,00),
	HX_("Y",59,00,00,00),
	HX_("Z",5a,00,00,00),
	HX_("NUMPAD_0",fe,2e,b3,40),
	HX_("NUMPAD_1",ff,2e,b3,40),
	HX_("NUMPAD_2",00,2f,b3,40),
	HX_("NUMPAD_3",01,2f,b3,40),
	HX_("NUMPAD_4",02,2f,b3,40),
	HX_("NUMPAD_5",03,2f,b3,40),
	HX_("NUMPAD_6",04,2f,b3,40),
	HX_("NUMPAD_7",05,2f,b3,40),
	HX_("NUMPAD_8",06,2f,b3,40),
	HX_("NUMPAD_9",07,2f,b3,40),
	HX_("NUMPAD_MULTIPLY",16,d9,d8,96),
	HX_("NUMPAD_ADD",4f,8c,28,37),
	HX_("NUMPAD_ENTER",c6,52,e2,0f),
	HX_("NUMPAD_SUBTRACT",06,6c,5d,f4),
	HX_("NUMPAD_DECIMAL",bf,c5,36,01),
	HX_("NUMPAD_DIVIDE",eb,41,1f,90),
	HX_("F1",2b,3d,00,00),
	HX_("F2",2c,3d,00,00),
	HX_("F3",2d,3d,00,00),
	HX_("F4",2e,3d,00,00),
	HX_("F5",2f,3d,00,00),
	HX_("F6",30,3d,00,00),
	HX_("F7",31,3d,00,00),
	HX_("F8",32,3d,00,00),
	HX_("F9",33,3d,00,00),
	HX_("F10",a5,48,35,00),
	HX_("F11",a6,48,35,00),
	HX_("F12",a7,48,35,00),
	HX_("F13",a8,48,35,00),
	HX_("F14",a9,48,35,00),
	HX_("F15",aa,48,35,00),
	HX_("BACKSPACE",1f,f5,42,c6),
	HX_("TAB",35,f6,3f,00),
	HX_("ALTERNATE",1a,39,8c,30),
	HX_("ENTER",f8,a4,74,ee),
	HX_("COMMAND",2b,45,41,01),
	HX_("SHIFT",62,24,11,fa),
	HX_("CONTROL",3d,3f,55,99),
	HX_("BREAK",9f,5c,da,36),
	HX_("CAPS_LOCK",09,04,db,ce),
	HX_("NUMPAD",cd,ce,07,54),
	HX_("ESCAPE",81,ef,5c,8d),
	HX_("SPACE",a6,c4,54,ff),
	HX_("PAGE_UP",8b,d9,3e,0b),
	HX_("PAGE_DOWN",92,7b,93,70),
	HX_("END",bb,9f,34,00),
	HX_("HOME",1f,92,d3,2f),
	HX_("LEFT",07,d0,70,32),
	HX_("RIGHT",bc,43,52,67),
	HX_("UP",5b,4a,00,00),
	HX_("DOWN",62,c0,2e,2d),
	HX_("INSERT",39,ef,5f,50),
	HX_("DELETE",2b,6c,5b,1d),
	HX_("NUMLOCK",11,e9,32,30),
	HX_("SEMICOLON",11,86,2a,49),
	HX_("EQUAL",94,07,71,f0),
	HX_("COMMA",b5,69,4b,c8),
	HX_("MINUS",50,b8,56,86),
	HX_("PERIOD",01,0d,9e,ed),
	HX_("SLASH",1d,f8,af,fc),
	HX_("BACKQUOTE",95,8b,ce,a2),
	HX_("LEFTBRACKET",e1,a8,04,a4),
	HX_("BACKSLASH",96,28,9e,c3),
	HX_("RIGHTBRACKET",cc,45,32,57),
	HX_("QUOTE",1c,5b,e0,db),
	HX_("capsLock",ac,08,c2,11),
	HX_("numLock",51,41,38,9b),
	HX_("isAccessible",c0,82,fd,3f),
	HX_("__convertKeyCode",d9,cb,30,83),
	HX_("__getCharCode",b9,62,90,0a),
	HX_("__getKeyLocation",1e,c9,48,e9),
	::String(null())
};

void Keyboard_obj::__register()
{
	Keyboard_obj _hx_dummy;
	Keyboard_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.ui.Keyboard",43,b4,37,9a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Keyboard_obj::__GetStatic;
	__mClass->mSetStaticField = &Keyboard_obj::__SetStatic;
	__mClass->mMarkFunc = Keyboard_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Keyboard_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Keyboard_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Keyboard_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Keyboard_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Keyboard_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Keyboard_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_12_boot)
HXDLIN(  12)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("statics",05,3c,65,36), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("NUMLOCK",11,e9,32,30), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20)))))
            				->setFixed(1,HX_("BREAK",9f,5c,da,36), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))))));
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_14_boot)
HXDLIN(  14)		NUMBER_0 = 48;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_15_boot)
HXDLIN(  15)		NUMBER_1 = 49;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_16_boot)
HXDLIN(  16)		NUMBER_2 = 50;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_17_boot)
HXDLIN(  17)		NUMBER_3 = 51;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_18_boot)
HXDLIN(  18)		NUMBER_4 = 52;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_19_boot)
HXDLIN(  19)		NUMBER_5 = 53;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_20_boot)
HXDLIN(  20)		NUMBER_6 = 54;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_21_boot)
HXDLIN(  21)		NUMBER_7 = 55;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_22_boot)
HXDLIN(  22)		NUMBER_8 = 56;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_23_boot)
HXDLIN(  23)		NUMBER_9 = 57;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_24_boot)
HXDLIN(  24)		A = 65;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_25_boot)
HXDLIN(  25)		B = 66;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_26_boot)
HXDLIN(  26)		C = 67;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_27_boot)
HXDLIN(  27)		D = 68;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_28_boot)
HXDLIN(  28)		E = 69;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_29_boot)
HXDLIN(  29)		F = 70;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_30_boot)
HXDLIN(  30)		G = 71;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_31_boot)
HXDLIN(  31)		H = 72;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_32_boot)
HXDLIN(  32)		I = 73;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_33_boot)
HXDLIN(  33)		J = 74;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_34_boot)
HXDLIN(  34)		K = 75;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_35_boot)
HXDLIN(  35)		L = 76;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_36_boot)
HXDLIN(  36)		M = 77;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_37_boot)
HXDLIN(  37)		N = 78;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_38_boot)
HXDLIN(  38)		O = 79;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_39_boot)
HXDLIN(  39)		P = 80;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_40_boot)
HXDLIN(  40)		Q = 81;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_41_boot)
HXDLIN(  41)		R = 82;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_42_boot)
HXDLIN(  42)		S = 83;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_43_boot)
HXDLIN(  43)		T = 84;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_44_boot)
HXDLIN(  44)		U = 85;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_45_boot)
HXDLIN(  45)		V = 86;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_46_boot)
HXDLIN(  46)		W = 87;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_47_boot)
HXDLIN(  47)		X = 88;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_48_boot)
HXDLIN(  48)		Y = 89;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_49_boot)
HXDLIN(  49)		Z = 90;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_50_boot)
HXDLIN(  50)		NUMPAD_0 = 96;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_51_boot)
HXDLIN(  51)		NUMPAD_1 = 97;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_52_boot)
HXDLIN(  52)		NUMPAD_2 = 98;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_53_boot)
HXDLIN(  53)		NUMPAD_3 = 99;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_54_boot)
HXDLIN(  54)		NUMPAD_4 = 100;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_55_boot)
HXDLIN(  55)		NUMPAD_5 = 101;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_56_boot)
HXDLIN(  56)		NUMPAD_6 = 102;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_57_boot)
HXDLIN(  57)		NUMPAD_7 = 103;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_58_boot)
HXDLIN(  58)		NUMPAD_8 = 104;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_59_boot)
HXDLIN(  59)		NUMPAD_9 = 105;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_60_boot)
HXDLIN(  60)		NUMPAD_MULTIPLY = 106;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_61_boot)
HXDLIN(  61)		NUMPAD_ADD = 107;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_62_boot)
HXDLIN(  62)		NUMPAD_ENTER = 108;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_63_boot)
HXDLIN(  63)		NUMPAD_SUBTRACT = 109;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_64_boot)
HXDLIN(  64)		NUMPAD_DECIMAL = 110;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_65_boot)
HXDLIN(  65)		NUMPAD_DIVIDE = 111;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_66_boot)
HXDLIN(  66)		F1 = 112;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_67_boot)
HXDLIN(  67)		F2 = 113;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_68_boot)
HXDLIN(  68)		F3 = 114;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_69_boot)
HXDLIN(  69)		F4 = 115;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_70_boot)
HXDLIN(  70)		F5 = 116;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_71_boot)
HXDLIN(  71)		F6 = 117;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_72_boot)
HXDLIN(  72)		F7 = 118;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_73_boot)
HXDLIN(  73)		F8 = 119;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_74_boot)
HXDLIN(  74)		F9 = 120;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_75_boot)
HXDLIN(  75)		F10 = 121;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_76_boot)
HXDLIN(  76)		F11 = 122;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_77_boot)
HXDLIN(  77)		F12 = 123;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_78_boot)
HXDLIN(  78)		F13 = 124;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_79_boot)
HXDLIN(  79)		F14 = 125;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_80_boot)
HXDLIN(  80)		F15 = 126;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_81_boot)
HXDLIN(  81)		BACKSPACE = 8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_82_boot)
HXDLIN(  82)		TAB = 9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_83_boot)
HXDLIN(  83)		ALTERNATE = 18;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_84_boot)
HXDLIN(  84)		ENTER = 13;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_85_boot)
HXDLIN(  85)		COMMAND = 15;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_86_boot)
HXDLIN(  86)		SHIFT = 16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_87_boot)
HXDLIN(  87)		CONTROL = 17;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_90_boot)
HXDLIN(  90)		BREAK = 19;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_92_boot)
HXDLIN(  92)		CAPS_LOCK = 20;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_93_boot)
HXDLIN(  93)		NUMPAD = 21;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_94_boot)
HXDLIN(  94)		ESCAPE = 27;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_95_boot)
HXDLIN(  95)		SPACE = 32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_96_boot)
HXDLIN(  96)		PAGE_UP = 33;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_97_boot)
HXDLIN(  97)		PAGE_DOWN = 34;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_98_boot)
HXDLIN(  98)		END = 35;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_99_boot)
HXDLIN(  99)		HOME = 36;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_100_boot)
HXDLIN( 100)		LEFT = 37;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_101_boot)
HXDLIN( 101)		RIGHT = 39;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_102_boot)
HXDLIN( 102)		UP = 38;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_103_boot)
HXDLIN( 103)		DOWN = 40;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_104_boot)
HXDLIN( 104)		INSERT = 45;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_105_boot)
HXDLIN( 105)		DELETE = 46;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_108_boot)
HXDLIN( 108)		NUMLOCK = 144;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_110_boot)
HXDLIN( 110)		SEMICOLON = 186;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_111_boot)
HXDLIN( 111)		EQUAL = 187;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_112_boot)
HXDLIN( 112)		COMMA = 188;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_113_boot)
HXDLIN( 113)		MINUS = 189;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_114_boot)
HXDLIN( 114)		PERIOD = 190;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_115_boot)
HXDLIN( 115)		SLASH = 191;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_116_boot)
HXDLIN( 116)		BACKQUOTE = 192;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_117_boot)
HXDLIN( 117)		LEFTBRACKET = 219;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_118_boot)
HXDLIN( 118)		BACKSLASH = 220;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_119_boot)
HXDLIN( 119)		RIGHTBRACKET = 221;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_120_boot)
HXDLIN( 120)		QUOTE = 222;
            	}
}

} // end namespace openfl
} // end namespace ui
